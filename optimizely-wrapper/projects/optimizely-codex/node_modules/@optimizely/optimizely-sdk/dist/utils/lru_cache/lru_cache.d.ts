/**
 * Copyright 2022-2023, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import CacheElement from './cache_element';
export interface LRUCacheConfig {
    maxSize: number;
    timeout: number;
}
export interface ICache<K, V> {
    lookup(key: K): V | null;
    save({ key, value }: {
        key: K;
        value: V;
    }): void;
    reset(): void;
}
/**
 * Least-Recently Used Cache (LRU Cache) Implementation with Generic Key-Value Pairs
 * Analogous to a Map that has a specified max size and a timeout per element.
 * - Removes the least-recently used element from the cache if max size exceeded.
 * - Removes stale elements (entries older than their timeout) from the cache.
 */
export declare class LRUCache<K, V> implements ICache<K, V> {
    private _map;
    private _maxSize;
    private _timeout;
    get map(): Map<K, CacheElement<V>>;
    get maxSize(): number;
    get timeout(): number;
    constructor({ maxSize, timeout }: LRUCacheConfig);
    /**
     * Returns a valid, non-stale value from LRU Cache based on an input key.
     * Additionally moves the element to the end of the cache and removes from cache if stale.
     */
    lookup(key: K): V | null;
    /**
     * Inserts/moves an input key-value pair to the end of the LRU Cache.
     * Removes the least-recently used element if the cache exceeds it's maxSize.
     */
    save({ key, value }: {
        key: K;
        value: V;
    }): void;
    /**
     * Clears the LRU Cache
     */
    reset(): void;
    /**
     * Reads value from specified key without moving elements in the LRU Cache.
     * @param {K} key
     */
    peek(key: K): V | null;
}
export interface ISegmentsCacheConfig {
    DEFAULT_CAPACITY: number;
    DEFAULT_TIMEOUT_SECS: number;
}
export default LRUCache;
