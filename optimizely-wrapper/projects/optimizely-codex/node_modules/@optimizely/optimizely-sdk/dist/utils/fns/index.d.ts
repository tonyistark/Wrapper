export declare function assign(target: any, ...sources: any[]): any;
declare function currentTimestamp(): number;
declare function isSafeInteger(number: unknown): boolean;
export declare function keyBy<K>(arr: K[], key: string): {
    [key: string]: K;
};
declare function isNumber(value: unknown): boolean;
export declare function uuid(): string;
export type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;
export declare function getTimestamp(): number;
/**
 * Validates a value is a valid TypeScript enum
 *
 * @export
 * @param {object} enumToCheck
 * @param {*} value
 * @returns {boolean}
 */
export declare function isValidEnum(enumToCheck: {
    [key: string]: any;
}, value: number | string): boolean;
export declare function groupBy<K>(arr: K[], grouperFn: (item: K) => string): Array<K[]>;
export declare function objectValues<K>(obj: {
    [key: string]: K;
}): K[];
export declare function objectEntries<K>(obj: {
    [key: string]: K;
}): [string, K][];
export declare function find<K>(arr: K[], cond: (arg: K) => boolean): K | undefined;
export declare function keyByUtil<K>(arr: K[], keyByFn: (item: K) => string): {
    [key: string]: K;
};
export declare function sprintf(format: string, ...args: any[]): string;
/**
 * Checks two string arrays for equality.
 * @param arrayA First Array to be compared against.
 * @param arrayB Second Array to be compared against.
 * @returns {boolean} True if both arrays are equal, otherwise returns false.
 */
export declare function checkArrayEquality(arrayA: string[], arrayB: string[]): boolean;
declare const _default: {
    assign: typeof assign;
    checkArrayEquality: typeof checkArrayEquality;
    currentTimestamp: typeof currentTimestamp;
    isSafeInteger: typeof isSafeInteger;
    keyBy: typeof keyBy;
    uuid: typeof uuid;
    isNumber: typeof isNumber;
    getTimestamp: typeof getTimestamp;
    isValidEnum: typeof isValidEnum;
    groupBy: typeof groupBy;
    objectValues: typeof objectValues;
    objectEntries: typeof objectEntries;
    find: typeof find;
    keyByUtil: typeof keyByUtil;
    sprintf: typeof sprintf;
};
export default _default;
