/**
 * Copyright 2022-2023, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import PersistentKeyValueCache from '../key_value_cache/persistentKeyValueCache';
export interface IVuidManager {
    readonly vuid: string;
}
/**
 * Manager for creating, persisting, and retrieving a Visitor Unique Identifier
 */
export declare class VuidManager implements IVuidManager {
    /**
     * Prefix used as part of the VUID format
     * @public
     * @readonly
     */
    static readonly vuid_prefix: string;
    /**
     * Unique key used within the persistent value cache against which to
     * store the VUID
     * @private
     */
    private _keyForVuid;
    /**
     * Current VUID value being used
     * @private
     */
    private _vuid;
    /**
     * Get the current VUID value being used
     */
    get vuid(): string;
    private constructor();
    /**
     * Instance of the VUID Manager
     * @private
     */
    private static _instance;
    /**
     * Gets the current instance of the VUID Manager, initializing if needed
     * @param cache Caching mechanism to use for persisting the VUID outside working memory   *
     * @returns An instance of VuidManager
     */
    static instance(cache: PersistentKeyValueCache): Promise<VuidManager>;
    /**
     * Attempts to load a VUID from persistent cache or generates a new VUID
     * @param cache Caching mechanism to use for persisting the VUID outside working memory
     * @returns Current VUID stored in the VuidManager
     * @private
     */
    private load;
    /**
     * Creates a new VUID
     * @returns A new visitor unique identifier
     * @private
     */
    private makeVuid;
    /**
     * Saves a VUID to a persistent cache
     * @param vuid VUID to be stored
     * @param cache Caching mechanism to use for persisting the VUID outside working memory
     * @private
     */
    private save;
    /**
     * Validates the format of a Visitor Unique Identifier
     * @param vuid VistorId to check
     * @returns *true* if the VisitorId is valid otherwise *false* for invalid
     */
    static isVuid: (vuid: string) => boolean;
    /**
     * Function used in unit testing to reset the VuidManager
     * **Important**: This should not to be used in production code
     * @private
     */
    private static _reset;
}
