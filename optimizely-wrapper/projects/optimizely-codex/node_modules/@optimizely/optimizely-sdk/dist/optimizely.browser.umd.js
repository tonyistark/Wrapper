(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = global || self, factory(global.optimizelySdk = {}));
}(this, (function (exports) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (g && (g = 0, op[0] && (_ = 0)), _) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    /**
     * @export
     * @class NoopErrorHandler
     * @implements {ErrorHandler}
     */
    var NoopErrorHandler = /** @class */ (function () {
        function NoopErrorHandler() {
        }
        /**
         * @param {Error} exception
         * @memberof NoopErrorHandler
         */
        NoopErrorHandler.prototype.handleError = function (exception) {
            // no-op
            return;
        };
        return NoopErrorHandler;
    }());
    var globalErrorHandler = new NoopErrorHandler();
    /**
     * @export
     * @param {ErrorHandler} handler
     */
    function setErrorHandler(handler) {
        globalErrorHandler = handler;
    }
    /**
     * @export
     * @returns {ErrorHandler}
     */
    function getErrorHandler() {
        return globalErrorHandler;
    }

    // Unique ID creation requires a high quality random # generator. In the browser we therefore
    // require the crypto API and do not support built-in fallback to lower quality random number
    // generators (like Math.random()).
    let getRandomValues;
    const rnds8 = new Uint8Array(16);
    function rng() {
      // lazy load so that environments that need to polyfill have a chance to do so
      if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation.
        getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);

        if (!getRandomValues) {
          throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
        }
      }

      return getRandomValues(rnds8);
    }

    /**
     * Convert array of 16 byte values to UUID string format of the form:
     * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
     */

    const byteToHex = [];

    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 0x100).toString(16).slice(1));
    }

    function unsafeStringify(arr, offset = 0) {
      // Note: Be careful editing this code!  It's been tuned for performance
      // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
      return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
    }

    const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);
    var native = {
      randomUUID
    };

    function v4(options, buf, offset) {
      if (native.randomUUID && !buf && !options) {
        return native.randomUUID();
      }

      options = options || {};
      const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`

      rnds[6] = rnds[6] & 0x0f | 0x40;
      rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

      if (buf) {
        offset = offset || 0;

        for (let i = 0; i < 16; ++i) {
          buf[offset + i] = rnds[i];
        }

        return buf;
      }

      return unsafeStringify(rnds);
    }

    var MAX_SAFE_INTEGER_LIMIT = Math.pow(2, 53);
    // eslint-disable-next-line
    function assign(target) {
        var sources = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            sources[_i - 1] = arguments[_i];
        }
        if (!target) {
            return {};
        }
        if (typeof Object.assign === 'function') {
            return Object.assign.apply(Object, __spreadArray([target], sources, false));
        }
        else {
            var to = Object(target);
            for (var index = 0; index < sources.length; index++) {
                var nextSource = sources[index];
                if (nextSource !== null && nextSource !== undefined) {
                    for (var nextKey in nextSource) {
                        // Avoid bugs when hasOwnProperty is shadowed
                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                            to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
            }
            return to;
        }
    }
    function currentTimestamp() {
        return Math.round(new Date().getTime());
    }
    function isSafeInteger(number) {
        return typeof number == 'number' && Math.abs(number) <= MAX_SAFE_INTEGER_LIMIT;
    }
    function keyBy(arr, key) {
        if (!arr)
            return {};
        return keyByUtil(arr, function (item) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            return item[key];
        });
    }
    function isNumber(value) {
        return typeof value === 'number';
    }
    function uuid() {
        return v4();
    }
    function getTimestamp() {
        return new Date().getTime();
    }
    /**
     * Validates a value is a valid TypeScript enum
     *
     * @export
     * @param {object} enumToCheck
     * @param {*} value
     * @returns {boolean}
     */
    // TODO[OASIS-6649]: Don't use any type
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
    function isValidEnum(enumToCheck, value) {
        var found = false;
        var keys = Object.keys(enumToCheck);
        for (var index = 0; index < keys.length; index++) {
            if (value === enumToCheck[keys[index]]) {
                found = true;
                break;
            }
        }
        return found;
    }
    function groupBy(arr, grouperFn) {
        var grouper = {};
        arr.forEach(function (item) {
            var key = grouperFn(item);
            grouper[key] = grouper[key] || [];
            grouper[key].push(item);
        });
        return objectValues(grouper);
    }
    function objectValues(obj) {
        return Object.keys(obj).map(function (key) { return obj[key]; });
    }
    function objectEntries(obj) {
        return Object.keys(obj).map(function (key) { return [key, obj[key]]; });
    }
    function find(arr, cond) {
        var found;
        for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var item = arr_1[_i];
            if (cond(item)) {
                found = item;
                break;
            }
        }
        return found;
    }
    function keyByUtil(arr, keyByFn) {
        var map = {};
        arr.forEach(function (item) {
            var key = keyByFn(item);
            map[key] = item;
        });
        return map;
    }
    // TODO[OASIS-6649]: Don't use any type
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
    function sprintf(format) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var i = 0;
        return format.replace(/%s/g, function () {
            var arg = args[i++];
            var type = typeof arg;
            if (type === 'function') {
                return arg();
            }
            else if (type === 'string') {
                return arg;
            }
            else {
                return String(arg);
            }
        });
    }
    /**
     * Checks two string arrays for equality.
     * @param arrayA First Array to be compared against.
     * @param arrayB Second Array to be compared against.
     * @returns {boolean} True if both arrays are equal, otherwise returns false.
     */
    function checkArrayEquality(arrayA, arrayB) {
        return arrayA.length === arrayB.length && arrayA.every(function (item, index) { return item === arrayB[index]; });
    }
    var fns = {
        assign: assign,
        checkArrayEquality: checkArrayEquality,
        currentTimestamp: currentTimestamp,
        isSafeInteger: isSafeInteger,
        keyBy: keyBy,
        uuid: uuid,
        isNumber: isNumber,
        getTimestamp: getTimestamp,
        isValidEnum: isValidEnum,
        groupBy: groupBy,
        objectValues: objectValues,
        objectEntries: objectEntries,
        find: find,
        keyByUtil: keyByUtil,
        sprintf: sprintf,
    };

    /**
     * Copyright 2019, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (LogLevel) {
        LogLevel[LogLevel["NOTSET"] = 0] = "NOTSET";
        LogLevel[LogLevel["DEBUG"] = 1] = "DEBUG";
        LogLevel[LogLevel["INFO"] = 2] = "INFO";
        LogLevel[LogLevel["WARNING"] = 3] = "WARNING";
        LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
    })(exports.LogLevel || (exports.LogLevel = {}));

    var stringToLogLevel = {
        NOTSET: 0,
        DEBUG: 1,
        INFO: 2,
        WARNING: 3,
        ERROR: 4,
    };
    function coerceLogLevel(level) {
        if (typeof level !== 'string') {
            return level;
        }
        level = level.toUpperCase();
        if (level === 'WARN') {
            level = 'WARNING';
        }
        if (!stringToLogLevel[level]) {
            return level;
        }
        return stringToLogLevel[level];
    }
    var DefaultLogManager = /** @class */ (function () {
        function DefaultLogManager() {
            this.defaultLoggerFacade = new OptimizelyLogger();
            this.loggers = {};
        }
        DefaultLogManager.prototype.getLogger = function (name) {
            if (!name) {
                return this.defaultLoggerFacade;
            }
            if (!this.loggers[name]) {
                this.loggers[name] = new OptimizelyLogger({ messagePrefix: name });
            }
            return this.loggers[name];
        };
        return DefaultLogManager;
    }());
    var ConsoleLogHandler = /** @class */ (function () {
        /**
         * Creates an instance of ConsoleLogger.
         * @param {ConsoleLogHandlerConfig} config
         * @memberof ConsoleLogger
         */
        function ConsoleLogHandler(config) {
            if (config === void 0) { config = {}; }
            this.logLevel = exports.LogLevel.NOTSET;
            if (config.logLevel !== undefined && isValidEnum(exports.LogLevel, config.logLevel)) {
                this.setLogLevel(config.logLevel);
            }
            this.logToConsole = config.logToConsole !== undefined ? !!config.logToConsole : true;
            this.prefix = config.prefix !== undefined ? config.prefix : '[OPTIMIZELY]';
        }
        /**
         * @param {LogLevel} level
         * @param {string} message
         * @memberof ConsoleLogger
         */
        ConsoleLogHandler.prototype.log = function (level, message) {
            if (!this.shouldLog(level) || !this.logToConsole) {
                return;
            }
            var logMessage = "".concat(this.prefix, " - ").concat(this.getLogLevelName(level), " ").concat(this.getTime(), " ").concat(message);
            this.consoleLog(level, [logMessage]);
        };
        /**
         * @param {LogLevel} level
         * @memberof ConsoleLogger
         */
        ConsoleLogHandler.prototype.setLogLevel = function (level) {
            level = coerceLogLevel(level);
            if (!isValidEnum(exports.LogLevel, level) || level === undefined) {
                this.logLevel = exports.LogLevel.ERROR;
            }
            else {
                this.logLevel = level;
            }
        };
        /**
         * @returns {string}
         * @memberof ConsoleLogger
         */
        ConsoleLogHandler.prototype.getTime = function () {
            return new Date().toISOString();
        };
        /**
         * @private
         * @param {LogLevel} targetLogLevel
         * @returns {boolean}
         * @memberof ConsoleLogger
         */
        ConsoleLogHandler.prototype.shouldLog = function (targetLogLevel) {
            return targetLogLevel >= this.logLevel;
        };
        /**
         * @private
         * @param {LogLevel} logLevel
         * @returns {string}
         * @memberof ConsoleLogger
         */
        ConsoleLogHandler.prototype.getLogLevelName = function (logLevel) {
            switch (logLevel) {
                case exports.LogLevel.DEBUG:
                    return 'DEBUG';
                case exports.LogLevel.INFO:
                    return 'INFO ';
                case exports.LogLevel.WARNING:
                    return 'WARN ';
                case exports.LogLevel.ERROR:
                    return 'ERROR';
                default:
                    return 'NOTSET';
            }
        };
        /**
         * @private
         * @param {LogLevel} logLevel
         * @param {string[]} logArguments
         * @memberof ConsoleLogger
         */
        ConsoleLogHandler.prototype.consoleLog = function (logLevel, logArguments) {
            switch (logLevel) {
                case exports.LogLevel.DEBUG:
                    console.log.apply(console, logArguments);
                    break;
                case exports.LogLevel.INFO:
                    console.info.apply(console, logArguments);
                    break;
                case exports.LogLevel.WARNING:
                    console.warn.apply(console, logArguments);
                    break;
                case exports.LogLevel.ERROR:
                    console.error.apply(console, logArguments);
                    break;
                default:
                    console.log.apply(console, logArguments);
            }
        };
        return ConsoleLogHandler;
    }());
    var globalLogLevel = exports.LogLevel.NOTSET;
    var globalLogHandler = null;
    var OptimizelyLogger = /** @class */ (function () {
        function OptimizelyLogger(opts) {
            if (opts === void 0) { opts = {}; }
            this.messagePrefix = '';
            if (opts.messagePrefix) {
                this.messagePrefix = opts.messagePrefix;
            }
        }
        /**
         * @param {(LogLevel | LogInputObject)} levelOrObj
         * @param {string} [message]
         * @memberof OptimizelyLogger
         */
        OptimizelyLogger.prototype.log = function (level, message) {
            var splat = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                splat[_i - 2] = arguments[_i];
            }
            this.internalLog(coerceLogLevel(level), {
                message: message,
                splat: splat,
            });
        };
        OptimizelyLogger.prototype.info = function (message) {
            var splat = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                splat[_i - 1] = arguments[_i];
            }
            this.namedLog(exports.LogLevel.INFO, message, splat);
        };
        OptimizelyLogger.prototype.debug = function (message) {
            var splat = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                splat[_i - 1] = arguments[_i];
            }
            this.namedLog(exports.LogLevel.DEBUG, message, splat);
        };
        OptimizelyLogger.prototype.warn = function (message) {
            var splat = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                splat[_i - 1] = arguments[_i];
            }
            this.namedLog(exports.LogLevel.WARNING, message, splat);
        };
        OptimizelyLogger.prototype.error = function (message) {
            var splat = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                splat[_i - 1] = arguments[_i];
            }
            this.namedLog(exports.LogLevel.ERROR, message, splat);
        };
        OptimizelyLogger.prototype.format = function (data) {
            return "".concat(this.messagePrefix ? this.messagePrefix + ': ' : '').concat(sprintf.apply(void 0, __spreadArray([data.message], data.splat, false)));
        };
        OptimizelyLogger.prototype.internalLog = function (level, data) {
            if (!globalLogHandler) {
                return;
            }
            if (level < globalLogLevel) {
                return;
            }
            globalLogHandler.log(level, this.format(data));
            if (data.error && data.error instanceof Error) {
                getErrorHandler().handleError(data.error);
            }
        };
        OptimizelyLogger.prototype.namedLog = function (level, message, splat) {
            var error;
            if (message instanceof Error) {
                error = message;
                message = error.message;
                this.internalLog(level, {
                    error: error,
                    message: message,
                    splat: splat,
                });
                return;
            }
            if (splat.length === 0) {
                this.internalLog(level, {
                    message: message,
                    splat: splat,
                });
                return;
            }
            var last = splat[splat.length - 1];
            if (last instanceof Error) {
                error = last;
                splat.splice(-1);
            }
            this.internalLog(level, { message: message, error: error, splat: splat });
        };
        return OptimizelyLogger;
    }());
    var globalLogManager = new DefaultLogManager();
    function getLogger(name) {
        return globalLogManager.getLogger(name);
    }
    function setLogHandler(logger) {
        globalLogHandler = logger;
    }
    function setLogLevel(level) {
        level = coerceLogLevel(level);
        if (!isValidEnum(exports.LogLevel, level) || level === undefined) {
            globalLogLevel = exports.LogLevel.ERROR;
        }
        else {
            globalLogLevel = level;
        }
    }
    var logHelper = {
        setLogLevel: setLogLevel,
        setLogHandler: setLogHandler
    };

    function areEventContextsEqual(eventA, eventB) {
        var contextA = eventA.context;
        var contextB = eventB.context;
        return (contextA.accountId === contextB.accountId &&
            contextA.projectId === contextB.projectId &&
            contextA.clientName === contextB.clientName &&
            contextA.clientVersion === contextB.clientVersion &&
            contextA.revision === contextB.revision &&
            contextA.anonymizeIP === contextB.anonymizeIP &&
            contextA.botFiltering === contextB.botFiltering);
    }

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger = getLogger('EventProcessor');
    var Timer = /** @class */ (function () {
        function Timer(_a) {
            var timeout = _a.timeout, callback = _a.callback;
            this.timeout = Math.max(timeout, 0);
            this.callback = callback;
        }
        Timer.prototype.start = function () {
            this.timeoutId = setTimeout(this.callback, this.timeout);
        };
        Timer.prototype.refresh = function () {
            this.stop();
            this.start();
        };
        Timer.prototype.stop = function () {
            if (this.timeoutId) {
                clearTimeout(this.timeoutId);
            }
        };
        return Timer;
    }());
    var SingleEventQueue = /** @class */ (function () {
        function SingleEventQueue(_a) {
            var sink = _a.sink;
            this.sink = sink;
        }
        SingleEventQueue.prototype.start = function () {
            // no-op
            return Promise.resolve();
        };
        SingleEventQueue.prototype.stop = function () {
            // no-op
            return Promise.resolve();
        };
        SingleEventQueue.prototype.enqueue = function (event) {
            this.sink([event]);
        };
        return SingleEventQueue;
    }());
    var DefaultEventQueue = /** @class */ (function () {
        function DefaultEventQueue(_a) {
            var flushInterval = _a.flushInterval, maxQueueSize = _a.maxQueueSize, sink = _a.sink, closingSink = _a.closingSink, batchComparator = _a.batchComparator;
            this.buffer = [];
            this.maxQueueSize = Math.max(maxQueueSize, 1);
            this.sink = sink;
            this.closingSink = closingSink;
            this.batchComparator = batchComparator;
            this.timer = new Timer({
                callback: this.flush.bind(this),
                timeout: flushInterval,
            });
            this.started = false;
        }
        DefaultEventQueue.prototype.start = function () {
            this.started = true;
            // dont start the timer until the first event is enqueued
            return Promise.resolve();
        };
        DefaultEventQueue.prototype.stop = function () {
            this.started = false;
            var result = this.closingSink ? this.closingSink(this.buffer) : this.sink(this.buffer);
            this.buffer = [];
            this.timer.stop();
            return result;
        };
        DefaultEventQueue.prototype.enqueue = function (event) {
            if (!this.started) {
                logger.warn('Queue is stopped, not accepting event');
                return;
            }
            // If new event cannot be included into the current batch, flush so it can
            // be in its own new batch.
            var bufferedEvent = this.buffer[0];
            if (bufferedEvent && !this.batchComparator(bufferedEvent, event)) {
                this.flush();
            }
            // start the timer when the first event is put in
            if (this.buffer.length === 0) {
                this.timer.refresh();
            }
            this.buffer.push(event);
            if (this.buffer.length >= this.maxQueueSize) {
                this.flush();
            }
        };
        DefaultEventQueue.prototype.flush = function () {
            this.sink(this.buffer);
            this.buffer = [];
            this.timer.stop();
        };
        return DefaultEventQueue;
    }());

    /****************************************************************************
     * Copyright 2016-2024 Optimizely, Inc. and contributors                   *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    https://www.apache.org/licenses/LICENSE-2.0                            *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    /**
     * Contains global enums used throughout the library
     */
    var LOG_LEVEL = {
        NOTSET: 0,
        DEBUG: 1,
        INFO: 2,
        WARNING: 3,
        ERROR: 4,
    };
    var ERROR_MESSAGES = {
        BROWSER_ODP_MANAGER_INITIALIZATION_FAILED: '%s: Error initializing Browser ODP Manager.',
        CONDITION_EVALUATOR_ERROR: '%s: Error evaluating audience condition of type %s: %s',
        DATAFILE_AND_SDK_KEY_MISSING: '%s: You must provide at least one of sdkKey or datafile. Cannot start Optimizely',
        EXPERIMENT_KEY_NOT_IN_DATAFILE: '%s: Experiment key %s is not in datafile.',
        FEATURE_NOT_IN_DATAFILE: '%s: Feature key %s is not in datafile.',
        FETCH_SEGMENTS_FAILED_NETWORK_ERROR: '%s: Audience segments fetch failed. (network error)',
        FETCH_SEGMENTS_FAILED_DECODE_ERROR: '%s: Audience segments fetch failed. (decode error)',
        IMPROPERLY_FORMATTED_EXPERIMENT: '%s: Experiment key %s is improperly formatted.',
        INVALID_ATTRIBUTES: '%s: Provided attributes are in an invalid format.',
        INVALID_BUCKETING_ID: '%s: Unable to generate hash for bucketing ID %s: %s',
        INVALID_DATAFILE: '%s: Datafile is invalid - property %s: %s',
        INVALID_DATAFILE_MALFORMED: '%s: Datafile is invalid because it is malformed.',
        INVALID_CONFIG: '%s: Provided Optimizely config is in an invalid format.',
        INVALID_JSON: '%s: JSON object is not valid.',
        INVALID_ERROR_HANDLER: '%s: Provided "errorHandler" is in an invalid format.',
        INVALID_EVENT_DISPATCHER: '%s: Provided "eventDispatcher" is in an invalid format.',
        INVALID_EVENT_TAGS: '%s: Provided event tags are in an invalid format.',
        INVALID_EXPERIMENT_KEY: '%s: Experiment key %s is not in datafile. It is either invalid, paused, or archived.',
        INVALID_EXPERIMENT_ID: '%s: Experiment ID %s is not in datafile.',
        INVALID_GROUP_ID: '%s: Group ID %s is not in datafile.',
        INVALID_LOGGER: '%s: Provided "logger" is in an invalid format.',
        INVALID_ROLLOUT_ID: '%s: Invalid rollout ID %s attached to feature %s',
        INVALID_USER_ID: '%s: Provided user ID is in an invalid format.',
        INVALID_USER_PROFILE_SERVICE: '%s: Provided user profile service instance is in an invalid format: %s.',
        LOCAL_STORAGE_DOES_NOT_EXIST: 'Error accessing window localStorage.',
        MISSING_INTEGRATION_KEY: '%s: Integration key missing from datafile. All integrations should include a key.',
        NO_DATAFILE_SPECIFIED: '%s: No datafile specified. Cannot start optimizely.',
        NO_JSON_PROVIDED: '%s: No JSON object to validate against schema.',
        NO_VARIATION_FOR_EXPERIMENT_KEY: '%s: No variation key %s defined in datafile for experiment %s.',
        ODP_CONFIG_NOT_AVAILABLE: '%s: ODP is not integrated to the project.',
        ODP_EVENT_FAILED: 'ODP event send failed.',
        ODP_FETCH_QUALIFIED_SEGMENTS_SEGMENTS_MANAGER_MISSING: '%s: ODP unable to fetch qualified segments (Segments Manager not initialized).',
        ODP_IDENTIFY_FAILED_EVENT_MANAGER_MISSING: '%s: ODP identify event %s is not dispatched (Event Manager not instantiated).',
        ODP_INITIALIZATION_FAILED: '%s: ODP failed to initialize.',
        ODP_INVALID_DATA: '%s: ODP data is not valid',
        ODP_EVENT_FAILED_ODP_MANAGER_MISSING: '%s: ODP Event failed to send. (ODP Manager not initialized).',
        ODP_FETCH_QUALIFIED_SEGMENTS_FAILED_ODP_MANAGER_MISSING: '%s: ODP failed to Fetch Qualified Segments. (ODP Manager not initialized).',
        ODP_IDENTIFY_USER_FAILED_ODP_MANAGER_MISSING: '%s: ODP failed to Identify User. (ODP Manager not initialized).',
        ODP_IDENTIFY_USER_FAILED_USER_CONTEXT_INITIALIZATION: '%s: ODP failed to Identify User. (Failed during User Context Initialization).',
        ODP_MANAGER_UPDATE_SETTINGS_FAILED_EVENT_MANAGER_MISSING: '%s: ODP Manager failed to update OdpConfig settings for internal event manager. (Event Manager not initialized).',
        ODP_MANAGER_UPDATE_SETTINGS_FAILED_SEGMENTS_MANAGER_MISSING: '%s: ODP Manager failed to update OdpConfig settings for internal segments manager. (Segments Manager not initialized).',
        ODP_NOT_ENABLED: 'ODP is not enabled',
        ODP_NOT_INTEGRATED: '%s: ODP is not integrated',
        ODP_SEND_EVENT_FAILED_EVENT_MANAGER_MISSING: '%s: ODP send event %s was not dispatched (Event Manager not instantiated).',
        ODP_SEND_EVENT_FAILED_UID_MISSING: '%s: ODP send event %s was not dispatched (No valid user identifier provided).',
        ODP_SEND_EVENT_FAILED_VUID_MISSING: '%s: ODP send event %s was not dispatched (Unable to fetch VUID).',
        ODP_VUID_INITIALIZATION_FAILED: '%s: ODP VUID initialization failed.',
        ODP_VUID_REGISTRATION_FAILED: '%s: ODP VUID failed to be registered.',
        ODP_VUID_REGISTRATION_FAILED_EVENT_MANAGER_MISSING: '%s: ODP register vuid failed. (Event Manager not instantiated).',
        UNDEFINED_ATTRIBUTE: '%s: Provided attribute: %s has an undefined value.',
        UNRECOGNIZED_ATTRIBUTE: '%s: Unrecognized attribute %s provided. Pruning before sending event to Optimizely.',
        UNABLE_TO_CAST_VALUE: '%s: Unable to cast value %s to type %s, returning null.',
        USER_NOT_IN_FORCED_VARIATION: '%s: User %s is not in the forced variation map. Cannot remove their forced variation.',
        USER_PROFILE_LOOKUP_ERROR: '%s: Error while looking up user profile for user ID "%s": %s.',
        USER_PROFILE_SAVE_ERROR: '%s: Error while saving user profile for user ID "%s": %s.',
        VARIABLE_KEY_NOT_IN_DATAFILE: '%s: Variable with key "%s" associated with feature with key "%s" is not in datafile.',
        VARIATION_ID_NOT_IN_DATAFILE: '%s: No variation ID %s defined in datafile for experiment %s.',
        VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT: '%s: Variation ID %s is not in the datafile.',
        INVALID_INPUT_FORMAT: '%s: Provided %s is in an invalid format.',
        INVALID_DATAFILE_VERSION: '%s: This version of the JavaScript SDK does not support the given datafile version: %s',
        INVALID_VARIATION_KEY: '%s: Provided variation key is in an invalid format.',
    };
    var LOG_MESSAGES = {
        ACTIVATE_USER: '%s: Activating user %s in experiment %s.',
        DISPATCH_CONVERSION_EVENT: '%s: Dispatching conversion event to URL %s with params %s.',
        DISPATCH_IMPRESSION_EVENT: '%s: Dispatching impression event to URL %s with params %s.',
        DEPRECATED_EVENT_VALUE: '%s: Event value is deprecated in %s call.',
        EVENT_KEY_NOT_FOUND: '%s: Event key %s is not in datafile.',
        EXPERIMENT_NOT_RUNNING: '%s: Experiment %s is not running.',
        FEATURE_ENABLED_FOR_USER: '%s: Feature %s is enabled for user %s.',
        FEATURE_NOT_ENABLED_FOR_USER: '%s: Feature %s is not enabled for user %s.',
        FEATURE_HAS_NO_EXPERIMENTS: '%s: Feature %s is not attached to any experiments.',
        FAILED_TO_PARSE_VALUE: '%s: Failed to parse event value "%s" from event tags.',
        FAILED_TO_PARSE_REVENUE: '%s: Failed to parse revenue value "%s" from event tags.',
        FORCED_BUCKETING_FAILED: '%s: Variation key %s is not in datafile. Not activating user %s.',
        INVALID_OBJECT: '%s: Optimizely object is not valid. Failing %s.',
        INVALID_CLIENT_ENGINE: '%s: Invalid client engine passed: %s. Defaulting to node-sdk.',
        INVALID_DEFAULT_DECIDE_OPTIONS: '%s: Provided default decide options is not an array.',
        INVALID_DECIDE_OPTIONS: '%s: Provided decide options is not an array. Using default decide options.',
        INVALID_VARIATION_ID: '%s: Bucketed into an invalid variation ID. Returning null.',
        NOTIFICATION_LISTENER_EXCEPTION: '%s: Notification listener for (%s) threw exception: %s',
        NO_ROLLOUT_EXISTS: '%s: There is no rollout of feature %s.',
        NOT_ACTIVATING_USER: '%s: Not activating user %s for experiment %s.',
        NOT_TRACKING_USER: '%s: Not tracking user %s.',
        ODP_DISABLED: 'ODP Disabled.',
        ODP_IDENTIFY_FAILED_ODP_DISABLED: '%s: ODP identify event for user %s is not dispatched (ODP disabled).',
        ODP_IDENTIFY_FAILED_ODP_NOT_INTEGRATED: '%s: ODP identify event %s is not dispatched (ODP not integrated).',
        ODP_SEND_EVENT_IDENTIFIER_CONVERSION_FAILED: '%s: sendOdpEvent failed to parse through and convert fs_user_id aliases',
        PARSED_REVENUE_VALUE: '%s: Parsed revenue value "%s" from event tags.',
        PARSED_NUMERIC_VALUE: '%s: Parsed event value "%s" from event tags.',
        RETURNING_STORED_VARIATION: '%s: Returning previously activated variation "%s" of experiment "%s" for user "%s" from user profile.',
        ROLLOUT_HAS_NO_EXPERIMENTS: '%s: Rollout of feature %s has no experiments',
        SAVED_VARIATION: '%s: Saved variation "%s" of experiment "%s" for user "%s".',
        SAVED_VARIATION_NOT_FOUND: '%s: User %s was previously bucketed into variation with ID %s for experiment %s, but no matching variation was found.',
        SHOULD_NOT_DISPATCH_ACTIVATE: '%s: Experiment %s is not in "Running" state. Not activating user.',
        SKIPPING_JSON_VALIDATION: '%s: Skipping JSON schema validation.',
        TRACK_EVENT: '%s: Tracking event %s for user %s.',
        UNRECOGNIZED_DECIDE_OPTION: '%s: Unrecognized decide option %s provided.',
        USER_ASSIGNED_TO_EXPERIMENT_BUCKET: '%s: Assigned bucket %s to user with bucketing ID %s.',
        USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is in experiment %s of group %s.',
        USER_BUCKETED_INTO_TARGETING_RULE: '%s: User %s bucketed into targeting rule %s.',
        USER_IN_FEATURE_EXPERIMENT: '%s: User %s is in variation %s of experiment %s on the feature %s.',
        USER_IN_ROLLOUT: '%s: User %s is in rollout of feature %s.',
        USER_NOT_BUCKETED_INTO_EVERYONE_TARGETING_RULE: '%s: User %s not bucketed into everyone targeting rule due to traffic allocation.',
        USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP: '%s: User %s is not in experiment %s of group %s.',
        USER_NOT_BUCKETED_INTO_ANY_EXPERIMENT_IN_GROUP: '%s: User %s is not in any experiment of group %s.',
        USER_NOT_BUCKETED_INTO_TARGETING_RULE: '%s User %s not bucketed into targeting rule %s due to traffic allocation. Trying everyone rule.',
        USER_NOT_IN_FEATURE_EXPERIMENT: '%s: User %s is not in any experiment on the feature %s.',
        USER_NOT_IN_ROLLOUT: '%s: User %s is not in rollout of feature %s.',
        USER_FORCED_IN_VARIATION: '%s: User %s is forced in variation %s.',
        USER_MAPPED_TO_FORCED_VARIATION: '%s: Set variation %s for experiment %s and user %s in the forced variation map.',
        USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s does not meet conditions for targeting rule %s.',
        USER_MEETS_CONDITIONS_FOR_TARGETING_RULE: '%s: User %s meets conditions for targeting rule %s.',
        USER_HAS_VARIATION: '%s: User %s is in variation %s of experiment %s.',
        USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED: 'Variation (%s) is mapped to flag (%s), rule (%s) and user (%s) in the forced decision map.',
        USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED: 'Variation (%s) is mapped to flag (%s) and user (%s) in the forced decision map.',
        USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID: 'Invalid variation is mapped to flag (%s), rule (%s) and user (%s) in the forced decision map.',
        USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID: 'Invalid variation is mapped to flag (%s) and user (%s) in the forced decision map.',
        USER_HAS_FORCED_VARIATION: '%s: Variation %s is mapped to experiment %s and user %s in the forced variation map.',
        USER_HAS_NO_VARIATION: '%s: User %s is in no variation of experiment %s.',
        USER_HAS_NO_FORCED_VARIATION: '%s: User %s is not in the forced variation map.',
        USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT: '%s: No experiment %s mapped to user %s in the forced variation map.',
        USER_NOT_IN_ANY_EXPERIMENT: '%s: User %s is not in any experiment of group %s.',
        USER_NOT_IN_EXPERIMENT: '%s: User %s does not meet conditions to be in experiment %s.',
        USER_RECEIVED_DEFAULT_VARIABLE_VALUE: '%s: User "%s" is not in any variation or rollout rule. Returning default value for variable "%s" of feature flag "%s".',
        FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE: '%s: Feature "%s" is not enabled for user %s. Returning the default variable value "%s".',
        VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE: '%s: Variable "%s" is not used in variation "%s". Returning default value.',
        USER_RECEIVED_VARIABLE_VALUE: '%s: Got variable value "%s" for variable "%s" of feature flag "%s"',
        VALID_DATAFILE: '%s: Datafile is valid.',
        VALID_USER_PROFILE_SERVICE: '%s: Valid user profile service provided.',
        VARIATION_REMOVED_FOR_USER: '%s: Variation mapped to experiment %s has been removed for user %s.',
        VARIABLE_REQUESTED_WITH_WRONG_TYPE: '%s: Requested variable type "%s", but variable is of type "%s". Use correct API to retrieve value. Returning None.',
        VALID_BUCKETING_ID: '%s: BucketingId is valid: "%s"',
        BUCKETING_ID_NOT_STRING: '%s: BucketingID attribute is not a string. Defaulted to userId',
        EVALUATING_AUDIENCE: '%s: Starting to evaluate audience "%s" with conditions: %s.',
        EVALUATING_AUDIENCES_COMBINED: '%s: Evaluating audiences for %s "%s": %s.',
        AUDIENCE_EVALUATION_RESULT: '%s: Audience "%s" evaluated to %s.',
        AUDIENCE_EVALUATION_RESULT_COMBINED: '%s: Audiences for %s %s collectively evaluated to %s.',
        MISSING_ATTRIBUTE_VALUE: '%s: Audience condition %s evaluated to UNKNOWN because no value was passed for user attribute "%s".',
        UNEXPECTED_CONDITION_VALUE: '%s: Audience condition %s evaluated to UNKNOWN because the condition value is not supported.',
        UNEXPECTED_TYPE: '%s: Audience condition %s evaluated to UNKNOWN because a value of type "%s" was passed for user attribute "%s".',
        UNEXPECTED_TYPE_NULL: '%s: Audience condition %s evaluated to UNKNOWN because a null value was passed for user attribute "%s".',
        UNKNOWN_CONDITION_TYPE: '%s: Audience condition %s has an unknown condition type. You may need to upgrade to a newer release of the Optimizely SDK.',
        UNKNOWN_MATCH_TYPE: '%s: Audience condition %s uses an unknown match type. You may need to upgrade to a newer release of the Optimizely SDK.',
        UPDATED_OPTIMIZELY_CONFIG: '%s: Updated Optimizely config to revision %s (project id %s)',
        OUT_OF_BOUNDS: '%s: Audience condition %s evaluated to UNKNOWN because the number value for user attribute "%s" is not in the range [-2^53, +2^53].',
        UNABLE_TO_ATTACH_UNLOAD: '%s: unable to bind optimizely.close() to page unload event: "%s"',
    };
    var CONTROL_ATTRIBUTES = {
        BOT_FILTERING: '$opt_bot_filtering',
        BUCKETING_ID: '$opt_bucketing_id',
        STICKY_BUCKETING_KEY: '$opt_experiment_bucket_map',
        USER_AGENT: '$opt_user_agent',
        FORCED_DECISION_NULL_RULE_KEY: '$opt_null_rule_key',
    };
    var JAVASCRIPT_CLIENT_ENGINE = 'javascript-sdk';
    var NODE_CLIENT_ENGINE = 'node-sdk';
    var REACT_CLIENT_ENGINE = 'react-sdk';
    var REACT_NATIVE_CLIENT_ENGINE = 'react-native-sdk';
    var REACT_NATIVE_JS_CLIENT_ENGINE = 'react-native-js-sdk';
    var CLIENT_VERSION = '5.3.4';
    var DECISION_NOTIFICATION_TYPES = {
        AB_TEST: 'ab-test',
        FEATURE: 'feature',
        FEATURE_TEST: 'feature-test',
        FEATURE_VARIABLE: 'feature-variable',
        ALL_FEATURE_VARIABLES: 'all-feature-variables',
        FLAG: 'flag',
    };
    /*
     * Represents the source of a decision for feature management. When a feature
     * is accessed through isFeatureEnabled or getVariableValue APIs, the decision
     * source is used to decide whether to dispatch an impression event to
     * Optimizely.
     */
    var DECISION_SOURCES = {
        FEATURE_TEST: 'feature-test',
        ROLLOUT: 'rollout',
        EXPERIMENT: 'experiment',
    };
    var AUDIENCE_EVALUATION_TYPES = {
        RULE: 'rule',
        EXPERIMENT: 'experiment',
    };
    /*
     * Possible types of variables attached to features
     */
    var FEATURE_VARIABLE_TYPES = {
        BOOLEAN: 'boolean',
        DOUBLE: 'double',
        INTEGER: 'integer',
        STRING: 'string',
        JSON: 'json',
    };
    /*
     * Supported datafile versions
     */
    var DATAFILE_VERSIONS = {
        V2: '2',
        V3: '3',
        V4: '4',
    };
    var DECISION_MESSAGES = {
        SDK_NOT_READY: 'Optimizely SDK not configured properly yet.',
        FLAG_KEY_INVALID: 'No flag was found for key "%s".',
        VARIABLE_VALUE_INVALID: 'Variable value for key "%s" is invalid or wrong type.',
    };
    /*
     * Notification types for use with NotificationCenter
     * Format is EVENT: <list of parameters to callback>
     *
     * SDK consumers can use these to register callbacks with the notification center.
     *
     *  @deprecated since 3.1.0
     *  ACTIVATE: An impression event will be sent to Optimizely
     *  Callbacks will receive an object argument with the following properties:
     *    - experiment {Object}
     *    - userId {string}
     *    - attributes {Object|undefined}
     *    - variation {Object}
     *    - logEvent {Object}
     *
     *  DECISION: A decision is made in the system. i.e. user activation,
     *  feature access or feature-variable value retrieval
     *  Callbacks will receive an object argument with the following properties:
     *    - type {string}
     *    - userId {string}
     *    - attributes {Object|undefined}
     *    - decisionInfo {Object|undefined}
     *
     *  LOG_EVENT: A batch of events, which could contain impressions and/or conversions,
     *  will be sent to Optimizely
     *  Callbacks will receive an object argument with the following properties:
     *    - url {string}
     *    - httpVerb {string}
     *    - params {Object}
     *
     *  OPTIMIZELY_CONFIG_UPDATE: This Optimizely instance has been updated with a new
     *  config
     *
     *  TRACK: A conversion event will be sent to Optimizely
     *  Callbacks will receive the an object argument with the following properties:
     *    - eventKey {string}
     *    - userId {string}
     *    - attributes {Object|undefined}
     *    - eventTags {Object|undefined}
     *    - logEvent {Object}
     *
     */
    var NOTIFICATION_TYPES;
    (function (NOTIFICATION_TYPES) {
        NOTIFICATION_TYPES["ACTIVATE"] = "ACTIVATE:experiment, user_id,attributes, variation, event";
        NOTIFICATION_TYPES["DECISION"] = "DECISION:type, userId, attributes, decisionInfo";
        NOTIFICATION_TYPES["LOG_EVENT"] = "LOG_EVENT:logEvent";
        NOTIFICATION_TYPES["OPTIMIZELY_CONFIG_UPDATE"] = "OPTIMIZELY_CONFIG_UPDATE";
        NOTIFICATION_TYPES["TRACK"] = "TRACK:event_key, user_id, attributes, event_tags, event";
    })(NOTIFICATION_TYPES || (NOTIFICATION_TYPES = {}));
    /**
     * Default milliseconds before request timeout
     */
    var REQUEST_TIMEOUT_MS = 60 * 1000; // 1 minute
    var REQUEST_TIMEOUT_ODP_SEGMENTS_MS = 10 * 1000; // 10 secs
    var REQUEST_TIMEOUT_ODP_EVENTS_MS = 10 * 1000; // 10 secs
    /**
     * ODP User Key Options
     */
    var ODP_USER_KEY;
    (function (ODP_USER_KEY) {
        ODP_USER_KEY["VUID"] = "vuid";
        ODP_USER_KEY["FS_USER_ID"] = "fs_user_id";
    })(ODP_USER_KEY || (ODP_USER_KEY = {}));
    /**
     * Alias for fs_user_id to catch for and automatically convert to fs_user_id
     */
    var FS_USER_ID_ALIAS = 'fs-user-id';
    var ODP_DEFAULT_EVENT_TYPE = 'fullstack';
    /**
     * ODP Event Action Options
     */
    var ODP_EVENT_ACTION;
    (function (ODP_EVENT_ACTION) {
        ODP_EVENT_ACTION["IDENTIFIED"] = "identified";
        ODP_EVENT_ACTION["INITIALIZED"] = "client_initialized";
    })(ODP_EVENT_ACTION || (ODP_EVENT_ACTION = {}));

    var enums = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOG_LEVEL: LOG_LEVEL,
        ERROR_MESSAGES: ERROR_MESSAGES,
        LOG_MESSAGES: LOG_MESSAGES,
        CONTROL_ATTRIBUTES: CONTROL_ATTRIBUTES,
        JAVASCRIPT_CLIENT_ENGINE: JAVASCRIPT_CLIENT_ENGINE,
        NODE_CLIENT_ENGINE: NODE_CLIENT_ENGINE,
        REACT_CLIENT_ENGINE: REACT_CLIENT_ENGINE,
        REACT_NATIVE_CLIENT_ENGINE: REACT_NATIVE_CLIENT_ENGINE,
        REACT_NATIVE_JS_CLIENT_ENGINE: REACT_NATIVE_JS_CLIENT_ENGINE,
        CLIENT_VERSION: CLIENT_VERSION,
        DECISION_NOTIFICATION_TYPES: DECISION_NOTIFICATION_TYPES,
        DECISION_SOURCES: DECISION_SOURCES,
        AUDIENCE_EVALUATION_TYPES: AUDIENCE_EVALUATION_TYPES,
        FEATURE_VARIABLE_TYPES: FEATURE_VARIABLE_TYPES,
        DATAFILE_VERSIONS: DATAFILE_VERSIONS,
        DECISION_MESSAGES: DECISION_MESSAGES,
        get NOTIFICATION_TYPES () { return NOTIFICATION_TYPES; },
        REQUEST_TIMEOUT_MS: REQUEST_TIMEOUT_MS,
        REQUEST_TIMEOUT_ODP_SEGMENTS_MS: REQUEST_TIMEOUT_ODP_SEGMENTS_MS,
        REQUEST_TIMEOUT_ODP_EVENTS_MS: REQUEST_TIMEOUT_ODP_EVENTS_MS,
        get ODP_USER_KEY () { return ODP_USER_KEY; },
        FS_USER_ID_ALIAS: FS_USER_ID_ALIAS,
        ODP_DEFAULT_EVENT_TYPE: ODP_DEFAULT_EVENT_TYPE,
        get ODP_EVENT_ACTION () { return ODP_EVENT_ACTION; }
    });

    var DEFAULT_FLUSH_INTERVAL = 30000; // Unit is ms - default flush interval is 30s
    var DEFAULT_BATCH_SIZE = 10;
    var logger$1 = getLogger('EventProcessor');
    function validateAndGetFlushInterval(flushInterval) {
        if (flushInterval <= 0) {
            logger$1.warn("Invalid flushInterval ".concat(flushInterval, ", defaulting to ").concat(DEFAULT_FLUSH_INTERVAL));
            flushInterval = DEFAULT_FLUSH_INTERVAL;
        }
        return flushInterval;
    }
    function validateAndGetBatchSize(batchSize) {
        batchSize = Math.floor(batchSize);
        if (batchSize < 1) {
            logger$1.warn("Invalid batchSize ".concat(batchSize, ", defaulting to ").concat(DEFAULT_BATCH_SIZE));
            batchSize = DEFAULT_BATCH_SIZE;
        }
        batchSize = Math.max(1, batchSize);
        return batchSize;
    }
    function getQueue(batchSize, flushInterval, batchComparator, sink, closingSink) {
        var queue;
        if (batchSize > 1) {
            queue = new DefaultEventQueue({
                flushInterval: flushInterval,
                maxQueueSize: batchSize,
                sink: sink,
                closingSink: closingSink,
                batchComparator: batchComparator,
            });
        }
        else {
            queue = new SingleEventQueue({ sink: sink });
        }
        return queue;
    }
    function sendEventNotification(notificationSender, event) {
        if (notificationSender) {
            notificationSender.sendNotifications(NOTIFICATION_TYPES.LOG_EVENT, event);
        }
    }

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$2 = getLogger('EventProcessor');
    var LocalStorageStore = /** @class */ (function () {
        function LocalStorageStore(_a) {
            var key = _a.key, _b = _a.maxValues, maxValues = _b === void 0 ? 1000 : _b;
            this.LS_KEY = key;
            this.maxValues = maxValues;
        }
        LocalStorageStore.prototype.get = function (key) {
            return this.getMap()[key] || null;
        };
        LocalStorageStore.prototype.set = function (key, value) {
            var map = this.getMap();
            map[key] = value;
            this.replace(map);
        };
        LocalStorageStore.prototype.remove = function (key) {
            var map = this.getMap();
            delete map[key];
            this.replace(map);
        };
        LocalStorageStore.prototype.values = function () {
            return objectValues(this.getMap());
        };
        LocalStorageStore.prototype.clear = function () {
            this.replace({});
        };
        LocalStorageStore.prototype.replace = function (map) {
            try {
                // This is a temporary fix to support React Native which does not have localStorage.
                typeof window !== 'undefined' ? window && window.localStorage && localStorage.setItem(this.LS_KEY, JSON.stringify(map)) : localStorage.setItem(this.LS_KEY, JSON.stringify(map));
                this.clean();
            }
            catch (e) {
                logger$2.error(String(e));
            }
        };
        LocalStorageStore.prototype.clean = function () {
            var map = this.getMap();
            var keys = Object.keys(map);
            var toRemove = keys.length - this.maxValues;
            if (toRemove < 1) {
                return;
            }
            var entries = keys.map(function (key) { return ({
                key: key,
                value: map[key]
            }); });
            entries.sort(function (a, b) { return a.value.timestamp - b.value.timestamp; });
            for (var i = 0; i < toRemove; i++) {
                delete map[entries[i].key];
            }
            this.replace(map);
        };
        LocalStorageStore.prototype.getMap = function () {
            try {
                // This is a temporary fix to support React Native which does not have localStorage.
                var data = typeof window !== 'undefined' ? window && window.localStorage && localStorage.getItem(this.LS_KEY) : localStorage.getItem(this.LS_KEY);
                if (data) {
                    return JSON.parse(data) || {};
                }
            }
            catch (e) {
                logger$2.error(e);
            }
            return {};
        };
        return LocalStorageStore;
    }());

    var logger$3 = getLogger('EventProcessor');
    var PendingEventsDispatcher = /** @class */ (function () {
        function PendingEventsDispatcher(_a) {
            var eventDispatcher = _a.eventDispatcher, store = _a.store;
            this.dispatcher = eventDispatcher;
            this.store = store;
        }
        PendingEventsDispatcher.prototype.dispatchEvent = function (request, callback) {
            this.send({
                uuid: uuid(),
                timestamp: getTimestamp(),
                request: request,
            }, callback);
        };
        PendingEventsDispatcher.prototype.sendPendingEvents = function () {
            var _this = this;
            var pendingEvents = this.store.values();
            logger$3.debug('Sending %s pending events from previous page', pendingEvents.length);
            pendingEvents.forEach(function (item) {
                try {
                    _this.send(item, function () { });
                }
                catch (e) {
                    logger$3.debug(String(e));
                }
            });
        };
        PendingEventsDispatcher.prototype.send = function (entry, callback) {
            var _this = this;
            this.store.set(entry.uuid, entry);
            this.dispatcher.dispatchEvent(entry.request, function (response) {
                _this.store.remove(entry.uuid);
                callback(response);
            });
        };
        return PendingEventsDispatcher;
    }());
    var LocalStoragePendingEventsDispatcher = /** @class */ (function (_super) {
        __extends(LocalStoragePendingEventsDispatcher, _super);
        function LocalStoragePendingEventsDispatcher(_a) {
            var eventDispatcher = _a.eventDispatcher;
            return _super.call(this, {
                eventDispatcher: eventDispatcher,
                store: new LocalStorageStore({
                    // TODO make this configurable
                    maxValues: 100,
                    key: 'fs_optly_pending_events',
                }),
            }) || this;
        }
        return LocalStoragePendingEventsDispatcher;
    }(PendingEventsDispatcher));

    var ACTIVATE_EVENT_KEY = 'campaign_activated';
    var CUSTOM_ATTRIBUTE_FEATURE_TYPE = 'custom';
    var BOT_FILTERING_KEY = '$opt_bot_filtering';
    /**
     * Given an array of batchable Decision or ConversionEvent events it returns
     * a single EventV1 with proper batching
     *
     * @param {ProcessableEvent[]} events
     * @returns {EventV1}
     */
    function makeBatchedEventV1(events) {
        var visitors = [];
        var data = events[0];
        events.forEach(function (event) {
            if (event.type === 'conversion' || event.type === 'impression') {
                var visitor = makeVisitor(event);
                if (event.type === 'impression') {
                    visitor.snapshots.push(makeDecisionSnapshot(event));
                }
                else if (event.type === 'conversion') {
                    visitor.snapshots.push(makeConversionSnapshot(event));
                }
                visitors.push(visitor);
            }
        });
        return {
            client_name: data.context.clientName,
            client_version: data.context.clientVersion,
            account_id: data.context.accountId,
            project_id: data.context.projectId,
            revision: data.context.revision,
            anonymize_ip: data.context.anonymizeIP,
            enrich_decisions: true,
            visitors: visitors,
        };
    }
    function makeConversionSnapshot(conversion) {
        var tags = __assign({}, conversion.tags);
        delete tags['revenue'];
        delete tags['value'];
        var event = {
            entity_id: conversion.event.id,
            key: conversion.event.key,
            timestamp: conversion.timestamp,
            uuid: conversion.uuid,
        };
        if (conversion.tags) {
            event.tags = conversion.tags;
        }
        if (conversion.value != null) {
            event.value = conversion.value;
        }
        if (conversion.revenue != null) {
            event.revenue = conversion.revenue;
        }
        return {
            events: [event],
        };
    }
    function makeDecisionSnapshot(event) {
        var _a, _b;
        var layer = event.layer, experiment = event.experiment, variation = event.variation, ruleKey = event.ruleKey, flagKey = event.flagKey, ruleType = event.ruleType, enabled = event.enabled;
        var layerId = layer ? layer.id : null;
        var experimentId = (_a = experiment === null || experiment === void 0 ? void 0 : experiment.id) !== null && _a !== void 0 ? _a : '';
        var variationId = (_b = variation === null || variation === void 0 ? void 0 : variation.id) !== null && _b !== void 0 ? _b : '';
        var variationKey = variation ? variation.key : '';
        return {
            decisions: [
                {
                    campaign_id: layerId,
                    experiment_id: experimentId,
                    variation_id: variationId,
                    metadata: {
                        flag_key: flagKey,
                        rule_key: ruleKey,
                        rule_type: ruleType,
                        variation_key: variationKey,
                        enabled: enabled,
                    },
                },
            ],
            events: [
                {
                    entity_id: layerId,
                    timestamp: event.timestamp,
                    key: ACTIVATE_EVENT_KEY,
                    uuid: event.uuid,
                },
            ],
        };
    }
    function makeVisitor(data) {
        var visitor = {
            snapshots: [],
            visitor_id: data.user.id,
            attributes: [],
        };
        var type = 'custom';
        data.user.attributes.forEach(function (attr) {
            visitor.attributes.push({
                entity_id: attr.entityId,
                key: attr.key,
                type: type,
                value: attr.value,
            });
        });
        if (typeof data.context.botFiltering === 'boolean') {
            visitor.attributes.push({
                entity_id: BOT_FILTERING_KEY,
                key: BOT_FILTERING_KEY,
                type: CUSTOM_ATTRIBUTE_FEATURE_TYPE,
                value: data.context.botFiltering,
            });
        }
        return visitor;
    }
    function formatEvents(events) {
        return {
            url: 'https://logx.optimizely.com/v1/events',
            httpVerb: 'POST',
            params: makeBatchedEventV1(events),
        };
    }

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * RequestTracker keeps track of in-flight requests for EventProcessor using
     * an internal counter. It exposes methods for adding a new request to be
     * tracked, and getting a Promise representing the completion of currently
     * tracked requests.
     */
    var RequestTracker = /** @class */ (function () {
        function RequestTracker() {
            this.reqsInFlightCount = 0;
            this.reqsCompleteResolvers = [];
        }
        /**
         * Track the argument request (represented by a Promise). reqPromise will feed
         * into the state of Promises returned by onRequestsComplete.
         * @param {Promise<void>} reqPromise
         */
        RequestTracker.prototype.trackRequest = function (reqPromise) {
            var _this = this;
            this.reqsInFlightCount++;
            var onReqComplete = function () {
                _this.reqsInFlightCount--;
                if (_this.reqsInFlightCount === 0) {
                    _this.reqsCompleteResolvers.forEach(function (resolver) { return resolver(); });
                    _this.reqsCompleteResolvers = [];
                }
            };
            reqPromise.then(onReqComplete, onReqComplete);
        };
        /**
         * Return a Promise that fulfills after all currently-tracked request promises
         * are resolved.
         * @return {Promise<void>}
         */
        RequestTracker.prototype.onRequestsComplete = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (_this.reqsInFlightCount === 0) {
                    resolve();
                }
                else {
                    _this.reqsCompleteResolvers.push(resolve);
                }
            });
        };
        return RequestTracker;
    }());

    var logger$4 = getLogger('LogTierV1EventProcessor');
    var LogTierV1EventProcessor = /** @class */ (function () {
        function LogTierV1EventProcessor(_a) {
            var dispatcher = _a.dispatcher, closingDispatcher = _a.closingDispatcher, _b = _a.flushInterval, flushInterval = _b === void 0 ? DEFAULT_FLUSH_INTERVAL : _b, _c = _a.batchSize, batchSize = _c === void 0 ? DEFAULT_BATCH_SIZE : _c, notificationCenter = _a.notificationCenter;
            this.dispatcher = dispatcher;
            this.closingDispatcher = closingDispatcher;
            this.notificationCenter = notificationCenter;
            this.requestTracker = new RequestTracker();
            flushInterval = validateAndGetFlushInterval(flushInterval);
            batchSize = validateAndGetBatchSize(batchSize);
            this.queue = getQueue(batchSize, flushInterval, areEventContextsEqual, this.drainQueue.bind(this, false), this.drainQueue.bind(this, true));
        }
        LogTierV1EventProcessor.prototype.drainQueue = function (useClosingDispatcher, buffer) {
            var _this = this;
            var reqPromise = new Promise(function (resolve) {
                logger$4.debug('draining queue with %s events', buffer.length);
                if (buffer.length === 0) {
                    resolve();
                    return;
                }
                var formattedEvent = formatEvents(buffer);
                var dispatcher = useClosingDispatcher && _this.closingDispatcher
                    ? _this.closingDispatcher : _this.dispatcher;
                dispatcher.dispatchEvent(formattedEvent, function () {
                    resolve();
                });
                sendEventNotification(_this.notificationCenter, formattedEvent);
            });
            this.requestTracker.trackRequest(reqPromise);
            return reqPromise;
        };
        LogTierV1EventProcessor.prototype.process = function (event) {
            this.queue.enqueue(event);
        };
        // TODO[OASIS-6649]: Don't use any type
        // eslint-disable-next-line  @typescript-eslint/no-explicit-any
        LogTierV1EventProcessor.prototype.stop = function () {
            // swallow - an error stopping this queue shouldn't prevent this from stopping
            try {
                this.queue.stop();
                return this.requestTracker.onRequestsComplete();
            }
            catch (e) {
                logger$4.error('Error stopping EventProcessor: "%s"', Object(e).message, String(e));
            }
            return Promise.resolve();
        };
        LogTierV1EventProcessor.prototype.start = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.queue.start()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        return LogTierV1EventProcessor;
    }());

    /**
     * Copyright 2016, 2018-2020, 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MODULE_NAME = 'CONFIG_VALIDATOR';
    var SUPPORTED_VERSIONS = [DATAFILE_VERSIONS.V2, DATAFILE_VERSIONS.V3, DATAFILE_VERSIONS.V4];
    /**
     * Validates the given config options
     * @param  {unknown} config
     * @param  {object}  config.errorHandler
     * @param  {object}  config.eventDispatcher
     * @param  {object}  config.logger
     * @return {boolean} true if the config options are valid
     * @throws If any of the config options are not valid
     */
    var validate = function (config) {
        if (typeof config === 'object' && config !== null) {
            var configObj = config;
            var errorHandler = configObj['errorHandler'];
            var eventDispatcher = configObj['eventDispatcher'];
            var logger = configObj['logger'];
            if (errorHandler && typeof errorHandler['handleError'] !== 'function') {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_ERROR_HANDLER, MODULE_NAME));
            }
            if (eventDispatcher && typeof eventDispatcher['dispatchEvent'] !== 'function') {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_DISPATCHER, MODULE_NAME));
            }
            if (logger && typeof logger['log'] !== 'function') {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_LOGGER, MODULE_NAME));
            }
            return true;
        }
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_CONFIG, MODULE_NAME));
    };
    /**
     * Validates the datafile
     * @param {Object|string}  datafile
     * @return {Object} The datafile object if the datafile is valid
     * @throws If the datafile is not valid for any of the following reasons:
     - The datafile string is undefined
     - The datafile string cannot be parsed as a JSON object
     - The datafile version is not supported
     */
    // eslint-disable-next-line
    var validateDatafile = function (datafile) {
        if (!datafile) {
            throw new Error(sprintf(ERROR_MESSAGES.NO_DATAFILE_SPECIFIED, MODULE_NAME));
        }
        if (typeof datafile === 'string') {
            // Attempt to parse the datafile string
            try {
                datafile = JSON.parse(datafile);
            }
            catch (ex) {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_MALFORMED, MODULE_NAME));
            }
        }
        if (typeof datafile === 'object' && !Array.isArray(datafile) && datafile !== null) {
            if (SUPPORTED_VERSIONS.indexOf(datafile['version']) === -1) {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE_VERSION, MODULE_NAME, datafile['version']));
            }
        }
        return datafile;
    };
    /**
     * Provides utility methods for validating that the configuration options are valid
     */
    var configValidator = {
        validate: validate,
        validateDatafile: validateDatafile,
    };

    /**
     * Copyright 2016, 2020-2021, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Default error handler implementation
     */
    function handleError() {
        // no-op
    }
    var defaultErrorHandler = {
        handleError: handleError,
    };

    /**
     * Copyright 2016-2017, 2020-2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var POST_METHOD = 'POST';
    var GET_METHOD = 'GET';
    var READYSTATE_COMPLETE = 4;
    /**
     * Sample event dispatcher implementation for tracking impression and conversions
     * Users of the SDK can provide their own implementation
     * @param  {Event}    eventObj
     * @param  {Function} callback
     */
    var dispatchEvent = function (eventObj, callback) {
        var params = eventObj.params;
        var url = eventObj.url;
        var req;
        if (eventObj.httpVerb === POST_METHOD) {
            req = new XMLHttpRequest();
            req.open(POST_METHOD, url, true);
            req.setRequestHeader('Content-Type', 'application/json');
            req.onreadystatechange = function () {
                if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {
                    try {
                        callback({ statusCode: req.status });
                    }
                    catch (e) {
                        // TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)
                    }
                }
            };
            req.send(JSON.stringify(params));
        }
        else {
            // add param for cors headers to be sent by the log endpoint
            url += '?wxhr=true';
            if (params) {
                url += '&' + toQueryString(params);
            }
            req = new XMLHttpRequest();
            req.open(GET_METHOD, url, true);
            req.onreadystatechange = function () {
                if (req.readyState === READYSTATE_COMPLETE && callback && typeof callback === 'function') {
                    try {
                        callback({ statusCode: req.status });
                    }
                    catch (e) {
                        // TODO: Log this somehow (consider adding a logger to the EventDispatcher interface)
                    }
                }
            };
            req.send();
        }
    };
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
    var toQueryString = function (obj) {
        return Object.keys(obj)
            .map(function (k) {
            return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);
        })
            .join('&');
    };
    var defaultEventDispatcher = {
        dispatchEvent: dispatchEvent,
    };

    /**
     * Copyright 2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Sample event dispatcher implementation for tracking impression and conversions
     * Users of the SDK can provide their own implementation
     * @param  {Event}    eventObj
     * @param  {Function} callback
     */
    var dispatchEvent$1 = function (eventObj, callback) {
        var params = eventObj.params, url = eventObj.url;
        var blob = new Blob([JSON.stringify(params)], {
            type: "application/json",
        });
        var success = navigator.sendBeacon(url, blob);
        callback({
            statusCode: success ? 200 : 500,
        });
    };
    var eventDispatcher = {
        dispatchEvent: dispatchEvent$1,
    };

    /**
     * Copyright 2016-2017, 2020-2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var NoOpLogger = /** @class */ (function () {
        function NoOpLogger() {
        }
        NoOpLogger.prototype.log = function () { };
        return NoOpLogger;
    }());
    function createLogger(opts) {
        return new ConsoleLogHandler(opts);
    }
    function createNoOpLogger() {
        return new NoOpLogger();
    }

    var loggerPlugin = /*#__PURE__*/Object.freeze({
        __proto__: null,
        NoOpLogger: NoOpLogger,
        createLogger: createLogger,
        createNoOpLogger: createNoOpLogger
    });

    /**
     * Copyright 2019-2020, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Return true if the argument is a valid event batch size, false otherwise
     * @param {unknown}   eventBatchSize
     * @returns {boolean}
     */
    var validateEventBatchSize = function (eventBatchSize) {
        if (typeof eventBatchSize === 'number' && fns.isSafeInteger(eventBatchSize)) {
            return eventBatchSize >= 1;
        }
        return false;
    };
    /**
     * Return true if the argument is a valid event flush interval, false otherwise
     * @param {unknown}   eventFlushInterval
     * @returns {boolean}
     */
    var validateEventFlushInterval = function (eventFlushInterval) {
        if (typeof eventFlushInterval === 'number' && fns.isSafeInteger(eventFlushInterval)) {
            return eventFlushInterval > 0;
        }
        return false;
    };
    var eventProcessorConfigValidator = {
        validateEventBatchSize: validateEventBatchSize,
        validateEventFlushInterval: validateEventFlushInterval,
    };

    var MODULE_NAME$1 = 'NOTIFICATION_CENTER';
    /**
     * NotificationCenter allows registration and triggering of callback functions using
     * notification event types defined in NOTIFICATION_TYPES of utils/enums/index.js:
     * - ACTIVATE: An impression event will be sent to Optimizely.
     * - TRACK a conversion event will be sent to Optimizely
     */
    var NotificationCenter = /** @class */ (function () {
        /**
         * @constructor
         * @param   {NotificationCenterOptions}  options
         * @param   {LogHandler}                 options.logger       An instance of a logger to log messages with
         * @param   {ErrorHandler}               options.errorHandler An instance of errorHandler to handle any unexpected error
         */
        function NotificationCenter(options) {
            var _this = this;
            this.logger = options.logger;
            this.errorHandler = options.errorHandler;
            this.notificationListeners = {};
            objectValues(NOTIFICATION_TYPES).forEach(function (notificationTypeEnum) {
                _this.notificationListeners[notificationTypeEnum] = [];
            });
            this.listenerId = 1;
        }
        /**
         * Add a notification callback to the notification center
         * @param   {string}                   notificationType     One of the values from NOTIFICATION_TYPES in utils/enums/index.js
         * @param   {NotificationListener<T>}  callback             Function that will be called when the event is triggered
         * @returns {number}                   If the callback was successfully added, returns a listener ID which can be used
         * to remove the callback by calling removeNotificationListener. The ID is a number greater than 0.
         * If there was an error and the listener was not added, addNotificationListener returns -1. This
         * can happen if the first argument is not a valid notification type, or if the same callback
         * function was already added as a listener by a prior call to this function.
         */
        NotificationCenter.prototype.addNotificationListener = function (notificationType, callback) {
            try {
                var notificationTypeValues = objectValues(NOTIFICATION_TYPES);
                var isNotificationTypeValid = notificationTypeValues.indexOf(notificationType) > -1;
                if (!isNotificationTypeValid) {
                    return -1;
                }
                if (!this.notificationListeners[notificationType]) {
                    this.notificationListeners[notificationType] = [];
                }
                var callbackAlreadyAdded_1 = false;
                (this.notificationListeners[notificationType] || []).forEach(function (listenerEntry) {
                    if (listenerEntry.callback === callback) {
                        callbackAlreadyAdded_1 = true;
                        return;
                    }
                });
                if (callbackAlreadyAdded_1) {
                    return -1;
                }
                this.notificationListeners[notificationType].push({
                    id: this.listenerId,
                    callback: callback,
                });
                var returnId = this.listenerId;
                this.listenerId += 1;
                return returnId;
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return -1;
            }
        };
        /**
         * Remove a previously added notification callback
         * @param   {number}                 listenerId ID of listener to be removed
         * @returns {boolean}                Returns true if the listener was found and removed, and false
         * otherwise.
         */
        NotificationCenter.prototype.removeNotificationListener = function (listenerId) {
            var _this = this;
            try {
                var indexToRemove_1;
                var typeToRemove_1;
                Object.keys(this.notificationListeners).some(function (notificationType) {
                    var listenersForType = _this.notificationListeners[notificationType];
                    (listenersForType || []).every(function (listenerEntry, i) {
                        if (listenerEntry.id === listenerId) {
                            indexToRemove_1 = i;
                            typeToRemove_1 = notificationType;
                            return false;
                        }
                        return true;
                    });
                    if (indexToRemove_1 !== undefined && typeToRemove_1 !== undefined) {
                        return true;
                    }
                    return false;
                });
                if (indexToRemove_1 !== undefined && typeToRemove_1 !== undefined) {
                    this.notificationListeners[typeToRemove_1].splice(indexToRemove_1, 1);
                    return true;
                }
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
            }
            return false;
        };
        /**
         * Removes all previously added notification listeners, for all notification types
         */
        NotificationCenter.prototype.clearAllNotificationListeners = function () {
            var _this = this;
            try {
                objectValues(NOTIFICATION_TYPES).forEach(function (notificationTypeEnum) {
                    _this.notificationListeners[notificationTypeEnum] = [];
                });
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
            }
        };
        /**
         * Remove all previously added notification listeners for the argument type
         * @param   {NOTIFICATION_TYPES}    notificationType One of NOTIFICATION_TYPES
         */
        NotificationCenter.prototype.clearNotificationListeners = function (notificationType) {
            try {
                this.notificationListeners[notificationType] = [];
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
            }
        };
        /**
         * Fires notifications for the argument type. All registered callbacks for this type will be
         * called. The notificationData object will be passed on to callbacks called.
         * @param {string} notificationType One of NOTIFICATION_TYPES
         * @param {Object} notificationData Will be passed to callbacks called
         */
        NotificationCenter.prototype.sendNotifications = function (notificationType, notificationData) {
            var _this = this;
            try {
                (this.notificationListeners[notificationType] || []).forEach(function (listenerEntry) {
                    var callback = listenerEntry.callback;
                    try {
                        callback(notificationData);
                    }
                    catch (ex) {
                        _this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.NOTIFICATION_LISTENER_EXCEPTION, MODULE_NAME$1, notificationType, ex.message);
                    }
                });
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
            }
        };
        return NotificationCenter;
    }());
    /**
     * Create an instance of NotificationCenter
     * @param   {NotificationCenterOptions}   options
     * @returns {NotificationCenter}          An instance of NotificationCenter
     */
    function createNotificationCenter(options) {
        return new NotificationCenter(options);
    }

    /**
     * Copyright 2020, 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function createEventProcessor() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return new (LogTierV1EventProcessor.bind.apply(LogTierV1EventProcessor, __spreadArray([void 0], args, false)))();
    }
    var eventProcessor = { createEventProcessor: createEventProcessor, LocalStoragePendingEventsDispatcher: LocalStoragePendingEventsDispatcher };

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    (function (OptimizelySegmentOption) {
        OptimizelySegmentOption["IGNORE_CACHE"] = "IGNORE_CACHE";
        OptimizelySegmentOption["RESET_CACHE"] = "RESET_CACHE";
    })(exports.OptimizelySegmentOption || (exports.OptimizelySegmentOption = {}));

    /**
     * Copyright 2020-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var VariableType;
    (function (VariableType) {
        VariableType["BOOLEAN"] = "boolean";
        VariableType["DOUBLE"] = "double";
        VariableType["INTEGER"] = "integer";
        VariableType["STRING"] = "string";
        VariableType["JSON"] = "json";
    })(VariableType || (VariableType = {}));
    (function (OptimizelyDecideOption) {
        OptimizelyDecideOption["DISABLE_DECISION_EVENT"] = "DISABLE_DECISION_EVENT";
        OptimizelyDecideOption["ENABLED_FLAGS_ONLY"] = "ENABLED_FLAGS_ONLY";
        OptimizelyDecideOption["IGNORE_USER_PROFILE_SERVICE"] = "IGNORE_USER_PROFILE_SERVICE";
        OptimizelyDecideOption["INCLUDE_REASONS"] = "INCLUDE_REASONS";
        OptimizelyDecideOption["EXCLUDE_VARIABLES"] = "EXCLUDE_VARIABLES";
    })(exports.OptimizelyDecideOption || (exports.OptimizelyDecideOption = {}));

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_UPDATE_INTERVAL_MINUTES = 5;
    /** Standard interval (5 minutes in milliseconds) for polling datafile updates.; */
    var DEFAULT_UPDATE_INTERVAL = DEFAULT_UPDATE_INTERVAL_MINUTES * 60 * 1000;
    var MIN_UPDATE_INTERVAL_SECONDS = 30;
    /** Minimum allowed interval (30 seconds in milliseconds) for polling datafile updates. */
    var MIN_UPDATE_INTERVAL = MIN_UPDATE_INTERVAL_SECONDS * 1000;
    var UPDATE_INTERVAL_BELOW_MINIMUM_MESSAGE = "Polling intervals below ".concat(MIN_UPDATE_INTERVAL_SECONDS, " seconds are not recommended.");
    var DEFAULT_URL_TEMPLATE = "https://cdn.optimizely.com/datafiles/%s.json";
    var BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT = [0, 8, 16, 32, 64, 128, 256, 512];
    var REQUEST_TIMEOUT_MS$1 = 60 * 1000; // 1 minute

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$5 = getLogger('DatafileManager');
    var GET_METHOD$1 = 'GET';
    var READY_STATE_DONE = 4;
    function parseHeadersFromXhr(req) {
        var allHeadersString = req.getAllResponseHeaders();
        if (allHeadersString === null) {
            return {};
        }
        var headerLines = allHeadersString.split('\r\n');
        var headers = {};
        headerLines.forEach(function (headerLine) {
            var separatorIndex = headerLine.indexOf(': ');
            if (separatorIndex > -1) {
                var headerName = headerLine.slice(0, separatorIndex);
                var headerValue = headerLine.slice(separatorIndex + 2);
                if (headerValue.length > 0) {
                    headers[headerName] = headerValue;
                }
            }
        });
        return headers;
    }
    function setHeadersInXhr(headers, req) {
        Object.keys(headers).forEach(function (headerName) {
            var header = headers[headerName];
            req.setRequestHeader(headerName, header);
        });
    }
    function makeGetRequest(reqUrl, headers) {
        var req = new XMLHttpRequest();
        var responsePromise = new Promise(function (resolve, reject) {
            req.open(GET_METHOD$1, reqUrl, true);
            setHeadersInXhr(headers, req);
            req.onreadystatechange = function () {
                if (req.readyState === READY_STATE_DONE) {
                    var statusCode = req.status;
                    if (statusCode === 0) {
                        reject(new Error('Request error'));
                        return;
                    }
                    var headers_1 = parseHeadersFromXhr(req);
                    var resp = {
                        statusCode: req.status,
                        body: req.responseText,
                        headers: headers_1,
                    };
                    resolve(resp);
                }
            };
            req.timeout = REQUEST_TIMEOUT_MS$1;
            req.ontimeout = function () {
                logger$5.error('Request timed out');
            };
            req.send();
        });
        return {
            responsePromise: responsePromise,
            abort: function () {
                req.abort();
            },
        };
    }

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var EventEmitter = /** @class */ (function () {
        function EventEmitter() {
            this.listeners = {};
            this.listenerId = 1;
        }
        EventEmitter.prototype.on = function (eventName, listener) {
            var _this = this;
            if (!this.listeners[eventName]) {
                this.listeners[eventName] = {};
            }
            var currentListenerId = String(this.listenerId);
            this.listenerId++;
            this.listeners[eventName][currentListenerId] = listener;
            return function () {
                if (_this.listeners[eventName]) {
                    delete _this.listeners[eventName][currentListenerId];
                }
            };
        };
        EventEmitter.prototype.emit = function (eventName, arg) {
            var listeners = this.listeners[eventName];
            if (listeners) {
                Object.keys(listeners).forEach(function (listenerId) {
                    var listener = listeners[listenerId];
                    listener(arg);
                });
            }
        };
        EventEmitter.prototype.removeAllListeners = function () {
            this.listeners = {};
        };
        return EventEmitter;
    }());
    // TODO: Create a typed event emitter for use in TS only (not JS)

    /**
     * Copyright 2019-2020, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function randomMilliseconds() {
        return Math.round(Math.random() * 1000);
    }
    var BackoffController = /** @class */ (function () {
        function BackoffController() {
            this.errorCount = 0;
        }
        BackoffController.prototype.getDelay = function () {
            if (this.errorCount === 0) {
                return 0;
            }
            var baseWaitSeconds = BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT[Math.min(BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT.length - 1, this.errorCount)];
            return baseWaitSeconds * 1000 + randomMilliseconds();
        };
        BackoffController.prototype.countError = function () {
            if (this.errorCount < BACKOFF_BASE_WAIT_SECONDS_BY_ERROR_COUNT.length - 1) {
                this.errorCount++;
            }
        };
        BackoffController.prototype.reset = function () {
            this.errorCount = 0;
        };
        return BackoffController;
    }());

    /**
     * Copyright 2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Internal notification center registry for managing multiple notification centers.
     */
    var NotificationRegistry = /** @class */ (function () {
        function NotificationRegistry() {
        }
        /**
         * Retrieves an SDK Key's corresponding notification center in the registry if it exists, otherwise it creates one
         * @param sdkKey SDK Key to be used for the notification center tied to the ODP Manager
         * @param logger Logger to be used for the corresponding notification center
         * @returns {NotificationCenter | undefined} a notification center instance for ODP Manager if a valid SDK Key is provided, otherwise undefined
         */
        NotificationRegistry.getNotificationCenter = function (sdkKey, logger) {
            if (logger === void 0) { logger = getLogger(); }
            if (!sdkKey) {
                logger.log(exports.LogLevel.ERROR, 'No SDK key provided to getNotificationCenter.');
                return undefined;
            }
            var notificationCenter;
            if (this._notificationCenters.has(sdkKey)) {
                notificationCenter = this._notificationCenters.get(sdkKey);
            }
            else {
                notificationCenter = createNotificationCenter({
                    logger: logger,
                    errorHandler: { handleError: function () { } },
                });
                this._notificationCenters.set(sdkKey, notificationCenter);
            }
            return notificationCenter;
        };
        NotificationRegistry.removeNotificationCenter = function (sdkKey) {
            if (!sdkKey) {
                return;
            }
            var notificationCenter = this._notificationCenters.get(sdkKey);
            if (notificationCenter) {
                notificationCenter.clearAllNotificationListeners();
                this._notificationCenters.delete(sdkKey);
            }
        };
        NotificationRegistry._notificationCenters = new Map();
        return NotificationRegistry;
    }());

    /**
     * Copyright 2022-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$6 = getLogger('DatafileManager');
    var UPDATE_EVT = 'update';
    function isSuccessStatusCode(statusCode) {
        return statusCode >= 200 && statusCode < 400;
    }
    var noOpKeyValueCache = {
        get: function () {
            return Promise.resolve(undefined);
        },
        set: function () {
            return Promise.resolve();
        },
        contains: function () {
            return Promise.resolve(false);
        },
        remove: function () {
            return Promise.resolve(false);
        },
    };
    var HttpPollingDatafileManager = /** @class */ (function () {
        function HttpPollingDatafileManager(config) {
            var _this = this;
            var configWithDefaultsApplied = __assign(__assign({}, this.getConfigDefaults()), config);
            var datafile = configWithDefaultsApplied.datafile, _a = configWithDefaultsApplied.autoUpdate, autoUpdate = _a === void 0 ? false : _a, sdkKey = configWithDefaultsApplied.sdkKey, _b = configWithDefaultsApplied.updateInterval, updateInterval = _b === void 0 ? DEFAULT_UPDATE_INTERVAL : _b, _c = configWithDefaultsApplied.urlTemplate, urlTemplate = _c === void 0 ? DEFAULT_URL_TEMPLATE : _c, _d = configWithDefaultsApplied.cache, cache = _d === void 0 ? noOpKeyValueCache : _d;
            this.cache = cache;
            this.cacheKey = 'opt-datafile-' + sdkKey;
            this.sdkKey = sdkKey;
            this.isReadyPromiseSettled = false;
            this.readyPromiseResolver = function () { };
            this.readyPromiseRejecter = function () { };
            this.readyPromise = new Promise(function (resolve, reject) {
                _this.readyPromiseResolver = resolve;
                _this.readyPromiseRejecter = reject;
            });
            if (datafile) {
                this.currentDatafile = datafile;
                if (!sdkKey) {
                    this.resolveReadyPromise();
                }
            }
            else {
                this.currentDatafile = '';
            }
            this.isStarted = false;
            this.datafileUrl = sprintf(urlTemplate, sdkKey);
            this.emitter = new EventEmitter();
            this.autoUpdate = autoUpdate;
            this.updateInterval = updateInterval;
            if (this.updateInterval < MIN_UPDATE_INTERVAL) {
                logger$6.warn(UPDATE_INTERVAL_BELOW_MINIMUM_MESSAGE);
            }
            this.currentTimeout = null;
            this.currentRequest = null;
            this.backoffController = new BackoffController();
            this.syncOnCurrentRequestComplete = false;
        }
        HttpPollingDatafileManager.prototype.get = function () {
            return this.currentDatafile;
        };
        HttpPollingDatafileManager.prototype.start = function () {
            if (!this.isStarted) {
                logger$6.debug('Datafile manager started');
                this.isStarted = true;
                this.backoffController.reset();
                this.setDatafileFromCacheIfAvailable();
                this.syncDatafile();
            }
        };
        HttpPollingDatafileManager.prototype.stop = function () {
            logger$6.debug('Datafile manager stopped');
            this.isStarted = false;
            if (this.currentTimeout) {
                clearTimeout(this.currentTimeout);
                this.currentTimeout = null;
            }
            this.emitter.removeAllListeners();
            if (this.currentRequest) {
                this.currentRequest.abort();
                this.currentRequest = null;
            }
            return Promise.resolve();
        };
        HttpPollingDatafileManager.prototype.onReady = function () {
            return this.readyPromise;
        };
        HttpPollingDatafileManager.prototype.on = function (eventName, listener) {
            return this.emitter.on(eventName, listener);
        };
        HttpPollingDatafileManager.prototype.onRequestRejected = function (err) {
            if (!this.isStarted) {
                return;
            }
            this.backoffController.countError();
            if (err instanceof Error) {
                logger$6.error('Error fetching datafile: %s', err.message, err);
            }
            else if (typeof err === 'string') {
                logger$6.error('Error fetching datafile: %s', err);
            }
            else {
                logger$6.error('Error fetching datafile');
            }
        };
        HttpPollingDatafileManager.prototype.onRequestResolved = function (response) {
            var _a;
            if (!this.isStarted) {
                return;
            }
            if (typeof response.statusCode !== 'undefined' && isSuccessStatusCode(response.statusCode)) {
                this.backoffController.reset();
            }
            else {
                this.backoffController.countError();
            }
            this.trySavingLastModified(response.headers);
            var datafile = this.getNextDatafileFromResponse(response);
            if (datafile !== '') {
                logger$6.info('Updating datafile from response');
                this.currentDatafile = datafile;
                this.cache.set(this.cacheKey, datafile);
                if (!this.isReadyPromiseSettled) {
                    this.resolveReadyPromise();
                }
                else {
                    var datafileUpdate = {
                        datafile: datafile,
                    };
                    (_a = NotificationRegistry.getNotificationCenter(this.sdkKey, logger$6)) === null || _a === void 0 ? void 0 : _a.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);
                    this.emitter.emit(UPDATE_EVT, datafileUpdate);
                }
            }
        };
        HttpPollingDatafileManager.prototype.onRequestComplete = function () {
            if (!this.isStarted) {
                return;
            }
            this.currentRequest = null;
            if (!this.isReadyPromiseSettled && !this.autoUpdate) {
                // We will never resolve ready, so reject it
                this.rejectReadyPromise(new Error('Failed to become ready'));
            }
            if (this.autoUpdate && this.syncOnCurrentRequestComplete) {
                this.syncDatafile();
            }
            this.syncOnCurrentRequestComplete = false;
        };
        HttpPollingDatafileManager.prototype.syncDatafile = function () {
            var _this = this;
            var headers = {};
            if (this.lastResponseLastModified) {
                headers['if-modified-since'] = this.lastResponseLastModified;
            }
            logger$6.debug('Making datafile request to url %s with headers: %s', this.datafileUrl, function () { return JSON.stringify(headers); });
            this.currentRequest = this.makeGetRequest(this.datafileUrl, headers);
            var onRequestComplete = function () {
                _this.onRequestComplete();
            };
            var onRequestResolved = function (response) {
                _this.onRequestResolved(response);
            };
            var onRequestRejected = function (err) {
                _this.onRequestRejected(err);
            };
            this.currentRequest.responsePromise
                .then(onRequestResolved, onRequestRejected)
                .then(onRequestComplete, onRequestComplete);
            if (this.autoUpdate) {
                this.scheduleNextUpdate();
            }
        };
        HttpPollingDatafileManager.prototype.resolveReadyPromise = function () {
            this.readyPromiseResolver();
            this.isReadyPromiseSettled = true;
        };
        HttpPollingDatafileManager.prototype.rejectReadyPromise = function (err) {
            this.readyPromiseRejecter(err);
            this.isReadyPromiseSettled = true;
        };
        HttpPollingDatafileManager.prototype.scheduleNextUpdate = function () {
            var _this = this;
            var currentBackoffDelay = this.backoffController.getDelay();
            var nextUpdateDelay = Math.max(currentBackoffDelay, this.updateInterval);
            logger$6.debug('Scheduling sync in %s ms', nextUpdateDelay);
            this.currentTimeout = setTimeout(function () {
                if (_this.currentRequest) {
                    _this.syncOnCurrentRequestComplete = true;
                }
                else {
                    _this.syncDatafile();
                }
            }, nextUpdateDelay);
        };
        HttpPollingDatafileManager.prototype.getNextDatafileFromResponse = function (response) {
            logger$6.debug('Response status code: %s', response.statusCode);
            if (typeof response.statusCode === 'undefined') {
                return '';
            }
            if (response.statusCode === 304) {
                return '';
            }
            if (isSuccessStatusCode(response.statusCode)) {
                return response.body;
            }
            logger$6.error("Datafile fetch request failed with status: ".concat(response.statusCode));
            return '';
        };
        HttpPollingDatafileManager.prototype.trySavingLastModified = function (headers) {
            var lastModifiedHeader = headers['last-modified'] || headers['Last-Modified'];
            if (typeof lastModifiedHeader !== 'undefined') {
                this.lastResponseLastModified = lastModifiedHeader;
                logger$6.debug('Saved last modified header value from response: %s', this.lastResponseLastModified);
            }
        };
        HttpPollingDatafileManager.prototype.setDatafileFromCacheIfAvailable = function () {
            var _this = this;
            this.cache.get(this.cacheKey).then(function (datafile) {
                if (_this.isStarted && !_this.isReadyPromiseSettled && datafile) {
                    logger$6.debug('Using datafile from cache');
                    _this.currentDatafile = datafile;
                    _this.resolveReadyPromise();
                }
            });
        };
        return HttpPollingDatafileManager;
    }());

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BrowserDatafileManager = /** @class */ (function (_super) {
        __extends(BrowserDatafileManager, _super);
        function BrowserDatafileManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BrowserDatafileManager.prototype.makeGetRequest = function (reqUrl, headers) {
            return makeGetRequest(reqUrl, headers);
        };
        BrowserDatafileManager.prototype.getConfigDefaults = function () {
            return {
                autoUpdate: false,
            };
        };
        return BrowserDatafileManager;
    }(HttpPollingDatafileManager));

    /**
     * Copyright 2022-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var OdpConfig = /** @class */ (function () {
        function OdpConfig(apiKey, apiHost, pixelUrl, segmentsToCheck) {
            this.apiKey = apiKey;
            this.apiHost = apiHost;
            this.pixelUrl = pixelUrl;
            this.segmentsToCheck = segmentsToCheck;
        }
        /**
         * Detects if there are any changes between the current and incoming ODP Configs
         * @param configToCompare ODP Configuration to check self against for equality
         * @returns Boolean based on if the current ODP Config is equivalent to the incoming ODP Config
         */
        OdpConfig.prototype.equals = function (configToCompare) {
            return (this.apiHost === configToCompare.apiHost &&
                this.apiKey === configToCompare.apiKey &&
                this.pixelUrl === configToCompare.pixelUrl &&
                checkArrayEquality(this.segmentsToCheck, configToCompare.segmentsToCheck));
        };
        return OdpConfig;
    }());
    var odpIntegrationsAreEqual = function (config1, config2) {
        if (config1.integrated !== config2.integrated) {
            return false;
        }
        if (config1.integrated && config2.integrated) {
            return config1.odpConfig.equals(config2.odpConfig);
        }
        return true;
    };

    /**
     * Copyright 2016-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var EXPERIMENT_RUNNING_STATUS = 'Running';
    var RESERVED_ATTRIBUTE_PREFIX = '$opt_';
    var MODULE_NAME$2 = 'PROJECT_CONFIG';
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
    function createMutationSafeDatafileCopy(datafile) {
        var _a, _b;
        var datafileCopy = assign({}, datafile);
        datafileCopy.audiences = (datafile.audiences || []).map(function (audience) {
            return assign({}, audience);
        });
        datafileCopy.experiments = (datafile.experiments || []).map(function (experiment) {
            return assign({}, experiment);
        });
        datafileCopy.featureFlags = (datafile.featureFlags || []).map(function (featureFlag) {
            return assign({}, featureFlag);
        });
        datafileCopy.groups = (datafile.groups || []).map(function (group) {
            var groupCopy = assign({}, group);
            groupCopy.experiments = (group.experiments || []).map(function (experiment) {
                return assign({}, experiment);
            });
            return groupCopy;
        });
        datafileCopy.rollouts = (datafile.rollouts || []).map(function (rollout) {
            var rolloutCopy = assign({}, rollout);
            rolloutCopy.experiments = (rollout.experiments || []).map(function (experiment) {
                return assign({}, experiment);
            });
            return rolloutCopy;
        });
        datafileCopy.environmentKey = (_a = datafile.environmentKey) !== null && _a !== void 0 ? _a : '';
        datafileCopy.sdkKey = (_b = datafile.sdkKey) !== null && _b !== void 0 ? _b : '';
        return datafileCopy;
    }
    /**
     * Creates projectConfig object to be used for quick project property lookup
     * @param  {Object}        datafileObj   JSON datafile representing the project
     * @param  {string|null}   datafileStr   JSON string representation of the datafile
     * @return {ProjectConfig} Object representing project configuration
     */
    var createProjectConfig = function (datafileObj, datafileStr) {
        if (datafileStr === void 0) { datafileStr = null; }
        var projectConfig = createMutationSafeDatafileCopy(datafileObj);
        projectConfig.__datafileStr = datafileStr === null ? JSON.stringify(datafileObj) : datafileStr;
        /*
         * Conditions of audiences in projectConfig.typedAudiences are not
         * expected to be string-encoded as they are here in projectConfig.audiences.
         */
        (projectConfig.audiences || []).forEach(function (audience) {
            audience.conditions = JSON.parse(audience.conditions);
        });
        projectConfig.audiencesById = keyBy(projectConfig.audiences, 'id');
        assign(projectConfig.audiencesById, keyBy(projectConfig.typedAudiences, 'id'));
        projectConfig.attributeKeyMap = keyBy(projectConfig.attributes, 'key');
        projectConfig.eventKeyMap = keyBy(projectConfig.events, 'key');
        projectConfig.groupIdMap = keyBy(projectConfig.groups, 'id');
        var experiments;
        Object.keys(projectConfig.groupIdMap || {}).forEach(function (Id) {
            experiments = projectConfig.groupIdMap[Id].experiments;
            (experiments || []).forEach(function (experiment) {
                projectConfig.experiments.push(assign(experiment, { groupId: Id }));
            });
        });
        projectConfig.rolloutIdMap = keyBy(projectConfig.rollouts || [], 'id');
        objectValues(projectConfig.rolloutIdMap || {}).forEach(function (rollout) {
            (rollout.experiments || []).forEach(function (experiment) {
                projectConfig.experiments.push(experiment);
                // Creates { <variationKey>: <variation> } map inside of the experiment
                experiment.variationKeyMap = keyBy(experiment.variations, 'key');
            });
        });
        var allSegmentsSet = new Set();
        Object.keys(projectConfig.audiencesById)
            .map(function (audience) { return getAudienceSegments(projectConfig.audiencesById[audience]); })
            .forEach(function (audienceSegments) {
            audienceSegments.forEach(function (segment) {
                allSegmentsSet.add(segment);
            });
        });
        var allSegments = Array.from(allSegmentsSet);
        var odpIntegrated = false;
        var odpApiHost = '';
        var odpApiKey = '';
        var odpPixelUrl = '';
        if (projectConfig.integrations) {
            projectConfig.integrationKeyMap = keyBy(projectConfig.integrations, 'key');
            projectConfig.integrations.forEach(function (integration) {
                if (!('key' in integration)) {
                    throw new Error(sprintf(ERROR_MESSAGES.MISSING_INTEGRATION_KEY, MODULE_NAME$2));
                }
                if (integration.key === 'odp') {
                    odpIntegrated = true;
                    odpApiKey = odpApiKey || integration.publicKey || '';
                    odpApiHost = odpApiHost || integration.host || '';
                    odpPixelUrl = odpPixelUrl || integration.pixelUrl || '';
                }
            });
        }
        if (odpIntegrated) {
            projectConfig.odpIntegrationConfig = {
                integrated: true,
                odpConfig: new OdpConfig(odpApiKey, odpApiHost, odpPixelUrl, allSegments),
            };
        }
        else {
            projectConfig.odpIntegrationConfig = { integrated: false };
        }
        projectConfig.experimentKeyMap = keyBy(projectConfig.experiments, 'key');
        projectConfig.experimentIdMap = keyBy(projectConfig.experiments, 'id');
        projectConfig.variationIdMap = {};
        projectConfig.variationVariableUsageMap = {};
        (projectConfig.experiments || []).forEach(function (experiment) {
            // Creates { <variationKey>: <variation> } map inside of the experiment
            experiment.variationKeyMap = keyBy(experiment.variations, 'key');
            // Creates { <variationId>: { key: <variationKey>, id: <variationId> } } mapping for quick lookup
            assign(projectConfig.variationIdMap, keyBy(experiment.variations, 'id'));
            objectValues(experiment.variationKeyMap || {}).forEach(function (variation) {
                if (variation.variables) {
                    projectConfig.variationVariableUsageMap[variation.id] = keyBy(variation.variables, 'id');
                }
            });
        });
        // Object containing experiment Ids that exist in any feature
        // for checking that experiment is a feature experiment or not.
        projectConfig.experimentFeatureMap = {};
        projectConfig.featureKeyMap = keyBy(projectConfig.featureFlags || [], 'key');
        objectValues(projectConfig.featureKeyMap || {}).forEach(function (feature) {
            // Json type is represented in datafile as a subtype of string for the sake of backwards compatibility.
            // Converting it to a first-class json type while creating Project Config
            feature.variables.forEach(function (variable) {
                if (variable.type === FEATURE_VARIABLE_TYPES.STRING && variable.subType === FEATURE_VARIABLE_TYPES.JSON) {
                    variable.type = FEATURE_VARIABLE_TYPES.JSON;
                    delete variable.subType;
                }
            });
            feature.variableKeyMap = keyBy(feature.variables, 'key');
            (feature.experimentIds || []).forEach(function (experimentId) {
                // Add this experiment in experiment-feature map.
                if (projectConfig.experimentFeatureMap[experimentId]) {
                    projectConfig.experimentFeatureMap[experimentId].push(feature.id);
                }
                else {
                    projectConfig.experimentFeatureMap[experimentId] = [feature.id];
                }
            });
        });
        // all rules (experiment rules and delivery rules) for each flag
        projectConfig.flagRulesMap = {};
        (projectConfig.featureFlags || []).forEach(function (featureFlag) {
            var flagRuleExperiments = [];
            featureFlag.experimentIds.forEach(function (experimentId) {
                var experiment = projectConfig.experimentIdMap[experimentId];
                if (experiment) {
                    flagRuleExperiments.push(experiment);
                }
            });
            var rollout = projectConfig.rolloutIdMap[featureFlag.rolloutId];
            if (rollout) {
                flagRuleExperiments.push.apply(flagRuleExperiments, rollout.experiments);
            }
            projectConfig.flagRulesMap[featureFlag.key] = flagRuleExperiments;
        });
        // all variations for each flag
        // - datafile does not contain a separate entity for this.
        // - we collect variations used in each rule (experiment rules and delivery rules)
        projectConfig.flagVariationsMap = {};
        objectEntries(projectConfig.flagRulesMap || {}).forEach(function (_a) {
            var flagKey = _a[0], rules = _a[1];
            var variations = [];
            rules.forEach(function (rule) {
                rule.variations.forEach(function (variation) {
                    if (!find(variations, function (item) { return item.id === variation.id; })) {
                        variations.push(variation);
                    }
                });
            });
            projectConfig.flagVariationsMap[flagKey] = variations;
        });
        return projectConfig;
    };
    /**
     * Extract all audience segments used in this audience's conditions
     * @param  {Audience}     audience  Object representing the audience being parsed
     * @return {string[]}               List of all audience segments
     */
    var getAudienceSegments = function (audience) {
        if (!audience.conditions)
            return [];
        return getSegmentsFromConditions(audience.conditions);
    };
    // eslint-disable-next-line  @typescript-eslint/no-explicit-any
    var getSegmentsFromConditions = function (condition) {
        var segments = [];
        if (isLogicalOperator(condition)) {
            return [];
        }
        else if (Array.isArray(condition)) {
            condition.forEach(function (nextCondition) { return segments.push.apply(segments, getSegmentsFromConditions(nextCondition)); });
        }
        else if (condition['match'] === 'qualified') {
            segments.push(condition['value']);
        }
        return segments;
    };
    function isLogicalOperator(condition) {
        return ['and', 'or', 'not'].includes(condition);
    }
    /**
     * Get layer ID for the provided experiment key
     * @param  {ProjectConfig}    projectConfig   Object representing project configuration
     * @param  {string}           experimentId    Experiment ID for which layer ID is to be determined
     * @return {string}                           Layer ID corresponding to the provided experiment key
     * @throws If experiment key is not in datafile
     */
    var getLayerId = function (projectConfig, experimentId) {
        var experiment = projectConfig.experimentIdMap[experimentId];
        if (!experiment) {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME$2, experimentId));
        }
        return experiment.layerId;
    };
    /**
     * Get attribute ID for the provided attribute key
     * @param  {ProjectConfig}   projectConfig    Object representing project configuration
     * @param  {string}          attributeKey     Attribute key for which ID is to be determined
     * @param  {LogHandler}      logger
     * @return {string|null}     Attribute ID corresponding to the provided attribute key. Attribute key if it is a reserved attribute.
     */
    var getAttributeId = function (projectConfig, attributeKey, logger) {
        var attribute = projectConfig.attributeKeyMap[attributeKey];
        var hasReservedPrefix = attributeKey.indexOf(RESERVED_ATTRIBUTE_PREFIX) === 0;
        if (attribute) {
            if (hasReservedPrefix) {
                logger.log(LOG_LEVEL.WARNING, 'Attribute %s unexpectedly has reserved prefix %s; using attribute ID instead of reserved attribute name.', attributeKey, RESERVED_ATTRIBUTE_PREFIX);
            }
            return attribute.id;
        }
        else if (hasReservedPrefix) {
            return attributeKey;
        }
        logger.log(LOG_LEVEL.DEBUG, ERROR_MESSAGES.UNRECOGNIZED_ATTRIBUTE, MODULE_NAME$2, attributeKey);
        return null;
    };
    /**
     * Get event ID for the provided
     * @param  {ProjectConfig}   projectConfig  Object representing project configuration
     * @param  {string}          eventKey       Event key for which ID is to be determined
     * @return {string|null}     Event ID corresponding to the provided event key
     */
    var getEventId = function (projectConfig, eventKey) {
        var event = projectConfig.eventKeyMap[eventKey];
        if (event) {
            return event.id;
        }
        return null;
    };
    /**
     * Get experiment status for the provided experiment key
     * @param  {ProjectConfig}  projectConfig   Object representing project configuration
     * @param  {string}         experimentKey   Experiment key for which status is to be determined
     * @return {string}         Experiment status corresponding to the provided experiment key
     * @throws If experiment key is not in datafile
     */
    var getExperimentStatus = function (projectConfig, experimentKey) {
        var experiment = projectConfig.experimentKeyMap[experimentKey];
        if (!experiment) {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME$2, experimentKey));
        }
        return experiment.status;
    };
    /**
     * Returns whether experiment has a status of 'Running'
     * @param  {ProjectConfig}  projectConfig   Object representing project configuration
     * @param  {string}         experimentKey   Experiment key for which status is to be compared with 'Running'
     * @return {boolean}                        True if experiment status is set to 'Running', false otherwise
     */
    var isActive = function (projectConfig, experimentKey) {
        return getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;
    };
    /**
     * Determine for given experiment if event is running, which determines whether should be dispatched or not
     * @param  {ProjectConfig}  configObj       Object representing project configuration
     * @param  {string}         experimentKey   Experiment key for which the status is to be determined
     * @return {boolean}                        True if the experiment is running
     *                                          False if the experiment is not running
     *
     */
    var isRunning = function (projectConfig, experimentKey) {
        return getExperimentStatus(projectConfig, experimentKey) === EXPERIMENT_RUNNING_STATUS;
    };
    /**
     * Get audience conditions for the experiment
     * @param  {ProjectConfig}  projectConfig   Object representing project configuration
     * @param  {string}         experimentId    Experiment id for which audience conditions are to be determined
     * @return {Array<string|string[]>}         Audience conditions for the experiment - can be an array of audience IDs, or a
     *                                          nested array of conditions
     *                                          Examples: ["5", "6"], ["and", ["or", "1", "2"], "3"]
     * @throws If experiment key is not in datafile
     */
    var getExperimentAudienceConditions = function (projectConfig, experimentId) {
        var experiment = projectConfig.experimentIdMap[experimentId];
        if (!experiment) {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME$2, experimentId));
        }
        return experiment.audienceConditions || experiment.audienceIds;
    };
    /**
     * Get variation key given experiment key and variation ID
     * @param  {ProjectConfig}  projectConfig   Object representing project configuration
     * @param  {string}         variationId     ID of the variation
     * @return {string|null}    Variation key or null if the variation ID is not found
     */
    var getVariationKeyFromId = function (projectConfig, variationId) {
        if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {
            return projectConfig.variationIdMap[variationId].key;
        }
        return null;
    };
    /**
     * Get variation given variation ID
     * @param  {ProjectConfig}  projectConfig   Object representing project configuration
     * @param  {string}         variationId     ID of the variation
     * @return {Variation|null}    Variation or null if the variation ID is not found
     */
    var getVariationFromId = function (projectConfig, variationId) {
        if (projectConfig.variationIdMap.hasOwnProperty(variationId)) {
            return projectConfig.variationIdMap[variationId];
        }
        return null;
    };
    /**
     * Get the variation ID given the experiment key and variation key
     * @param  {ProjectConfig}  projectConfig   Object representing project configuration
     * @param  {string}         experimentKey   Key of the experiment the variation belongs to
     * @param  {string}         variationKey    The variation key
     * @return {string|null}    Variation ID or null
     */
    var getVariationIdFromExperimentAndVariationKey = function (projectConfig, experimentKey, variationKey) {
        var experiment = projectConfig.experimentKeyMap[experimentKey];
        if (experiment.variationKeyMap.hasOwnProperty(variationKey)) {
            return experiment.variationKeyMap[variationKey].id;
        }
        return null;
    };
    /**
     * Get experiment from provided experiment key
     * @param  {ProjectConfig}  projectConfig  Object representing project configuration
     * @param  {string}         experimentKey  Event key for which experiment IDs are to be retrieved
     * @return {Experiment}     Experiment
     * @throws If experiment key is not in datafile
     */
    var getExperimentFromKey = function (projectConfig, experimentKey) {
        if (projectConfig.experimentKeyMap.hasOwnProperty(experimentKey)) {
            var experiment = projectConfig.experimentKeyMap[experimentKey];
            if (experiment) {
                return experiment;
            }
        }
        throw new Error(sprintf(ERROR_MESSAGES.EXPERIMENT_KEY_NOT_IN_DATAFILE, MODULE_NAME$2, experimentKey));
    };
    /**
     * Given an experiment id, returns the traffic allocation within that experiment
     * @param  {ProjectConfig}  projectConfig  Object representing project configuration
     * @param  {string}         experimentId   Id representing the experiment
     * @return {TrafficAllocation[]}           Traffic allocation for the experiment
     * @throws If experiment key is not in datafile
     */
    var getTrafficAllocation = function (projectConfig, experimentId) {
        var experiment = projectConfig.experimentIdMap[experimentId];
        if (!experiment) {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME$2, experimentId));
        }
        return experiment.trafficAllocation;
    };
    /**
     * Get experiment from provided experiment id. Log an error if no experiment
     * exists in the project config with the given ID.
     * @param  {ProjectConfig}  projectConfig  Object representing project configuration
     * @param  {string}         experimentId   ID of desired experiment object
     * @param  {LogHandler}     logger
     * @return {Experiment|null}               Experiment object or null
     */
    var getExperimentFromId = function (projectConfig, experimentId, logger) {
        if (projectConfig.experimentIdMap.hasOwnProperty(experimentId)) {
            var experiment = projectConfig.experimentIdMap[experimentId];
            if (experiment) {
                return experiment;
            }
        }
        logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.INVALID_EXPERIMENT_ID, MODULE_NAME$2, experimentId);
        return null;
    };
    /**
     * Returns flag variation for specified flagKey and variationKey
     * @param  {flagKey}        string
     * @param  {variationKey}   string
     * @return {Variation|null}
     */
    var getFlagVariationByKey = function (projectConfig, flagKey, variationKey) {
        if (!projectConfig) {
            return null;
        }
        var variations = projectConfig.flagVariationsMap[flagKey];
        var result = find(variations, function (item) { return item.key === variationKey; });
        if (result) {
            return result;
        }
        return null;
    };
    /**
     * Get feature from provided feature key. Log an error if no feature exists in
     * the project config with the given key.
     * @param  {ProjectConfig}    projectConfig
     * @param  {string}           featureKey
     * @param  {LogHandler}       logger
     * @return {FeatureFlag|null} Feature object, or null if no feature with the given
     *                            key exists
     */
    var getFeatureFromKey = function (projectConfig, featureKey, logger) {
        if (projectConfig.featureKeyMap.hasOwnProperty(featureKey)) {
            var feature = projectConfig.featureKeyMap[featureKey];
            if (feature) {
                return feature;
            }
        }
        logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME$2, featureKey);
        return null;
    };
    /**
     * Get the variable with the given key associated with the feature with the
     * given key. If the feature key or the variable key are invalid, log an error
     * message.
     * @param  {ProjectConfig}        projectConfig
     * @param  {string}               featureKey
     * @param  {string}               variableKey
     * @param  {LogHandler}           logger
     * @return {FeatureVariable|null} Variable object, or null one or both of the given
     * feature and variable keys are invalid
     */
    var getVariableForFeature = function (projectConfig, featureKey, variableKey, logger) {
        var feature = projectConfig.featureKeyMap[featureKey];
        if (!feature) {
            logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME$2, featureKey);
            return null;
        }
        var variable = feature.variableKeyMap[variableKey];
        if (!variable) {
            logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.VARIABLE_KEY_NOT_IN_DATAFILE, MODULE_NAME$2, variableKey, featureKey);
            return null;
        }
        return variable;
    };
    /**
     * Get the value of the given variable for the given variation. If the given
     * variable has no value for the given variation, return null. Log an error message if the variation is invalid. If the
     * variable or variation are invalid, return null.
     * @param  {ProjectConfig}     projectConfig
     * @param  {FeatureVariable}   variable
     * @param  {Variation}         variation
     * @param  {LogHandler}        logger
     * @return {string|null}       The value of the given variable for the given
     * variation, or null if the given variable has no value
     * for the given variation or if the variation or variable are invalid
     */
    var getVariableValueForVariation = function (projectConfig, variable, variation, logger) {
        if (!variable || !variation) {
            return null;
        }
        if (!projectConfig.variationVariableUsageMap.hasOwnProperty(variation.id)) {
            logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.VARIATION_ID_NOT_IN_DATAFILE_NO_EXPERIMENT, MODULE_NAME$2, variation.id);
            return null;
        }
        var variableUsages = projectConfig.variationVariableUsageMap[variation.id];
        var variableUsage = variableUsages[variable.id];
        return variableUsage ? variableUsage.value : null;
    };
    /**
     * Given a variable value in string form, try to cast it to the argument type.
     * If the type cast succeeds, return the type casted value, otherwise log an
     * error and return null.
     * @param {string}     variableValue  Variable value in string form
     * @param {string}     variableType   Type of the variable whose value was passed
     *                                    in the first argument. Must be one of
     *                                    FEATURE_VARIABLE_TYPES in
     *                                    lib/utils/enums/index.js. The return value's
     *                                    type is determined by this argument (boolean
     *                                    for BOOLEAN, number for INTEGER or DOUBLE,
     *                                    and string for STRING).
     * @param {LogHandler} logger         Logger instance
     * @returns {*}                       Variable value of the appropriate type, or
     *                                    null if the type cast failed
     */
    var getTypeCastValue = function (variableValue, variableType, logger) {
        var castValue;
        switch (variableType) {
            case FEATURE_VARIABLE_TYPES.BOOLEAN:
                if (variableValue !== 'true' && variableValue !== 'false') {
                    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$2, variableValue, variableType);
                    castValue = null;
                }
                else {
                    castValue = variableValue === 'true';
                }
                break;
            case FEATURE_VARIABLE_TYPES.INTEGER:
                castValue = parseInt(variableValue, 10);
                if (isNaN(castValue)) {
                    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$2, variableValue, variableType);
                    castValue = null;
                }
                break;
            case FEATURE_VARIABLE_TYPES.DOUBLE:
                castValue = parseFloat(variableValue);
                if (isNaN(castValue)) {
                    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$2, variableValue, variableType);
                    castValue = null;
                }
                break;
            case FEATURE_VARIABLE_TYPES.JSON:
                try {
                    castValue = JSON.parse(variableValue);
                }
                catch (e) {
                    logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.UNABLE_TO_CAST_VALUE, MODULE_NAME$2, variableValue, variableType);
                    castValue = null;
                }
                break;
            default:
                // type is STRING
                castValue = variableValue;
                break;
        }
        return castValue;
    };
    /**
     * Returns an object containing all audiences in the project config. Keys are audience IDs
     * and values are audience objects.
     * @param   {ProjectConfig}     projectConfig
     * @returns {{ [id: string]: Audience }}
     */
    var getAudiencesById = function (projectConfig) {
        return projectConfig.audiencesById;
    };
    /**
     * Returns true if an event with the given key exists in the datafile, and false otherwise
     * @param   {ProjectConfig}     projectConfig
     * @param   {string}            eventKey
     * @returns {boolean}
     */
    var eventWithKeyExists = function (projectConfig, eventKey) {
        return projectConfig.eventKeyMap.hasOwnProperty(eventKey);
    };
    /**
     * Returns true if experiment belongs to any feature, false otherwise.
     * @param   {ProjectConfig}       projectConfig
     * @param   {string}              experimentId
     * @returns {boolean}
     */
    var isFeatureExperiment = function (projectConfig, experimentId) {
        return projectConfig.experimentFeatureMap.hasOwnProperty(experimentId);
    };
    /**
     * Returns the JSON string representation of the datafile
     * @param   {ProjectConfig}       projectConfig
     * @returns {string}
     */
    var toDatafile = function (projectConfig) {
        return projectConfig.__datafileStr;
    };
    /**
     * @typedef   {Object}
     * @property  {Object|null} configObj
     * @property  {Error|null}  error
     */
    /**
     * Try to create a project config object from the given datafile and
     * configuration properties.
     * Returns an object with configObj and error properties.
     * If successful, configObj is the project config object, and error is null.
     * Otherwise, configObj is null and error is an error with more information.
     * @param   {Object}         config
     * @param   {Object|string}  config.datafile
     * @param   {Object}         config.jsonSchemaValidator
     * @param   {Object}         config.logger
     * @returns {Object}         Object containing configObj and error properties
     */
    var tryCreatingProjectConfig = function (config) {
        var newDatafileObj;
        try {
            newDatafileObj = configValidator.validateDatafile(config.datafile);
        }
        catch (error) {
            return { configObj: null, error: error };
        }
        if (config.jsonSchemaValidator) {
            try {
                config.jsonSchemaValidator.validate(newDatafileObj);
                config.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.VALID_DATAFILE, MODULE_NAME$2);
            }
            catch (error) {
                return { configObj: null, error: error };
            }
        }
        else {
            config.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.SKIPPING_JSON_VALIDATION, MODULE_NAME$2);
        }
        var createProjectConfigArgs = [newDatafileObj];
        if (typeof config.datafile === 'string') {
            // Since config.datafile was validated above, we know that it is a valid JSON string
            createProjectConfigArgs.push(config.datafile);
        }
        var newConfigObj = createProjectConfig.apply(void 0, createProjectConfigArgs);
        return {
            configObj: newConfigObj,
            error: null,
        };
    };
    /**
     * Get the send flag decisions value
     * @param  {ProjectConfig}   projectConfig
     * @return {boolean}         A boolean value that indicates if we should send flag decisions
     */
    var getSendFlagDecisionsValue = function (projectConfig) {
        return !!projectConfig.sendFlagDecisions;
    };

    function createHttpPollingDatafileManager(sdkKey, logger, 
    // TODO[OASIS-6649]: Don't use object type
    // eslint-disable-next-line  @typescript-eslint/ban-types
    datafile, datafileOptions) {
        var datafileManagerConfig = { sdkKey: sdkKey };
        if (datafileOptions === undefined || (typeof datafileOptions === 'object' && datafileOptions !== null)) {
            fns.assign(datafileManagerConfig, datafileOptions);
        }
        if (datafile) {
            var _a = tryCreatingProjectConfig({
                datafile: datafile,
                jsonSchemaValidator: undefined,
                logger: logger,
            }), configObj = _a.configObj, error = _a.error;
            if (error) {
                logger.error(error);
            }
            if (configObj) {
                datafileManagerConfig.datafile = toDatafile(configObj);
            }
        }
        return new BrowserDatafileManager(datafileManagerConfig);
    }

    /**
     * Copyright 2022 Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Handles sending requests and receiving responses over HTTP via XMLHttpRequest
     */
    var BrowserRequestHandler = /** @class */ (function () {
        function BrowserRequestHandler(logger, timeout) {
            if (timeout === void 0) { timeout = REQUEST_TIMEOUT_MS; }
            this.logger = logger;
            this.timeout = timeout;
        }
        /**
         * Builds an XMLHttpRequest
         * @param requestUrl Fully-qualified URL to which to send the request
         * @param headers List of headers to include in the request
         * @param method HTTP method to use
         * @param data?? stringified version of data to POST, PUT, etc
         * @returns AbortableRequest contains both the response Promise and capability to abort()
         */
        BrowserRequestHandler.prototype.makeRequest = function (requestUrl, headers, method, data) {
            var _this = this;
            var request = new XMLHttpRequest();
            var responsePromise = new Promise(function (resolve, reject) {
                request.open(method, requestUrl, true);
                _this.setHeadersInXhr(headers, request);
                request.onreadystatechange = function () {
                    if (request.readyState === XMLHttpRequest.DONE) {
                        var statusCode = request.status;
                        if (statusCode === 0) {
                            reject(new Error('Request error'));
                            return;
                        }
                        var headers_1 = _this.parseHeadersFromXhr(request);
                        var response = {
                            statusCode: request.status,
                            body: request.responseText,
                            headers: headers_1,
                        };
                        resolve(response);
                    }
                };
                request.timeout = _this.timeout;
                request.ontimeout = function () {
                    _this.logger.log(exports.LogLevel.WARNING, 'Request timed out');
                };
                request.send(data);
            });
            return {
                responsePromise: responsePromise,
                abort: function () {
                    request.abort();
                },
            };
        };
        /**
         * Sets the header collection for an XHR
         * @param headers Headers to set
         * @param request Request into which headers are to be set
         * @private
         */
        BrowserRequestHandler.prototype.setHeadersInXhr = function (headers, request) {
            Object.keys(headers).forEach(function (headerName) {
                var header = headers[headerName];
                if (typeof header === 'string') {
                    request.setRequestHeader(headerName, header);
                }
            });
        };
        /**
         * Parses headers from an XHR
         * @param request Request containing headers to be retrieved
         * @private
         * @returns List of headers without duplicates
         */
        BrowserRequestHandler.prototype.parseHeadersFromXhr = function (request) {
            var _this = this;
            var allHeadersString = request.getAllResponseHeaders();
            if (allHeadersString === null) {
                return {};
            }
            var headerLines = allHeadersString.split('\r\n');
            var headers = {};
            headerLines.forEach(function (headerLine) {
                try {
                    var separatorIndex = headerLine.indexOf(': ');
                    if (separatorIndex > -1) {
                        var headerName = headerLine.slice(0, separatorIndex);
                        var headerValue = headerLine.slice(separatorIndex + 2);
                        if (headerName && headerValue) {
                            headers[headerName] = headerValue;
                        }
                    }
                }
                catch (_a) {
                    _this.logger.log(exports.LogLevel.WARNING, "Unable to parse & skipped header item '".concat(headerLine, "'"));
                }
            });
            return headers;
        };
        return BrowserRequestHandler;
    }());

    /**
     * Copyright 2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Checks to see if browser localStorage available. If so, runs and returns browserCallback. Otherwise, runs and returns nonBrowserCallback.
     * @param {object} callbacks
     * @param {[object.browserCallback]} callbacks.browserCallback
     * @param {[object.nonBrowserCallback]} callbacks.nonBrowserCallback
     * @returns
     */
    var tryWithLocalStorage = function (_a) {
        var browserCallback = _a.browserCallback, nonBrowserCallback = _a.nonBrowserCallback;
        return typeof window !== 'undefined' ? browserCallback(window === null || window === void 0 ? void 0 : window.localStorage) : nonBrowserCallback();
    };

    /**
     * Copyright 2022-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BrowserAsyncStorageCache = /** @class */ (function () {
        function BrowserAsyncStorageCache() {
            this.logger = getLogger();
        }
        BrowserAsyncStorageCache.prototype.contains = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, tryWithLocalStorage({
                            browserCallback: function (localStorage) {
                                return (localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(key)) !== null;
                            },
                            nonBrowserCallback: function () {
                                _this.logger.error(ERROR_MESSAGES.LOCAL_STORAGE_DOES_NOT_EXIST);
                                return false;
                            },
                        })];
                });
            });
        };
        BrowserAsyncStorageCache.prototype.get = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, tryWithLocalStorage({
                            browserCallback: function (localStorage) {
                                return ((localStorage === null || localStorage === void 0 ? void 0 : localStorage.getItem(key)) || undefined);
                            },
                            nonBrowserCallback: function () {
                                _this.logger.error(ERROR_MESSAGES.LOCAL_STORAGE_DOES_NOT_EXIST);
                                return undefined;
                            },
                        })];
                });
            });
        };
        BrowserAsyncStorageCache.prototype.remove = function (key) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.contains(key)];
                        case 1:
                            if (_a.sent()) {
                                tryWithLocalStorage({
                                    browserCallback: function (localStorage) {
                                        localStorage === null || localStorage === void 0 ? void 0 : localStorage.removeItem(key);
                                    },
                                    nonBrowserCallback: function () {
                                        _this.logger.error(ERROR_MESSAGES.LOCAL_STORAGE_DOES_NOT_EXIST);
                                    },
                                });
                                return [2 /*return*/, true];
                            }
                            else {
                                return [2 /*return*/, false];
                            }
                    }
                });
            });
        };
        BrowserAsyncStorageCache.prototype.set = function (key, val) {
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, tryWithLocalStorage({
                            browserCallback: function (localStorage) {
                                localStorage === null || localStorage === void 0 ? void 0 : localStorage.setItem(key, val);
                            },
                            nonBrowserCallback: function () {
                                _this.logger.error(ERROR_MESSAGES.LOCAL_STORAGE_DOES_NOT_EXIST);
                            },
                        })];
                });
            });
        };
        return BrowserAsyncStorageCache;
    }());

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * CacheElement represents an individual generic item within the LRUCache
     */
    var CacheElement = /** @class */ (function () {
        function CacheElement(value) {
            if (value === void 0) { value = null; }
            this._value = value;
            this._time = Date.now();
        }
        Object.defineProperty(CacheElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CacheElement.prototype, "time", {
            get: function () {
                return this._time;
            },
            enumerable: false,
            configurable: true
        });
        CacheElement.prototype.is_stale = function (timeout) {
            if (timeout <= 0)
                return false;
            return Date.now() - this._time >= timeout;
        };
        return CacheElement;
    }());

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Least-Recently Used Cache (LRU Cache) Implementation with Generic Key-Value Pairs
     * Analogous to a Map that has a specified max size and a timeout per element.
     * - Removes the least-recently used element from the cache if max size exceeded.
     * - Removes stale elements (entries older than their timeout) from the cache.
     */
    var LRUCache = /** @class */ (function () {
        function LRUCache(_a) {
            var maxSize = _a.maxSize, timeout = _a.timeout;
            this._map = new Map();
            var logger = getLogger();
            logger.debug("Provisioning cache with maxSize of ".concat(maxSize));
            logger.debug("Provisioning cache with timeout of ".concat(timeout));
            this._maxSize = maxSize;
            this._timeout = timeout;
        }
        Object.defineProperty(LRUCache.prototype, "map", {
            get: function () {
                return this._map;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LRUCache.prototype, "maxSize", {
            get: function () {
                return this._maxSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(LRUCache.prototype, "timeout", {
            get: function () {
                return this._timeout;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns a valid, non-stale value from LRU Cache based on an input key.
         * Additionally moves the element to the end of the cache and removes from cache if stale.
         */
        LRUCache.prototype.lookup = function (key) {
            if (this._maxSize <= 0) {
                return null;
            }
            var element = this._map.get(key);
            if (!element)
                return null;
            if (element.is_stale(this._timeout)) {
                this._map.delete(key);
                return null;
            }
            this._map.delete(key);
            this._map.set(key, element);
            return element.value;
        };
        /**
         * Inserts/moves an input key-value pair to the end of the LRU Cache.
         * Removes the least-recently used element if the cache exceeds it's maxSize.
         */
        LRUCache.prototype.save = function (_a) {
            var key = _a.key, value = _a.value;
            if (this._maxSize <= 0)
                return;
            var element = this._map.get(key);
            if (element)
                this._map.delete(key);
            this._map.set(key, new CacheElement(value));
            if (this._map.size > this._maxSize) {
                var firstMapEntryKey = this._map.keys().next().value;
                this._map.delete(firstMapEntryKey);
            }
        };
        /**
         * Clears the LRU Cache
         */
        LRUCache.prototype.reset = function () {
            if (this._maxSize <= 0)
                return;
            this._map.clear();
        };
        /**
         * Reads value from specified key without moving elements in the LRU Cache.
         * @param {K} key
         */
        LRUCache.prototype.peek = function (key) {
            var _a;
            if (this._maxSize <= 0)
                return null;
            var element = this._map.get(key);
            return (_a = element === null || element === void 0 ? void 0 : element.value) !== null && _a !== void 0 ? _a : null;
        };
        return LRUCache;
    }());

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var BrowserLRUCacheConfig = {
        DEFAULT_CAPACITY: 100,
        DEFAULT_TIMEOUT_SECS: 600,
    };
    var BrowserLRUCache = /** @class */ (function (_super) {
        __extends(BrowserLRUCache, _super);
        function BrowserLRUCache(config) {
            var _a, _b;
            return _super.call(this, {
                maxSize: (_a = config === null || config === void 0 ? void 0 : config.maxSize) !== null && _a !== void 0 ? _a : BrowserLRUCacheConfig.DEFAULT_CAPACITY,
                timeout: (_b = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b !== void 0 ? _b : BrowserLRUCacheConfig.DEFAULT_TIMEOUT_SECS * 1000,
            }) || this;
        }
        return BrowserLRUCache;
    }(LRUCache));

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var ServerLRUCacheConfig = {
        DEFAULT_CAPACITY: 10000,
        DEFAULT_TIMEOUT_SECS: 600,
    };
    var ServerLRUCache = /** @class */ (function (_super) {
        __extends(ServerLRUCache, _super);
        function ServerLRUCache(config) {
            var _a, _b;
            return _super.call(this, {
                maxSize: (_a = config === null || config === void 0 ? void 0 : config.maxSize) !== null && _a !== void 0 ? _a : ServerLRUCacheConfig.DEFAULT_CAPACITY,
                timeout: (_b = config === null || config === void 0 ? void 0 : config.timeout) !== null && _b !== void 0 ? _b : ServerLRUCacheConfig.DEFAULT_TIMEOUT_SECS * 1000,
            }) || this;
        }
        return ServerLRUCache;
    }(LRUCache));

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Manager for creating, persisting, and retrieving a Visitor Unique Identifier
     */
    var VuidManager = /** @class */ (function () {
        function VuidManager() {
            /**
             * Unique key used within the persistent value cache against which to
             * store the VUID
             * @private
             */
            this._keyForVuid = 'optimizely-vuid';
            this._vuid = '';
        }
        Object.defineProperty(VuidManager.prototype, "vuid", {
            /**
             * Get the current VUID value being used
             */
            get: function () {
                return this._vuid;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Gets the current instance of the VUID Manager, initializing if needed
         * @param cache Caching mechanism to use for persisting the VUID outside working memory   *
         * @returns An instance of VuidManager
         */
        VuidManager.instance = function (cache) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this._instance) {
                                this._instance = new VuidManager();
                            }
                            if (!!this._instance._vuid) return [3 /*break*/, 2];
                            return [4 /*yield*/, this._instance.load(cache)];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2: return [2 /*return*/, this._instance];
                    }
                });
            });
        };
        /**
         * Attempts to load a VUID from persistent cache or generates a new VUID
         * @param cache Caching mechanism to use for persisting the VUID outside working memory
         * @returns Current VUID stored in the VuidManager
         * @private
         */
        VuidManager.prototype.load = function (cache) {
            return __awaiter(this, void 0, void 0, function () {
                var cachedValue;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, cache.get(this._keyForVuid)];
                        case 1:
                            cachedValue = _a.sent();
                            if (!(cachedValue && VuidManager.isVuid(cachedValue))) return [3 /*break*/, 2];
                            this._vuid = cachedValue;
                            return [3 /*break*/, 4];
                        case 2:
                            this._vuid = this.makeVuid();
                            return [4 /*yield*/, this.save(this._vuid, cache)];
                        case 3:
                            _a.sent();
                            _a.label = 4;
                        case 4: return [2 /*return*/, this._vuid];
                    }
                });
            });
        };
        /**
         * Creates a new VUID
         * @returns A new visitor unique identifier
         * @private
         */
        VuidManager.prototype.makeVuid = function () {
            var maxLength = 32; // required by ODP server
            // make sure UUIDv4 is used (not UUIDv1 or UUIDv6) since the trailing 5 chars will be truncated. See TDD for details.
            var uuidV4 = uuid();
            var formatted = uuidV4.replace(/-/g, '').toLowerCase();
            var vuidFull = "".concat(VuidManager.vuid_prefix).concat(formatted);
            return vuidFull.length <= maxLength ? vuidFull : vuidFull.substring(0, maxLength);
        };
        /**
         * Saves a VUID to a persistent cache
         * @param vuid VUID to be stored
         * @param cache Caching mechanism to use for persisting the VUID outside working memory
         * @private
         */
        VuidManager.prototype.save = function (vuid, cache) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, cache.set(this._keyForVuid, vuid)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Function used in unit testing to reset the VuidManager
         * **Important**: This should not to be used in production code
         * @private
         */
        VuidManager._reset = function () {
            this._instance._vuid = '';
        };
        /**
         * Prefix used as part of the VUID format
         * @public
         * @readonly
         */
        VuidManager.vuid_prefix = "vuid_";
        /**
         * Validates the format of a Visitor Unique Identifier
         * @param vuid VistorId to check
         * @returns *true* if the VisitorId is valid otherwise *false* for invalid
         */
        VuidManager.isVuid = function (vuid) { return (vuid === null || vuid === void 0 ? void 0 : vuid.startsWith(VuidManager.vuid_prefix)) || false; };
        return VuidManager;
    }());

    /**
     * Copyright 2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Validate event data value types
     * @param data Event data to be validated
     * @returns True if an invalid type was found in the data otherwise False
     * @private
     */
    function invalidOdpDataFound(data) {
        var validTypes = ['string', 'number', 'boolean'];
        var foundInvalidValue = false;
        data.forEach(function (value) {
            if (!validTypes.includes(typeof value) && value !== null) {
                foundInvalidValue = true;
            }
        });
        return foundInvalidValue;
    }

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var OdpEvent = /** @class */ (function () {
        /**
         * Event to be sent and stored in the Optimizely Data Platform
         * @param type Type of event (typically "fullstack")
         * @param action Subcategory of the event type
         * @param identifiers Key-value map of user identifiers
         * @param data Event data in a key-value map.
         */
        function OdpEvent(type, action, identifiers, data) {
            this.type = type;
            this.action = action;
            this.identifiers = identifiers !== null && identifiers !== void 0 ? identifiers : new Map();
            this.data = data !== null && data !== void 0 ? data : new Map();
        }
        return OdpEvent;
    }());

    /**
     * Copyright 2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var noop = function () { };
    function resolvablePromise() {
        var resolve = noop;
        var reject = noop;
        var promise = new Promise(function (res, rej) {
            resolve = res;
            reject = rej;
        });
        return { promise: promise, resolve: resolve, reject: reject, then: promise.then.bind(promise) };
    }

    /**
     * Copyright 2023-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var Status;
    (function (Status) {
        Status[Status["Running"] = 0] = "Running";
        Status[Status["Stopped"] = 1] = "Stopped";
    })(Status || (Status = {}));
    /**
     * Orchestrates segments manager, event manager, and ODP configuration
     */
    var OdpManager = /** @class */ (function () {
        // TODO: Consider accepting logger as a parameter and initializing it in constructor instead
        function OdpManager(_a) {
            var odpIntegrationConfig = _a.odpIntegrationConfig, segmentManager = _a.segmentManager, eventManager = _a.eventManager, logger = _a.logger;
            var _this = this;
            this.ready = false;
            this.status = Status.Stopped;
            this.segmentManager = segmentManager;
            this.eventManager = eventManager;
            this.logger = logger;
            this.configPromise = resolvablePromise();
            var readinessDependencies = [this.configPromise];
            if (this.isVuidEnabled()) {
                readinessDependencies.push(this.initializeVuid());
            }
            this.initPromise = Promise.all(readinessDependencies);
            this.onReady().then(function () {
                _this.ready = true;
                if (_this.isVuidEnabled() && _this.status === Status.Running) {
                    _this.registerVuid();
                }
            });
            if (odpIntegrationConfig) {
                this.updateSettings(odpIntegrationConfig);
            }
        }
        OdpManager.prototype.getStatus = function () {
            return this.status;
        };
        OdpManager.prototype.start = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (this.status === Status.Running) {
                        return [2 /*return*/];
                    }
                    if (!this.odpIntegrationConfig) {
                        return [2 /*return*/, Promise.reject(new Error('cannot start without ODP config'))];
                    }
                    if (!this.odpIntegrationConfig.integrated) {
                        return [2 /*return*/, Promise.reject(new Error('start() called when ODP is not integrated'))];
                    }
                    this.status = Status.Running;
                    this.segmentManager.updateSettings(this.odpIntegrationConfig.odpConfig);
                    this.eventManager.updateSettings(this.odpIntegrationConfig.odpConfig);
                    this.eventManager.start();
                    return [2 /*return*/, Promise.resolve()];
                });
            });
        };
        OdpManager.prototype.stop = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.status === Status.Stopped) {
                                return [2 /*return*/];
                            }
                            this.status = Status.Stopped;
                            return [4 /*yield*/, this.eventManager.stop()];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            });
        };
        OdpManager.prototype.onReady = function () {
            return this.initPromise;
        };
        OdpManager.prototype.isReady = function () {
            return this.ready;
        };
        /**
         * Provides a method to update ODP Manager's ODP Config
         */
        OdpManager.prototype.updateSettings = function (odpIntegrationConfig) {
            this.configPromise.resolve();
            // do nothing if config did not change
            if (this.odpIntegrationConfig && odpIntegrationsAreEqual(this.odpIntegrationConfig, odpIntegrationConfig)) {
                return false;
            }
            this.odpIntegrationConfig = odpIntegrationConfig;
            if (odpIntegrationConfig.integrated) {
                // already running, just propagate updated config to children;
                if (this.status === Status.Running) {
                    this.segmentManager.updateSettings(odpIntegrationConfig.odpConfig);
                    this.eventManager.updateSettings(odpIntegrationConfig.odpConfig);
                }
                else {
                    this.start();
                }
            }
            else {
                this.stop();
            }
            return true;
        };
        /**
         * Attempts to fetch and return a list of a user's qualified segments from the local segments cache.
         * If no cached data exists for the target user, this fetches and caches data from the ODP server instead.
         * @param {string}                          userId  - Unique identifier of a target user.
         * @param {Array<OptimizelySegmentOption>}  options - An array of OptimizelySegmentOption used to ignore and/or reset the cache.
         * @returns {Promise<string[] | null>}      A promise holding either a list of qualified segments or null.
         */
        OdpManager.prototype.fetchQualifiedSegments = function (userId, options) {
            if (options === void 0) { options = []; }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    if (!this.odpIntegrationConfig) {
                        this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_CONFIG_NOT_AVAILABLE);
                        return [2 /*return*/, null];
                    }
                    if (!this.odpIntegrationConfig.integrated) {
                        this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_NOT_INTEGRATED);
                        return [2 /*return*/, null];
                    }
                    if (VuidManager.isVuid(userId)) {
                        return [2 /*return*/, this.segmentManager.fetchQualifiedSegments(ODP_USER_KEY.VUID, userId, options)];
                    }
                    return [2 /*return*/, this.segmentManager.fetchQualifiedSegments(ODP_USER_KEY.FS_USER_ID, userId, options)];
                });
            });
        };
        /**
         * Identifies a user via the ODP Event Manager
         * @param {string}  userId    (Optional) Custom unique identifier of a target user.
         * @param {string}  vuid      (Optional) Secondary unique identifier of a target user, primarily used by client SDKs.
         * @returns
         */
        OdpManager.prototype.identifyUser = function (userId, vuid) {
            if (!this.odpIntegrationConfig) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_CONFIG_NOT_AVAILABLE);
                return;
            }
            if (!this.odpIntegrationConfig.integrated) {
                this.logger.log(exports.LogLevel.INFO, ERROR_MESSAGES.ODP_NOT_INTEGRATED);
                return;
            }
            if (userId && VuidManager.isVuid(userId)) {
                this.eventManager.identifyUser(undefined, userId);
                return;
            }
            this.eventManager.identifyUser(userId, vuid);
        };
        /**
         * Sends an event to the ODP Server via the ODP Events API
         * @param {OdpEvent}  > ODP Event to send to event manager
         */
        OdpManager.prototype.sendEvent = function (_a) {
            var type = _a.type, action = _a.action, identifiers = _a.identifiers, data = _a.data;
            var mType = type;
            if (typeof mType !== 'string' || mType === '') {
                mType = 'fullstack';
            }
            if (!this.odpIntegrationConfig) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_CONFIG_NOT_AVAILABLE);
                return;
            }
            if (!this.odpIntegrationConfig.integrated) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_NOT_INTEGRATED);
                return;
            }
            if (invalidOdpDataFound(data)) {
                throw new Error(ERROR_MESSAGES.ODP_INVALID_DATA);
            }
            if (typeof action !== 'string' || action === '') {
                throw new Error('ODP action is not valid (cannot be empty).');
            }
            this.eventManager.sendEvent(new OdpEvent(mType, action, identifiers, data));
        };
        OdpManager.prototype.initializeVuid = function () {
            return Promise.resolve();
        };
        OdpManager.prototype.registerVuid = function () {
            if (!this.odpIntegrationConfig) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_CONFIG_NOT_AVAILABLE);
                return;
            }
            if (!this.odpIntegrationConfig.integrated) {
                this.logger.log(exports.LogLevel.INFO, ERROR_MESSAGES.ODP_NOT_INTEGRATED);
                return;
            }
            var vuid = this.getVuid();
            if (!vuid) {
                return;
            }
            try {
                this.eventManager.registerVuid(vuid);
            }
            catch (e) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_VUID_REGISTRATION_FAILED);
            }
        };
        return OdpManager;
    }());

    /**
     * Copyright 2022-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var EVENT_SENDING_FAILURE_MESSAGE = 'ODP event send failed';
    /**
     * Concrete implementation for accessing the ODP REST API
     */
    var OdpEventApiManager = /** @class */ (function () {
        /**
         * Creates instance to access Optimizely Data Platform (ODP) REST API
         * @param requestHandler Desired request handler for testing
         * @param logger Collect and record events/errors for this GraphQL implementation
         */
        function OdpEventApiManager(requestHandler, logger) {
            this.requestHandler = requestHandler;
            this.logger = logger;
        }
        OdpEventApiManager.prototype.getLogger = function () {
            return this.logger;
        };
        /**
         * Service for sending ODP events to REST API
         * @param events ODP events to send
         * @returns Retry is true - if network or server error (5xx), otherwise false
         */
        OdpEventApiManager.prototype.sendEvents = function (odpConfig, events) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var shouldRetry, _b, method, endpoint, headers, data, statusCode, request, response, err_1, message;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            shouldRetry = false;
                            if (events.length === 0) {
                                this.logger.log(exports.LogLevel.ERROR, "".concat(EVENT_SENDING_FAILURE_MESSAGE, " (no events)"));
                                return [2 /*return*/, shouldRetry];
                            }
                            if (!this.shouldSendEvents(events)) {
                                return [2 /*return*/, shouldRetry];
                            }
                            _b = this.generateRequestData(odpConfig, events), method = _b.method, endpoint = _b.endpoint, headers = _b.headers, data = _b.data;
                            statusCode = 0;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, , 4]);
                            request = this.requestHandler.makeRequest(endpoint, headers, method, data);
                            return [4 /*yield*/, request.responsePromise];
                        case 2:
                            response = _c.sent();
                            statusCode = (_a = response.statusCode) !== null && _a !== void 0 ? _a : statusCode;
                            return [3 /*break*/, 4];
                        case 3:
                            err_1 = _c.sent();
                            message = 'network error';
                            if (err_1 instanceof Error) {
                                message = err_1.message;
                            }
                            this.logger.log(exports.LogLevel.ERROR, "".concat(EVENT_SENDING_FAILURE_MESSAGE, " (").concat(message, ")"));
                            shouldRetry = true;
                            return [3 /*break*/, 4];
                        case 4:
                            if (statusCode >= 400) {
                                this.logger.log(exports.LogLevel.ERROR, "".concat(EVENT_SENDING_FAILURE_MESSAGE, " (").concat(statusCode, ")"));
                            }
                            if (statusCode >= 500) {
                                shouldRetry = true;
                            }
                            return [2 /*return*/, shouldRetry];
                    }
                });
            });
        };
        return OdpEventApiManager;
    }());

    /****************************************************************************
     * Copyright 2024, Optimizely, Inc. and contributors                        *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    http://www.apache.org/licenses/LICENSE-2.0                            *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    var EVENT_SENDING_FAILURE_MESSAGE$1 = 'ODP event send failed';
    var pixelApiPath = 'v2/zaius.gif';
    var BrowserOdpEventApiManager = /** @class */ (function (_super) {
        __extends(BrowserOdpEventApiManager, _super);
        function BrowserOdpEventApiManager() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        BrowserOdpEventApiManager.prototype.shouldSendEvents = function (events) {
            if (events.length <= 1) {
                return true;
            }
            this.getLogger().log(exports.LogLevel.ERROR, "".concat(EVENT_SENDING_FAILURE_MESSAGE$1, " (browser only supports batch size 1)"));
            return false;
        };
        BrowserOdpEventApiManager.prototype.getPixelApiEndpoint = function (odpConfig) {
            var pixelUrl = odpConfig.pixelUrl;
            var pixelApiEndpoint = new URL(pixelApiPath, pixelUrl).href;
            return pixelApiEndpoint;
        };
        BrowserOdpEventApiManager.prototype.generateRequestData = function (odpConfig, events) {
            var pixelApiEndpoint = this.getPixelApiEndpoint(odpConfig);
            var apiKey = odpConfig.apiKey;
            var method = 'GET';
            var event = events[0];
            var url = new URL(pixelApiEndpoint);
            event.identifiers.forEach(function (v, k) {
                url.searchParams.append(k, v);
            });
            event.data.forEach(function (v, k) {
                url.searchParams.append(k, v);
            });
            url.searchParams.append('tracker_id', apiKey);
            url.searchParams.append('event_type', event.type);
            url.searchParams.append('vdl_action', event.action);
            var endpoint = url.toString();
            return {
                method: method,
                endpoint: endpoint,
                headers: {},
                data: '',
            };
        };
        return BrowserOdpEventApiManager;
    }(OdpEventApiManager));

    /**
     * Copyright 2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var scheduleMicrotaskOrTimeout = function (callback) {
        if (typeof queueMicrotask === 'function') {
            queueMicrotask(callback);
        }
        else {
            setTimeout(callback);
        }
    };

    /**
     * Copyright 2022-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MAX_RETRIES = 3;
    /**
     * Event dispatcher's execution states
     */
    var Status$1;
    (function (Status) {
        Status[Status["Stopped"] = 0] = "Stopped";
        Status[Status["Running"] = 1] = "Running";
    })(Status$1 || (Status$1 = {}));
    /**
     * Concrete implementation of a manager for persisting events to the Optimizely Data Platform
     */
    var OdpEventManager = /** @class */ (function () {
        function OdpEventManager(_a) {
            var odpConfig = _a.odpConfig, apiManager = _a.apiManager, logger = _a.logger, clientEngine = _a.clientEngine, clientVersion = _a.clientVersion, queueSize = _a.queueSize, batchSize = _a.batchSize, flushInterval = _a.flushInterval, userAgentParser = _a.userAgentParser, retries = _a.retries;
            /**
             * Current state of the event processor
             */
            this.status = Status$1.Stopped;
            /**
             * Queue for holding all events to be eventually dispatched
             * @protected
             */
            this.queue = new Array();
            this.apiManager = apiManager;
            this.logger = logger;
            this.clientEngine = clientEngine;
            this.clientVersion = clientVersion;
            this.initParams(batchSize, queueSize, flushInterval);
            this.status = Status$1.Stopped;
            this.userAgentParser = userAgentParser;
            this.retries = retries || MAX_RETRIES;
            if (userAgentParser) {
                var _b = userAgentParser.parseUserAgentInfo(), os = _b.os, device = _b.device;
                var userAgentInfo = {
                    'os': os.name,
                    'os_version': os.version,
                    'device_type': device.type,
                    'model': device.model,
                };
                this.userAgentData = new Map(Object.entries(userAgentInfo).filter(function (_a) {
                    var key = _a[0], value = _a[1];
                    return value != null && value != undefined;
                }));
            }
            if (odpConfig) {
                this.updateSettings(odpConfig);
            }
        }
        /**
         * Update ODP configuration settings.
         * @param newConfig New configuration to apply
         */
        OdpEventManager.prototype.updateSettings = function (odpConfig) {
            // do nothing if config did not change
            if (this.odpConfig && this.odpConfig.equals(odpConfig)) {
                return;
            }
            this.flush();
            this.odpConfig = odpConfig;
        };
        /**
         * Cleans up all pending events;
         */
        OdpEventManager.prototype.flush = function () {
            this.processQueue(true);
        };
        /**
         * Start the event manager
         */
        OdpEventManager.prototype.start = function () {
            if (!this.odpConfig) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_CONFIG_NOT_AVAILABLE);
                return;
            }
            this.status = Status$1.Running;
            // no need of periodic flush if batchSize is 1
            if (this.batchSize > 1) {
                this.setNewTimeout();
            }
        };
        /**
         * Drain the queue sending all remaining events in batches then stop processing
         */
        OdpEventManager.prototype.stop = function () {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.logger.log(exports.LogLevel.DEBUG, 'Stop requested.');
                    this.flush();
                    this.clearCurrentTimeout();
                    this.status = Status$1.Stopped;
                    this.logger.log(exports.LogLevel.DEBUG, 'Stopped. Queue Count: %s', this.queue.length);
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Register a new visitor user id (VUID) in ODP
         * @param vuid Visitor User ID to send
         */
        OdpEventManager.prototype.registerVuid = function (vuid) {
            var identifiers = new Map();
            identifiers.set(ODP_USER_KEY.VUID, vuid);
            var event = new OdpEvent(ODP_DEFAULT_EVENT_TYPE, ODP_EVENT_ACTION.INITIALIZED, identifiers);
            this.sendEvent(event);
        };
        /**
         * Associate a full-stack userid with an established VUID
         * @param {string} userId   (Optional) Full-stack User ID
         * @param {string} vuid     (Optional) Visitor User ID
         */
        OdpEventManager.prototype.identifyUser = function (userId, vuid) {
            var identifiers = new Map();
            if (!userId && !vuid) {
                this.logger.log(exports.LogLevel.ERROR, ERROR_MESSAGES.ODP_SEND_EVENT_FAILED_UID_MISSING);
                return;
            }
            if (vuid) {
                identifiers.set(ODP_USER_KEY.VUID, vuid);
            }
            if (userId) {
                identifiers.set(ODP_USER_KEY.FS_USER_ID, userId);
            }
            var event = new OdpEvent(ODP_DEFAULT_EVENT_TYPE, ODP_EVENT_ACTION.IDENTIFIED, identifiers);
            this.sendEvent(event);
        };
        /**
         * Send an event to ODP via dispatch queue
         * @param event ODP Event to forward
         */
        OdpEventManager.prototype.sendEvent = function (event) {
            if (invalidOdpDataFound(event.data)) {
                this.logger.log(exports.LogLevel.ERROR, 'Event data found to be invalid.');
            }
            else {
                event.data = this.augmentCommonData(event.data);
                this.enqueue(event);
            }
        };
        /**
         * Add a new event to the main queue
         * @param event ODP Event to be queued
         * @private
         */
        OdpEventManager.prototype.enqueue = function (event) {
            if (this.status === Status$1.Stopped) {
                this.logger.log(exports.LogLevel.WARNING, 'Failed to Process ODP Event. ODPEventManager is not running.');
                return;
            }
            if (!this.hasNecessaryIdentifiers(event)) {
                this.logger.log(exports.LogLevel.ERROR, 'ODP events should have at least one key-value pair in identifiers.');
                return;
            }
            if (this.queue.length >= this.queueSize) {
                this.logger.log(exports.LogLevel.WARNING, 'Failed to Process ODP Event. Event Queue full. queueSize = %s.', this.queue.length);
                return;
            }
            this.queue.push(event);
            this.processQueue();
        };
        /**
         * Process events in the main queue
         * @param shouldFlush Flush all events regardless of available queue event count
         * @private
         */
        OdpEventManager.prototype.processQueue = function (shouldFlush) {
            if (shouldFlush === void 0) { shouldFlush = false; }
            if (this.status !== Status$1.Running) {
                return;
            }
            if (shouldFlush) {
                // clear the queue completely
                this.clearCurrentTimeout();
                while (this.queueContainsItems()) {
                    this.makeAndSend1Batch();
                }
            }
            else if (this.queueHasBatches()) {
                // Check if queue has a full batch available
                this.clearCurrentTimeout();
                while (this.queueHasBatches()) {
                    this.makeAndSend1Batch();
                }
            }
            // no need for periodic flush if batchSize is 1
            if (this.batchSize > 1) {
                this.setNewTimeout();
            }
        };
        /**
         * Clear the currently running timout
         * @private
         */
        OdpEventManager.prototype.clearCurrentTimeout = function () {
            clearTimeout(this.timeoutId);
            this.timeoutId = undefined;
        };
        /**
         * Start a new timeout
         * @private
         */
        OdpEventManager.prototype.setNewTimeout = function () {
            var _this = this;
            if (this.timeoutId !== undefined) {
                return;
            }
            this.timeoutId = setTimeout(function () { return _this.processQueue(true); }, this.flushInterval);
        };
        /**
         * Make a batch and send it to ODP
         * @private
         */
        OdpEventManager.prototype.makeAndSend1Batch = function () {
            var _this = this;
            if (!this.odpConfig) {
                return;
            }
            var batch = this.queue.splice(0, this.batchSize);
            var odpConfig = this.odpConfig;
            if (batch.length > 0) {
                // put sending the event on another event loop
                scheduleMicrotaskOrTimeout(function () { return __awaiter(_this, void 0, void 0, function () {
                    var shouldRetry, attemptNumber;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                attemptNumber = 0;
                                _a.label = 1;
                            case 1: return [4 /*yield*/, this.apiManager.sendEvents(odpConfig, batch)];
                            case 2:
                                shouldRetry = _a.sent();
                                attemptNumber += 1;
                                _a.label = 3;
                            case 3:
                                if (shouldRetry && attemptNumber < this.retries) return [3 /*break*/, 1];
                                _a.label = 4;
                            case 4: return [2 /*return*/];
                        }
                    });
                }); });
            }
        };
        /**
         * Check if main queue has any full/even batches available
         * @returns True if there are event batches available in the queue otherwise False
         * @private
         */
        OdpEventManager.prototype.queueHasBatches = function () {
            return this.queueContainsItems() && this.queue.length % this.batchSize === 0;
        };
        /**
         * Check if main queue has any items
         * @returns True if there are any events in the queue otherwise False
         * @private
         */
        OdpEventManager.prototype.queueContainsItems = function () {
            return this.queue.length > 0;
        };
        /**
         * Add additional common data including an idempotent ID and execution context to event data
         * @param sourceData Existing event data to augment
         * @returns Augmented event data
         * @private
         */
        OdpEventManager.prototype.augmentCommonData = function (sourceData) {
            var data = new Map(this.userAgentData);
            data.set('idempotence_id', uuid());
            data.set('data_source_type', 'sdk');
            data.set('data_source', this.clientEngine);
            data.set('data_source_version', this.clientVersion);
            sourceData.forEach(function (value, key) { return data.set(key, value); });
            return data;
        };
        OdpEventManager.prototype.getLogger = function () {
            return this.logger;
        };
        OdpEventManager.prototype.getQueue = function () {
            return this.queue;
        };
        return OdpEventManager;
    }());

    /**
     * Copyright 2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var DEFAULT_BROWSER_QUEUE_SIZE = 100;
    var BrowserOdpEventManager = /** @class */ (function (_super) {
        __extends(BrowserOdpEventManager, _super);
        function BrowserOdpEventManager() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.hasNecessaryIdentifiers = function (event) { return event.identifiers.size >= 0; };
            return _this;
        }
        BrowserOdpEventManager.prototype.initParams = function (batchSize, queueSize, flushInterval) {
            this.queueSize = queueSize || DEFAULT_BROWSER_QUEUE_SIZE;
            // disable event batching for browser
            this.batchSize = 1;
            this.flushInterval = 0;
            if (typeof batchSize !== 'undefined' && batchSize !== 1) {
                this.getLogger().log(exports.LogLevel.WARNING, 'ODP event batch size must be 1 in the browser.');
            }
            if (typeof flushInterval !== 'undefined' && flushInterval !== 0) {
                this.getLogger().log(exports.LogLevel.WARNING, 'ODP event flush interval must be 0 in the browser.');
            }
        };
        BrowserOdpEventManager.prototype.discardEventsIfNeeded = function () {
            // in Browser/client-side context, give debug message but leave events in queue
            this.getLogger().log(exports.LogLevel.DEBUG, 'ODPConfig not ready. Leaving events in queue.');
        };
        return BrowserOdpEventManager;
    }(OdpEventManager));

    /**
     * Copyright 2022-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Schedules connections to ODP for audience segmentation and caches the results.
     */
    var OdpSegmentManager = /** @class */ (function () {
        function OdpSegmentManager(segmentsCache, odpSegmentApiManager, logger, odpConfig) {
            this.odpConfig = odpConfig;
            this._segmentsCache = segmentsCache;
            this.odpSegmentApiManager = odpSegmentApiManager;
            this.logger = logger || getLogger('OdpSegmentManager');
        }
        Object.defineProperty(OdpSegmentManager.prototype, "segmentsCache", {
            /**
             * Getter for private segments cache
             * @public
             */
            get: function () {
                return this._segmentsCache;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Attempts to fetch and return a list of a user's qualified segments from the local segments cache.
         * If no cached data exists for the target user, this fetches and caches data from the ODP server instead.
         * @param userKey Key used for identifying the id type.
         * @param userValue The id value itself.
         * @param options An array of OptimizelySegmentOption used to ignore and/or reset the cache.
         * @returns Qualified segments for the user from the cache or the ODP server if the cache is empty.
         */
        OdpSegmentManager.prototype.fetchQualifiedSegments = function (userKey, userValue, options) {
            return __awaiter(this, void 0, void 0, function () {
                var segmentsToCheck, cacheKey, ignoreCache, resetCache, cachedSegments, segments;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.odpConfig) {
                                this.logger.log(exports.LogLevel.WARNING, ERROR_MESSAGES.ODP_CONFIG_NOT_AVAILABLE);
                                return [2 /*return*/, null];
                            }
                            segmentsToCheck = this.odpConfig.segmentsToCheck;
                            if (!segmentsToCheck || segmentsToCheck.length <= 0) {
                                this.logger.log(exports.LogLevel.DEBUG, 'No segments are used in the project. Returning an empty list.');
                                return [2 /*return*/, []];
                            }
                            cacheKey = this.makeCacheKey(userKey, userValue);
                            ignoreCache = options.includes(exports.OptimizelySegmentOption.IGNORE_CACHE);
                            resetCache = options.includes(exports.OptimizelySegmentOption.RESET_CACHE);
                            if (resetCache) {
                                this.reset();
                            }
                            if (!ignoreCache && !resetCache) {
                                cachedSegments = this._segmentsCache.lookup(cacheKey);
                                if (cachedSegments) {
                                    this.logger.log(exports.LogLevel.DEBUG, 'ODP cache hit. Returning segments from cache "%s".', cacheKey);
                                    return [2 /*return*/, cachedSegments];
                                }
                                this.logger.log(exports.LogLevel.DEBUG, "ODP cache miss.");
                            }
                            this.logger.log(exports.LogLevel.DEBUG, "Making a call to ODP server.");
                            return [4 /*yield*/, this.odpSegmentApiManager.fetchSegments(this.odpConfig.apiKey, this.odpConfig.apiHost, userKey, userValue, segmentsToCheck)];
                        case 1:
                            segments = _a.sent();
                            if (segments && !ignoreCache) {
                                this._segmentsCache.save({ key: cacheKey, value: segments });
                            }
                            return [2 /*return*/, segments];
                    }
                });
            });
        };
        /**
         * Clears the segments cache
         */
        OdpSegmentManager.prototype.reset = function () {
            this._segmentsCache.reset();
        };
        /**
         * Creates a key used to identify which user fetchQualifiedSegments should lookup and save to in the segments cache
         * @param userKey User type based on ODP_USER_KEY, such as "vuid" or "fs_user_id"
         * @param userValue Arbitrary string, such as "test-user"
         * @returns Concatenates inputs and returns the string "{userKey}-$-{userValue}"
         */
        OdpSegmentManager.prototype.makeCacheKey = function (userKey, userValue) {
            return "".concat(userKey, "-$-").concat(userValue);
        };
        /**
         * Updates the ODP Config settings of ODP Segment Manager
         * @param config New ODP Config that will overwrite the existing config
         */
        OdpSegmentManager.prototype.updateSettings = function (config) {
            this.odpConfig = config;
            this.reset();
        };
        return OdpSegmentManager;
    }());

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
    	return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var validate$1 = createCommonjsModule(function (module) {
    /**
     * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
     *	(http://www.json.com/json-schema-proposal/)
     * Licensed under AFL-2.1 OR BSD-3-Clause
    To use the validator call the validate function with an instance object and an optional schema object.
    If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
    that schema will be used to validate and the schema parameter is not necessary (if both exist,
    both validations will occur).
    The validate method will return an array of validation errors. If there are no errors, then an
    empty list will be returned. A validation error will have two properties:
    "property" which indicates which property had the error
    "message" which indicates what the error was
     */
    (function (root, factory) {
        if ( module.exports) {
            // Node. Does not work with strict CommonJS, but
            // only CommonJS-like environments that support module.exports,
            // like Node.
            module.exports = factory();
        } else {
            // Browser globals
            root.jsonSchema = factory();
        }
    }(commonjsGlobal, function () {// setup primitive classes to be JSON Schema types
    var exports = validate;
    exports.Integer = {type:"integer"};
    var primitiveConstructors = {
    	String: String,
    	Boolean: Boolean,
    	Number: Number,
    	Object: Object,
    	Array: Array,
    	Date: Date
    };
    exports.validate = validate;
    function validate(/*Any*/instance,/*Object*/schema) {
    		// Summary:
    		//  	To use the validator call JSONSchema.validate with an instance object and an optional schema object.
    		// 		If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
    		// 		that schema will be used to validate and the schema parameter is not necessary (if both exist,
    		// 		both validations will occur).
    		// 		The validate method will return an object with two properties:
    		// 			valid: A boolean indicating if the instance is valid by the schema
    		// 			errors: An array of validation errors. If there are no errors, then an
    		// 					empty list will be returned. A validation error will have two properties:
    		// 						property: which indicates which property had the error
    		// 						message: which indicates what the error was
    		//
    		return validate(instance, schema, {changing: false});//, coerce: false, existingOnly: false});
    	}exports.checkPropertyChange = function(/*Any*/value,/*Object*/schema, /*String*/property) {
    		// Summary:
    		// 		The checkPropertyChange method will check to see if an value can legally be in property with the given schema
    		// 		This is slightly different than the validate method in that it will fail if the schema is readonly and it will
    		// 		not check for self-validation, it is assumed that the passed in value is already internally valid.
    		// 		The checkPropertyChange method will return the same object type as validate, see JSONSchema.validate for
    		// 		information.
    		//
    		return validate(value, schema, {changing: property || "property"});
    	};
    var validate = exports._validate = function(/*Any*/instance,/*Object*/schema,/*Object*/options) {

    	if (!options) options = {};
    	var _changing = options.changing;

    	function getType(schema){
    		return schema.type || (primitiveConstructors[schema.name] == schema && schema.name.toLowerCase());
    	}
    	var errors = [];
    	// validate a value against a property definition
    	function checkProp(value, schema, path,i){

    		var l;
    		path += path ? typeof i == 'number' ? '[' + i + ']' : typeof i == 'undefined' ? '' : '.' + i : i;
    		function addError(message){
    			errors.push({property:path,message:message});
    		}

    		if((typeof schema != 'object' || schema instanceof Array) && (path || typeof schema != 'function') && !(schema && getType(schema))){
    			if(typeof schema == 'function'){
    				if(!(value instanceof schema)){
    					addError("is not an instance of the class/constructor " + schema.name);
    				}
    			}else if(schema){
    				addError("Invalid schema/property definition " + schema);
    			}
    			return null;
    		}
    		if(_changing && schema.readonly){
    			addError("is a readonly field, it can not be changed");
    		}
    		if(schema['extends']){ // if it extends another schema, it must pass that schema as well
    			checkProp(value,schema['extends'],path,i);
    		}
    		// validate a value against a type definition
    		function checkType(type,value){
    			if(type){
    				if(typeof type == 'string' && type != 'any' &&
    						(type == 'null' ? value !== null : typeof value != type) &&
    						!(value instanceof Array && type == 'array') &&
    						!(value instanceof Date && type == 'date') &&
    						!(type == 'integer' && value%1===0)){
    					return [{property:path,message:value + " - " + (typeof value) + " value found, but a " + type + " is required"}];
    				}
    				if(type instanceof Array){
    					var unionErrors=[];
    					for(var j = 0; j < type.length; j++){ // a union type
    						if(!(unionErrors=checkType(type[j],value)).length){
    							break;
    						}
    					}
    					if(unionErrors.length){
    						return unionErrors;
    					}
    				}else if(typeof type == 'object'){
    					var priorErrors = errors;
    					errors = [];
    					checkProp(value,type,path);
    					var theseErrors = errors;
    					errors = priorErrors;
    					return theseErrors;
    				}
    			}
    			return [];
    		}
    		if(value === undefined){
    			if(schema.required){
    				addError("is missing and it is required");
    			}
    		}else {
    			errors = errors.concat(checkType(getType(schema),value));
    			if(schema.disallow && !checkType(schema.disallow,value).length){
    				addError(" disallowed value was matched");
    			}
    			if(value !== null){
    				if(value instanceof Array){
    					if(schema.items){
    						var itemsIsArray = schema.items instanceof Array;
    						var propDef = schema.items;
    						for (i = 0, l = value.length; i < l; i += 1) {
    							if (itemsIsArray)
    								propDef = schema.items[i];
    							if (options.coerce)
    								value[i] = options.coerce(value[i], propDef);
    							errors.concat(checkProp(value[i],propDef,path,i));
    						}
    					}
    					if(schema.minItems && value.length < schema.minItems){
    						addError("There must be a minimum of " + schema.minItems + " in the array");
    					}
    					if(schema.maxItems && value.length > schema.maxItems){
    						addError("There must be a maximum of " + schema.maxItems + " in the array");
    					}
    				}else if(schema.properties || schema.additionalProperties){
    					errors.concat(checkObj(value, schema.properties, path, schema.additionalProperties));
    				}
    				if(schema.pattern && typeof value == 'string' && !value.match(schema.pattern)){
    					addError("does not match the regex pattern " + schema.pattern);
    				}
    				if(schema.maxLength && typeof value == 'string' && value.length > schema.maxLength){
    					addError("may only be " + schema.maxLength + " characters long");
    				}
    				if(schema.minLength && typeof value == 'string' && value.length < schema.minLength){
    					addError("must be at least " + schema.minLength + " characters long");
    				}
    				if(typeof schema.minimum !== 'undefined' && typeof value == typeof schema.minimum &&
    						schema.minimum > value){
    					addError("must have a minimum value of " + schema.minimum);
    				}
    				if(typeof schema.maximum !== 'undefined' && typeof value == typeof schema.maximum &&
    						schema.maximum < value){
    					addError("must have a maximum value of " + schema.maximum);
    				}
    				if(schema['enum']){
    					var enumer = schema['enum'];
    					l = enumer.length;
    					var found;
    					for(var j = 0; j < l; j++){
    						if(enumer[j]===value){
    							found=1;
    							break;
    						}
    					}
    					if(!found){
    						addError("does not have a value in the enumeration " + enumer.join(", "));
    					}
    				}
    				if(typeof schema.maxDecimal == 'number' &&
    					(value.toString().match(new RegExp("\\.[0-9]{" + (schema.maxDecimal + 1) + ",}")))){
    					addError("may only have " + schema.maxDecimal + " digits of decimal places");
    				}
    			}
    		}
    		return null;
    	}
    	// validate an object against a schema
    	function checkObj(instance,objTypeDef,path,additionalProp){

    		if(typeof objTypeDef =='object'){
    			if(typeof instance != 'object' || instance instanceof Array){
    				errors.push({property:path,message:"an object is required"});
    			}
    			
    			for(var i in objTypeDef){ 
    				if(objTypeDef.hasOwnProperty(i) && i != '__proto__' && i != 'constructor'){
    					var value = instance.hasOwnProperty(i) ? instance[i] : undefined;
    					// skip _not_ specified properties
    					if (value === undefined && options.existingOnly) continue;
    					var propDef = objTypeDef[i];
    					// set default
    					if(value === undefined && propDef["default"]){
    						value = instance[i] = propDef["default"];
    					}
    					if(options.coerce && i in instance){
    						value = instance[i] = options.coerce(value, propDef);
    					}
    					checkProp(value,propDef,path,i);
    				}
    			}
    		}
    		for(i in instance){
    			if(instance.hasOwnProperty(i) && !(i.charAt(0) == '_' && i.charAt(1) == '_') && objTypeDef && !objTypeDef[i] && additionalProp===false){
    				if (options.filter) {
    					delete instance[i];
    					continue;
    				} else {
    					errors.push({property:path,message:"The property " + i +
    						" is not defined in the schema and the schema does not allow additional properties"});
    				}
    			}
    			var requires = objTypeDef && objTypeDef[i] && objTypeDef[i].requires;
    			if(requires && !(requires in instance)){
    				errors.push({property:path,message:"the presence of the property " + i + " requires that " + requires + " also be present"});
    			}
    			value = instance[i];
    			if(additionalProp && (!(objTypeDef && typeof objTypeDef == 'object') || !(i in objTypeDef))){
    				if(options.coerce){
    					value = instance[i] = options.coerce(value, additionalProp);
    				}
    				checkProp(value,additionalProp,path,i);
    			}
    			if(!_changing && value && value.$schema){
    				errors = errors.concat(checkProp(value,value.$schema,path,i));
    			}
    		}
    		return errors;
    	}
    	if(schema){
    		checkProp(instance,schema,'',_changing || '');
    	}
    	if(!_changing && instance && instance.$schema){
    		checkProp(instance,instance.$schema,'','');
    	}
    	return {valid:!errors.length,errors:errors};
    };
    exports.mustBeValid = function(result){
    	//	summary:
    	//		This checks to ensure that the result is valid and will throw an appropriate error message if it is not
    	// result: the result returned from checkPropertyChange or validate
    	if(!result.valid){
    		throw new TypeError(result.errors.map(function(error){return "for property " + error.property + ': ' + error.message;}).join(", \n"));
    	}
    };

    return exports;
    }));
    });
    var validate_1 = validate$1.validate;

    var schemaDefinition = {
        $schema: 'http://json-schema.org/draft-04/schema#',
        title: 'Project Config JSON Schema',
        type: 'object',
        properties: {
            projectId: {
                type: 'string',
                required: true,
            },
            accountId: {
                type: 'string',
                required: true,
            },
            groups: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            required: true,
                        },
                        policy: {
                            type: 'string',
                            required: true,
                        },
                        trafficAllocation: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    entityId: {
                                        type: 'string',
                                        required: true,
                                    },
                                    endOfRange: {
                                        type: 'integer',
                                        required: true,
                                    },
                                },
                            },
                            required: true,
                        },
                        experiments: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    id: {
                                        type: 'string',
                                        required: true,
                                    },
                                    key: {
                                        type: 'string',
                                        required: true,
                                    },
                                    status: {
                                        type: 'string',
                                        required: true,
                                    },
                                    layerId: {
                                        type: 'string',
                                        required: true,
                                    },
                                    variations: {
                                        type: 'array',
                                        items: {
                                            type: 'object',
                                            properties: {
                                                id: {
                                                    type: 'string',
                                                    required: true,
                                                },
                                                key: {
                                                    type: 'string',
                                                    required: true,
                                                },
                                            },
                                        },
                                        required: true,
                                    },
                                    trafficAllocation: {
                                        type: 'array',
                                        items: {
                                            type: 'object',
                                            properties: {
                                                entityId: {
                                                    type: 'string',
                                                    required: true,
                                                },
                                                endOfRange: {
                                                    type: 'integer',
                                                    required: true,
                                                },
                                            },
                                        },
                                        required: true,
                                    },
                                    audienceIds: {
                                        type: 'array',
                                        items: {
                                            type: 'string',
                                        },
                                        required: true,
                                    },
                                    forcedVariations: {
                                        type: 'object',
                                        required: true,
                                    },
                                },
                            },
                            required: true,
                        },
                    },
                },
                required: true,
            },
            experiments: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            required: true,
                        },
                        key: {
                            type: 'string',
                            required: true,
                        },
                        status: {
                            type: 'string',
                            required: true,
                        },
                        layerId: {
                            type: 'string',
                            required: true,
                        },
                        variations: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    id: {
                                        type: 'string',
                                        required: true,
                                    },
                                    key: {
                                        type: 'string',
                                        required: true,
                                    },
                                },
                            },
                            required: true,
                        },
                        trafficAllocation: {
                            type: 'array',
                            items: {
                                type: 'object',
                                properties: {
                                    entityId: {
                                        type: 'string',
                                        required: true,
                                    },
                                    endOfRange: {
                                        type: 'integer',
                                        required: true,
                                    },
                                },
                            },
                            required: true,
                        },
                        audienceIds: {
                            type: 'array',
                            items: {
                                type: 'string',
                            },
                            required: true,
                        },
                        forcedVariations: {
                            type: 'object',
                            required: true,
                        },
                    },
                },
                required: true,
            },
            events: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        key: {
                            type: 'string',
                            required: true,
                        },
                        experimentIds: {
                            type: 'array',
                            items: {
                                type: 'string',
                                required: true,
                            },
                        },
                        id: {
                            type: 'string',
                            required: true,
                        },
                    },
                },
                required: true,
            },
            audiences: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            required: true,
                        },
                        name: {
                            type: 'string',
                            required: true,
                        },
                        conditions: {
                            type: 'string',
                            required: true,
                        },
                    },
                },
                required: true,
            },
            attributes: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        id: {
                            type: 'string',
                            required: true,
                        },
                        key: {
                            type: 'string',
                            required: true,
                        },
                    },
                },
                required: true,
            },
            version: {
                type: 'string',
                required: true,
            },
            revision: {
                type: 'string',
                required: true,
            },
            integrations: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        key: {
                            type: 'string',
                            required: true
                        },
                        host: {
                            type: 'string'
                        },
                        publicKey: {
                            type: 'string'
                        },
                        pixelUrl: {
                            type: 'string'
                        },
                    },
                },
            },
        },
    };
    var schema = schemaDefinition;

    /**
     * Copyright 2016-2017, 2020, 2022 Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MODULE_NAME$3 = 'JSON_SCHEMA_VALIDATOR';
    /**
     * Validate the given json object against the specified schema
     * @param {unknown} jsonObject The object to validate against the schema
     * @param {JSONSchema4} validationSchema Provided schema to use for validation
     * @param {boolean} shouldThrowOnError Should validation throw if invalid JSON object
     * @return {boolean} true if the given object is valid; throws or false if invalid
     */
    function validate$2(jsonObject, validationSchema, shouldThrowOnError) {
        if (validationSchema === void 0) { validationSchema = schema; }
        if (shouldThrowOnError === void 0) { shouldThrowOnError = true; }
        var moduleTitle = "".concat(MODULE_NAME$3, " (").concat(validationSchema.title, ")");
        if (typeof jsonObject !== 'object' || jsonObject === null) {
            throw new Error(sprintf(ERROR_MESSAGES.NO_JSON_PROVIDED, moduleTitle));
        }
        var result = validate_1(jsonObject, validationSchema);
        if (result.valid) {
            return true;
        }
        if (!shouldThrowOnError) {
            return false;
        }
        if (Array.isArray(result.errors)) {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_DATAFILE, moduleTitle, result.errors[0].property, result.errors[0].message));
        }
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_JSON, moduleTitle));
    }

    /**
     * Copyright 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the 'License');
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an 'AS IS' BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * JSON Schema used to validate the ODP GraphQL response
     */
    var OdpResponseSchema = {
        $schema: 'https://json-schema.org/draft/2019-09/schema',
        $id: 'https://example.com/example.json',
        title: 'ODP Response Schema',
        type: 'object',
        required: [
            'data',
        ],
        properties: {
            data: {
                title: 'The data Schema',
                type: 'object',
                required: [
                    'customer',
                ],
                properties: {
                    customer: {
                        title: 'The customer Schema',
                        type: 'object',
                        required: [],
                        properties: {
                            audiences: {
                                title: 'The audiences Schema',
                                type: 'object',
                                required: [
                                    'edges',
                                ],
                                properties: {
                                    edges: {
                                        title: 'The edges Schema',
                                        type: 'array',
                                        items: {
                                            title: 'A Schema',
                                            type: 'object',
                                            required: [
                                                'node',
                                            ],
                                            properties: {
                                                node: {
                                                    title: 'The node Schema',
                                                    type: 'object',
                                                    required: [
                                                        'name',
                                                        'state',
                                                    ],
                                                    properties: {
                                                        name: {
                                                            title: 'The name Schema',
                                                            type: 'string',
                                                            examples: [
                                                                'has_email',
                                                                'has_email_opted_in',
                                                            ],
                                                        },
                                                        state: {
                                                            title: 'The state Schema',
                                                            type: 'string',
                                                            examples: [
                                                                'qualified',
                                                            ],
                                                        },
                                                    },
                                                    examples: [],
                                                },
                                            },
                                            examples: [],
                                        },
                                        examples: [],
                                    },
                                },
                                examples: [],
                            },
                        },
                        examples: [],
                    },
                },
                examples: [],
            },
            errors: {
                title: 'The errors Schema',
                type: 'array',
                default: [],
                items: {
                    title: 'A Schema',
                    type: 'object',
                    required: [
                        'message',
                        'locations',
                        'extensions',
                    ],
                    properties: {
                        message: {
                            title: 'The message Schema',
                            type: 'string',
                            examples: [
                                'Exception while fetching data (/customer) : java.lang.RuntimeException: could not resolve _fs_user_id = asdsdaddddd',
                            ],
                        },
                        locations: {
                            title: 'The locations Schema',
                            type: 'array',
                            items: {
                                title: 'A Schema',
                                type: 'object',
                                required: [
                                    'line',
                                    'column',
                                ],
                                properties: {
                                    line: {
                                        title: 'The line Schema',
                                        type: 'integer',
                                        examples: [
                                            2,
                                        ],
                                    },
                                    column: {
                                        title: 'The column Schema',
                                        type: 'integer',
                                        examples: [
                                            3,
                                        ],
                                    },
                                },
                                examples: [],
                            },
                            examples: [],
                        },
                        path: {
                            title: 'The path Schema',
                            type: 'array',
                            items: {
                                title: 'A Schema',
                                type: 'string',
                                examples: [
                                    'customer',
                                ],
                            },
                            examples: [],
                        },
                        extensions: {
                            title: 'The extensions Schema',
                            type: 'object',
                            required: [
                                'classification',
                            ],
                            properties: {
                                classification: {
                                    title: 'The classification Schema',
                                    type: 'string',
                                    examples: [
                                        'InvalidIdentifierException',
                                    ],
                                },
                            },
                            examples: [],
                        },
                    },
                    examples: [],
                },
                examples: [],
            },
        },
        examples: [],
    };

    /**
     * Copyright 2022-2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Expected value for a qualified/valid segment
     */
    var QUALIFIED = 'qualified';
    /**
     * Return value when no valid segments found
     */
    var EMPTY_SEGMENTS_COLLECTION = [];
    /**
     * Return value for scenarios with no valid JSON
     */
    var EMPTY_JSON_RESPONSE = null;
    /**
     * Standard message for audience querying fetch errors
     */
    var AUDIENCE_FETCH_FAILURE_MESSAGE = 'Audience segments fetch failed';
    /**
     * Concrete implementation for communicating with the ODP GraphQL endpoint
     */
    var OdpSegmentApiManager = /** @class */ (function () {
        /**
         * Communicates with Optimizely Data Platform's GraphQL endpoint
         * @param requestHandler Desired request handler for testing
         * @param logger Collect and record events/errors for this GraphQL implementation
         */
        function OdpSegmentApiManager(requestHandler, logger) {
            /**
             * Converts the query parameters to a GraphQL JSON payload
             * @returns GraphQL JSON string
             */
            this.toGraphQLJson = function (userKey, userValue, segmentsToCheck) {
                return __spreadArray(__spreadArray([
                    '{"query" : "query {customer',
                    "(".concat(userKey, " : \\\"").concat(userValue, "\\\") "),
                    '{audiences',
                    '(subset: ['
                ], ((segmentsToCheck === null || segmentsToCheck === void 0 ? void 0 : segmentsToCheck.map(function (segment, index) { return "\\\"".concat(segment, "\\\"").concat(index < segmentsToCheck.length - 1 ? ',' : ''); })) || ''), true), [
                    ']) {edges {node {name state}}}}}"}',
                ], false).join('');
            };
            this.requestHandler = requestHandler;
            this.logger = logger;
        }
        /**
         * Retrieves the audience segments from ODP
         * @param apiKey ODP public key
         * @param apiHost Host of ODP endpoint
         * @param userKey 'vuid' or 'fs_user_id key'
         * @param userValue Associated value to query for the user key
         * @param segmentsToCheck Audience segments to check for experiment inclusion
         */
        OdpSegmentApiManager.prototype.fetchSegments = function (apiKey, apiHost, userKey, userValue, segmentsToCheck) {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function () {
                var endpoint, query, segmentsResponse, parsedSegments, _e, code, classification, edges;
                return __generator(this, function (_f) {
                    switch (_f.label) {
                        case 0:
                            if (!apiKey || !apiHost) {
                                this.logger.log(exports.LogLevel.ERROR, "".concat(AUDIENCE_FETCH_FAILURE_MESSAGE, " (Parameters apiKey or apiHost invalid)"));
                                return [2 /*return*/, null];
                            }
                            if ((segmentsToCheck === null || segmentsToCheck === void 0 ? void 0 : segmentsToCheck.length) === 0) {
                                return [2 /*return*/, EMPTY_SEGMENTS_COLLECTION];
                            }
                            endpoint = "".concat(apiHost, "/v3/graphql");
                            query = this.toGraphQLJson(userKey, userValue, segmentsToCheck);
                            return [4 /*yield*/, this.querySegments(apiKey, endpoint, userKey, userValue, query)];
                        case 1:
                            segmentsResponse = _f.sent();
                            if (!segmentsResponse) {
                                this.logger.log(exports.LogLevel.ERROR, "".concat(AUDIENCE_FETCH_FAILURE_MESSAGE, " (network error)"));
                                return [2 /*return*/, null];
                            }
                            parsedSegments = this.parseSegmentsResponseJson(segmentsResponse);
                            if (!parsedSegments) {
                                this.logger.log(exports.LogLevel.ERROR, "".concat(AUDIENCE_FETCH_FAILURE_MESSAGE, " (decode error)"));
                                return [2 /*return*/, null];
                            }
                            if (((_a = parsedSegments.errors) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                                _e = parsedSegments.errors[0].extensions, code = _e.code, classification = _e.classification;
                                if (code == 'INVALID_IDENTIFIER_EXCEPTION') {
                                    this.logger.log(exports.LogLevel.ERROR, "".concat(AUDIENCE_FETCH_FAILURE_MESSAGE, " (invalid identifier)"));
                                }
                                else {
                                    this.logger.log(exports.LogLevel.ERROR, "".concat(AUDIENCE_FETCH_FAILURE_MESSAGE, " (").concat(classification, ")"));
                                }
                                return [2 /*return*/, null];
                            }
                            edges = (_d = (_c = (_b = parsedSegments === null || parsedSegments === void 0 ? void 0 : parsedSegments.data) === null || _b === void 0 ? void 0 : _b.customer) === null || _c === void 0 ? void 0 : _c.audiences) === null || _d === void 0 ? void 0 : _d.edges;
                            if (!edges) {
                                this.logger.log(exports.LogLevel.ERROR, "".concat(AUDIENCE_FETCH_FAILURE_MESSAGE, " (decode error)"));
                                return [2 /*return*/, null];
                            }
                            return [2 /*return*/, edges.filter(function (edge) { return edge.node.state == QUALIFIED; }).map(function (edge) { return edge.node.name; })];
                    }
                });
            });
        };
        /**
         * Handler for querying the ODP GraphQL endpoint
         * @param apiKey ODP API key
         * @param endpoint Fully-qualified GraphQL endpoint URL
         * @param userKey 'vuid' or 'fs_user_id'
         * @param userValue userKey's value
         * @param query GraphQL formatted query string
         * @returns JSON response string from ODP or null
         */
        OdpSegmentApiManager.prototype.querySegments = function (apiKey, endpoint, userKey, userValue, query) {
            return __awaiter(this, void 0, void 0, function () {
                var method, url, headers, response, request, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            method = 'POST';
                            url = endpoint;
                            headers = {
                                'Content-Type': 'application/json',
                                'x-api-key': apiKey,
                            };
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, , 4]);
                            request = this.requestHandler.makeRequest(url, headers, method, query);
                            return [4 /*yield*/, request.responsePromise];
                        case 2:
                            response = _b.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            _a = _b.sent();
                            return [2 /*return*/, null];
                        case 4: return [2 /*return*/, response.body];
                    }
                });
            });
        };
        /**
         * Parses JSON response
         * @param jsonResponse JSON response from ODP
         * @private
         * @returns Response Strongly-typed ODP Response object
         */
        OdpSegmentApiManager.prototype.parseSegmentsResponseJson = function (jsonResponse) {
            var jsonObject = {};
            try {
                jsonObject = JSON.parse(jsonResponse);
            }
            catch (_a) {
                return EMPTY_JSON_RESPONSE;
            }
            if (validate$2(jsonObject, OdpResponseSchema, false)) {
                return jsonObject;
            }
            return EMPTY_JSON_RESPONSE;
        };
        return OdpSegmentApiManager;
    }());

    /**
     * Copyright 2023-2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    // Client-side Browser Plugin for ODP Manager
    var BrowserOdpManager = /** @class */ (function (_super) {
        __extends(BrowserOdpManager, _super);
        function BrowserOdpManager(options) {
            return _super.call(this, options) || this;
        }
        BrowserOdpManager.createInstance = function (_a) {
            var logger = _a.logger, odpOptions = _a.odpOptions, odpIntegrationConfig = _a.odpIntegrationConfig, clientEngine = _a.clientEngine, clientVersion = _a.clientVersion;
            logger = logger || getLogger();
            clientEngine = clientEngine || JAVASCRIPT_CLIENT_ENGINE;
            clientVersion = clientVersion || CLIENT_VERSION;
            var odpConfig = undefined;
            if (odpIntegrationConfig === null || odpIntegrationConfig === void 0 ? void 0 : odpIntegrationConfig.integrated) {
                odpConfig = odpIntegrationConfig.odpConfig;
            }
            var customSegmentRequestHandler;
            if (odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.segmentsRequestHandler) {
                customSegmentRequestHandler = odpOptions.segmentsRequestHandler;
            }
            else {
                customSegmentRequestHandler = new BrowserRequestHandler(logger, (odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.segmentsApiTimeout) || REQUEST_TIMEOUT_ODP_SEGMENTS_MS);
            }
            var segmentManager;
            if (odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.segmentManager) {
                segmentManager = odpOptions.segmentManager;
            }
            else {
                segmentManager = new OdpSegmentManager((odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.segmentsCache) ||
                    new BrowserLRUCache({
                        maxSize: odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.segmentsCacheSize,
                        timeout: odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.segmentsCacheTimeout,
                    }), new OdpSegmentApiManager(customSegmentRequestHandler, logger), logger, odpConfig);
            }
            var customEventRequestHandler;
            if (odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.eventRequestHandler) {
                customEventRequestHandler = odpOptions.eventRequestHandler;
            }
            else {
                customEventRequestHandler = new BrowserRequestHandler(logger, (odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.eventApiTimeout) || REQUEST_TIMEOUT_ODP_EVENTS_MS);
            }
            var eventManager;
            if (odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.eventManager) {
                eventManager = odpOptions.eventManager;
            }
            else {
                eventManager = new BrowserOdpEventManager({
                    odpConfig: odpConfig,
                    apiManager: new BrowserOdpEventApiManager(customEventRequestHandler, logger),
                    logger: logger,
                    clientEngine: clientEngine,
                    clientVersion: clientVersion,
                    flushInterval: odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.eventFlushInterval,
                    batchSize: odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.eventBatchSize,
                    queueSize: odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.eventQueueSize,
                    userAgentParser: odpOptions === null || odpOptions === void 0 ? void 0 : odpOptions.userAgentParser,
                });
            }
            return new BrowserOdpManager({
                odpIntegrationConfig: odpIntegrationConfig,
                segmentManager: segmentManager,
                eventManager: eventManager,
                logger: logger,
            });
        };
        /**
         * @override
         * accesses or creates new VUID from Browser cache
         */
        BrowserOdpManager.prototype.initializeVuid = function () {
            return __awaiter(this, void 0, void 0, function () {
                var vuidManager;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, VuidManager.instance(BrowserOdpManager.cache)];
                        case 1:
                            vuidManager = _a.sent();
                            this.vuid = vuidManager.vuid;
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * @override
         * - Still identifies a user via the ODP Event Manager
         * - Additionally, also passes VUID to help identify client-side users
         * @param fsUserId Unique identifier of a target user.
         */
        BrowserOdpManager.prototype.identifyUser = function (fsUserId, vuid) {
            if (fsUserId && VuidManager.isVuid(fsUserId)) {
                _super.prototype.identifyUser.call(this, undefined, fsUserId);
                return;
            }
            if (fsUserId && vuid && VuidManager.isVuid(vuid)) {
                _super.prototype.identifyUser.call(this, fsUserId, vuid);
                return;
            }
            _super.prototype.identifyUser.call(this, fsUserId, vuid || this.vuid);
        };
        /**
         * @override
         * - Sends an event to the ODP Server via the ODP Events API
         * - Intercepts identifiers and injects VUID before sending event
         * - Identifiers must contain at least one key-value pair
         * @param {OdpEvent} odpEvent  > ODP Event to send to event manager
         */
        BrowserOdpManager.prototype.sendEvent = function (_a) {
            var type = _a.type, action = _a.action, identifiers = _a.identifiers, data = _a.data;
            var identifiersWithVuid = new Map(identifiers);
            if (!identifiers.has(ODP_USER_KEY.VUID)) {
                if (this.vuid) {
                    identifiersWithVuid.set(ODP_USER_KEY.VUID, this.vuid);
                }
                else {
                    throw new Error(ERROR_MESSAGES.ODP_SEND_EVENT_FAILED_VUID_MISSING);
                }
            }
            _super.prototype.sendEvent.call(this, { type: type, action: action, identifiers: identifiersWithVuid, data: data });
        };
        BrowserOdpManager.prototype.isVuidEnabled = function () {
            return true;
        };
        BrowserOdpManager.prototype.getVuid = function () {
            return this.vuid;
        };
        BrowserOdpManager.cache = new BrowserAsyncStorageCache();
        return BrowserOdpManager;
    }(OdpManager));

    function newErrorDecision(key, user, reasons) {
        return {
            variationKey: null,
            enabled: false,
            variables: {},
            ruleKey: null,
            flagKey: key,
            userContext: user,
            reasons: reasons,
        };
    }

    var OptimizelyUserContext = /** @class */ (function () {
        function OptimizelyUserContext(_a) {
            var optimizely = _a.optimizely, userId = _a.userId, attributes = _a.attributes, _b = _a.shouldIdentifyUser, shouldIdentifyUser = _b === void 0 ? true : _b;
            var _this = this;
            var _c;
            this._qualifiedSegments = null;
            this.optimizely = optimizely;
            this.userId = userId;
            this.attributes = (_c = __assign({}, attributes)) !== null && _c !== void 0 ? _c : {};
            this.forcedDecisionsMap = {};
            if (shouldIdentifyUser) {
                this.optimizely.onReady().then(function (_a) {
                    var success = _a.success;
                    if (success) {
                        _this.identifyUser();
                    }
                });
            }
        }
        /**
         * On user context instantiation, fire event to attempt to identify user to ODP.
         * Note: This fails if ODP is not enabled.
         */
        OptimizelyUserContext.prototype.identifyUser = function () {
            this.optimizely.identifyUser(this.userId);
        };
        /**
         * Sets an attribute for a given key.
         * @param     {string}                     key         An attribute key
         * @param     {any}                        value       An attribute value
         */
        OptimizelyUserContext.prototype.setAttribute = function (key, value) {
            this.attributes[key] = value;
        };
        OptimizelyUserContext.prototype.getUserId = function () {
            return this.userId;
        };
        OptimizelyUserContext.prototype.getAttributes = function () {
            return __assign({}, this.attributes);
        };
        OptimizelyUserContext.prototype.getOptimizely = function () {
            return this.optimizely;
        };
        Object.defineProperty(OptimizelyUserContext.prototype, "qualifiedSegments", {
            get: function () {
                return this._qualifiedSegments;
            },
            set: function (qualifiedSegments) {
                this._qualifiedSegments = qualifiedSegments;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns a decision result for a given flag key and a user context, which contains all data required to deliver the flag.
         * If the SDK finds an error, it will return a decision with null for variationKey. The decision will include an error message in reasons.
         * @param     {string}                     key         A flag key for which a decision will be made.
         * @param     {OptimizelyDecideOption}     options     An array of options for decision-making.
         * @return    {OptimizelyDecision}                     A decision result.
         */
        OptimizelyUserContext.prototype.decide = function (key, options) {
            if (options === void 0) { options = []; }
            return this.optimizely.decide(this.cloneUserContext(), key, options);
        };
        /**
         * Returns an object of decision results for multiple flag keys and a user context.
         * If the SDK finds an error for a key, the response will include a decision for the key showing reasons for the error.
         * The SDK will always return key-mapped decisions. When it cannot process requests, it will return an empty map after logging the errors.
         * @param     {string[]}                   keys        An array of flag keys for which decisions will be made.
         * @param     {OptimizelyDecideOption[]}   options     An array of options for decision-making.
         * @return    {[key: string]: OptimizelyDecision}      An object of decision results mapped by flag keys.
         */
        OptimizelyUserContext.prototype.decideForKeys = function (keys, options) {
            if (options === void 0) { options = []; }
            return this.optimizely.decideForKeys(this.cloneUserContext(), keys, options);
        };
        /**
         * Returns an object of decision results for all active flag keys.
         * @param     {OptimizelyDecideOption[]}   options     An array of options for decision-making.
         * @return    {[key: string]: OptimizelyDecision}      An object of all decision results mapped by flag keys.
         */
        OptimizelyUserContext.prototype.decideAll = function (options) {
            if (options === void 0) { options = []; }
            return this.optimizely.decideAll(this.cloneUserContext(), options);
        };
        /**
         * Tracks an event.
         * @param     {string}                     eventName The event name.
         * @param     {EventTags}                  eventTags An optional map of event tag names to event tag values.
         */
        OptimizelyUserContext.prototype.trackEvent = function (eventName, eventTags) {
            this.optimizely.track(eventName, this.userId, this.attributes, eventTags);
        };
        /**
         * Sets the forced decision for specified optimizely decision context.
         * @param     {OptimizelyDecisionContext}   context      OptimizelyDecisionContext containing flagKey and optional ruleKey.
         * @param     {OptimizelyForcedDecision}    decision     OptimizelyForcedDecision containing forced variation key.
         * @return    {boolean}                     true if the forced decision has been set successfully.
         */
        OptimizelyUserContext.prototype.setForcedDecision = function (context, decision) {
            var _a;
            var flagKey = context.flagKey;
            var ruleKey = (_a = context.ruleKey) !== null && _a !== void 0 ? _a : CONTROL_ATTRIBUTES.FORCED_DECISION_NULL_RULE_KEY;
            var variationKey = decision.variationKey;
            var forcedDecision = { variationKey: variationKey };
            if (!this.forcedDecisionsMap[flagKey]) {
                this.forcedDecisionsMap[flagKey] = {};
            }
            this.forcedDecisionsMap[flagKey][ruleKey] = forcedDecision;
            return true;
        };
        /**
         * Returns the forced decision for specified optimizely decision context.
         * @param     {OptimizelyDecisionContext}  context  OptimizelyDecisionContext containing flagKey and optional ruleKey.
         * @return    {OptimizelyForcedDecision|null}       OptimizelyForcedDecision for specified context if exists or null.
         */
        OptimizelyUserContext.prototype.getForcedDecision = function (context) {
            return this.findForcedDecision(context);
        };
        /**
         * Removes the forced decision for specified optimizely decision context.
         * @param     {OptimizelyDecisionContext}  context  OptimizelyDecisionContext containing flagKey and optional ruleKey.
         * @return    {boolean}                    true if the forced decision has been removed successfully
         */
        OptimizelyUserContext.prototype.removeForcedDecision = function (context) {
            var _a;
            var ruleKey = (_a = context.ruleKey) !== null && _a !== void 0 ? _a : CONTROL_ATTRIBUTES.FORCED_DECISION_NULL_RULE_KEY;
            var flagKey = context.flagKey;
            var isForcedDecisionRemoved = false;
            if (this.forcedDecisionsMap.hasOwnProperty(flagKey)) {
                var forcedDecisionByRuleKey = this.forcedDecisionsMap[flagKey];
                if (forcedDecisionByRuleKey.hasOwnProperty(ruleKey)) {
                    delete this.forcedDecisionsMap[flagKey][ruleKey];
                    isForcedDecisionRemoved = true;
                }
                if (Object.keys(this.forcedDecisionsMap[flagKey]).length === 0) {
                    delete this.forcedDecisionsMap[flagKey];
                }
            }
            return isForcedDecisionRemoved;
        };
        /**
         * Removes all forced decisions bound to this user context.
         * @return    {boolean}                    true if the forced decision has been removed successfully
         */
        OptimizelyUserContext.prototype.removeAllForcedDecisions = function () {
            this.forcedDecisionsMap = {};
            return true;
        };
        /**
         * Finds a forced decision in forcedDecisionsMap for provided optimizely decision context.
         * @param     {OptimizelyDecisionContext}     context  OptimizelyDecisionContext containing flagKey and optional ruleKey.
         * @return    {OptimizelyForcedDecision|null}          OptimizelyForcedDecision for specified context if exists or null.
         */
        OptimizelyUserContext.prototype.findForcedDecision = function (context) {
            var _a;
            var variationKey;
            var validRuleKey = (_a = context.ruleKey) !== null && _a !== void 0 ? _a : CONTROL_ATTRIBUTES.FORCED_DECISION_NULL_RULE_KEY;
            var flagKey = context.flagKey;
            if (this.forcedDecisionsMap.hasOwnProperty(context.flagKey)) {
                var forcedDecisionByRuleKey = this.forcedDecisionsMap[flagKey];
                if (forcedDecisionByRuleKey.hasOwnProperty(validRuleKey)) {
                    variationKey = forcedDecisionByRuleKey[validRuleKey].variationKey;
                    return { variationKey: variationKey };
                }
            }
            return null;
        };
        OptimizelyUserContext.prototype.cloneUserContext = function () {
            var userContext = new OptimizelyUserContext({
                shouldIdentifyUser: false,
                optimizely: this.getOptimizely(),
                userId: this.getUserId(),
                attributes: this.getAttributes(),
            });
            if (Object.keys(this.forcedDecisionsMap).length > 0) {
                userContext.forcedDecisionsMap = __assign({}, this.forcedDecisionsMap);
            }
            userContext._qualifiedSegments = this._qualifiedSegments;
            return userContext;
        };
        /**
         * Fetches a target user's list of qualified segments filtered by any given segment options and stores in qualifiedSegments.
         * @param {OptimizelySegmentOption[]} options   (Optional) List of segment options used to filter qualified segment results.
         * @returns Boolean representing if segments were populated.
         */
        OptimizelyUserContext.prototype.fetchQualifiedSegments = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var segments;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.optimizely.fetchQualifiedSegments(this.userId, options)];
                        case 1:
                            segments = _a.sent();
                            this.qualifiedSegments = segments;
                            return [2 /*return*/, segments !== null];
                    }
                });
            });
        };
        /**
         * Returns a boolean representing if a user is qualified for a particular segment.
         * @param   {string}  segment   Target segment to be evaluated for user qualification.
         * @returns {boolean}           Boolean representing if a user qualified for the passed in segment.
         */
        OptimizelyUserContext.prototype.isQualifiedFor = function (segment) {
            if (!this._qualifiedSegments) {
                return false;
            }
            return this._qualifiedSegments.indexOf(segment) > -1;
        };
        return OptimizelyUserContext;
    }());

    /****************************************************************************
     * Copyright 2018, 2021, Optimizely, Inc. and contributors                  *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    http://www.apache.org/licenses/LICENSE-2.0                            *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    var AND_CONDITION = 'and';
    var OR_CONDITION = 'or';
    var NOT_CONDITION = 'not';
    var DEFAULT_OPERATOR_TYPES = [AND_CONDITION, OR_CONDITION, NOT_CONDITION];
    /**
     * Top level method to evaluate conditions
     * @param  {ConditionTree<Leaf>}    conditions      Nested array of and/or conditions, or a single leaf
     *                                                  condition value of any type
     *                                                  Example: ['and', '0', ['or', '1', '2']]
     * @param  {LeafEvaluator<Leaf>}    leafEvaluator   Function which will be called to evaluate leaf condition
     *                                                  values
     * @return {?boolean}                               Result of evaluating the conditions using the operator
     *                                                  rules and the leaf evaluator. A return value of null
     *                                                  indicates that the conditions are invalid or unable to be
     *                                                  evaluated.
     */
    function evaluate(conditions, leafEvaluator) {
        if (Array.isArray(conditions)) {
            var firstOperator = conditions[0];
            var restOfConditions = conditions.slice(1);
            if (typeof firstOperator === 'string' && DEFAULT_OPERATOR_TYPES.indexOf(firstOperator) === -1) {
                // Operator to apply is not explicit - assume 'or'
                firstOperator = OR_CONDITION;
                restOfConditions = conditions;
            }
            switch (firstOperator) {
                case AND_CONDITION:
                    return andEvaluator(restOfConditions, leafEvaluator);
                case NOT_CONDITION:
                    return notEvaluator(restOfConditions, leafEvaluator);
                default:
                    // firstOperator is OR_CONDITION
                    return orEvaluator(restOfConditions, leafEvaluator);
            }
        }
        var leafCondition = conditions;
        return leafEvaluator(leafCondition);
    }
    /**
     * Evaluates an array of conditions as if the evaluator had been applied
     * to each entry and the results AND-ed together.
     * @param  {unknown[]}             conditions      Array of conditions ex: [operand_1, operand_2]
     * @param  {LeafEvaluator<Leaf>}   leafEvaluator   Function which will be called to evaluate leaf condition values
     * @return {?boolean}                              Result of evaluating the conditions. A return value of null
     *                                                 indicates that the conditions are invalid or unable to be
     *                                                 evaluated.
     */
    function andEvaluator(conditions, leafEvaluator) {
        var sawNullResult = false;
        if (Array.isArray(conditions)) {
            for (var i = 0; i < conditions.length; i++) {
                var conditionResult = evaluate(conditions[i], leafEvaluator);
                if (conditionResult === false) {
                    return false;
                }
                if (conditionResult === null) {
                    sawNullResult = true;
                }
            }
            return sawNullResult ? null : true;
        }
        return null;
    }
    /**
     * Evaluates an array of conditions as if the evaluator had been applied
     * to a single entry and NOT was applied to the result.
     * @param  {unknown[]}             conditions      Array of conditions ex: [operand_1]
     * @param  {LeafEvaluator<Leaf>}   leafEvaluator   Function which will be called to evaluate leaf condition values
     * @return {?boolean}                              Result of evaluating the conditions. A return value of null
     *                                                 indicates that the conditions are invalid or unable to be
     *                                                 evaluated.
     */
    function notEvaluator(conditions, leafEvaluator) {
        if (Array.isArray(conditions) && conditions.length > 0) {
            var result = evaluate(conditions[0], leafEvaluator);
            return result === null ? null : !result;
        }
        return null;
    }
    /**
     * Evaluates an array of conditions as if the evaluator had been applied
     * to each entry and the results OR-ed together.
     * @param  {unknown[]}             conditions      Array of conditions ex: [operand_1, operand_2]
     * @param  {LeafEvaluator<Leaf>}   leafEvaluator   Function which will be called to evaluate leaf condition values
     * @return {?boolean}                              Result of evaluating the conditions. A return value of null
     *                                                 indicates that the conditions are invalid or unable to be
     *                                                 evaluated.
     */
    function orEvaluator(conditions, leafEvaluator) {
        var sawNullResult = false;
        if (Array.isArray(conditions)) {
            for (var i = 0; i < conditions.length; i++) {
                var conditionResult = evaluate(conditions[i], leafEvaluator);
                if (conditionResult === true) {
                    return true;
                }
                if (conditionResult === null) {
                    sawNullResult = true;
                }
            }
            return sawNullResult ? null : false;
        }
        return null;
    }

    /**
     * The OptimizelyConfig class
     * @param {ProjectConfig} configObj
     * @param {string}        datafile
     */
    var OptimizelyConfig = /** @class */ (function () {
        function OptimizelyConfig(configObj, datafile, logger) {
            var _a, _b;
            this.sdkKey = (_a = configObj.sdkKey) !== null && _a !== void 0 ? _a : '';
            this.environmentKey = (_b = configObj.environmentKey) !== null && _b !== void 0 ? _b : '';
            this.attributes = configObj.attributes;
            this.audiences = OptimizelyConfig.getAudiences(configObj);
            this.events = configObj.events;
            this.revision = configObj.revision;
            var featureIdVariablesMap = (configObj.featureFlags || []).reduce(function (resultMap, feature) {
                resultMap[feature.id] = feature.variables;
                return resultMap;
            }, {});
            var variableIdMap = OptimizelyConfig.getVariableIdMap(configObj);
            var _c = OptimizelyConfig.getExperimentsMap(configObj, featureIdVariablesMap, variableIdMap, logger), experimentsMapById = _c.experimentsMapById, experimentsMapByKey = _c.experimentsMapByKey;
            this.experimentsMap = experimentsMapByKey;
            this.featuresMap = OptimizelyConfig.getFeaturesMap(configObj, featureIdVariablesMap, experimentsMapById, variableIdMap);
            this.datafile = datafile;
        }
        /**
         * Get the datafile
         * @returns {string} JSON string representation of the datafile that was used to create the current config object
         */
        OptimizelyConfig.prototype.getDatafile = function () {
            return this.datafile;
        };
        /**
         * Get Unique audiences list with typedAudiences as priority
         * @param       {ProjectConfig}              configObj
         * @returns     {OptimizelyAudience[]}       Array of unique audiences
         */
        OptimizelyConfig.getAudiences = function (configObj) {
            var audiences = [];
            var typedAudienceIds = [];
            (configObj.typedAudiences || []).forEach(function (typedAudience) {
                audiences.push({
                    id: typedAudience.id,
                    conditions: JSON.stringify(typedAudience.conditions),
                    name: typedAudience.name,
                });
                typedAudienceIds.push(typedAudience.id);
            });
            (configObj.audiences || []).forEach(function (audience) {
                if (typedAudienceIds.indexOf(audience.id) === -1 && audience.id != '$opt_dummy_audience') {
                    audiences.push({
                        id: audience.id,
                        conditions: JSON.stringify(audience.conditions),
                        name: audience.name,
                    });
                }
            });
            return audiences;
        };
        /**
         * Converts list of audience conditions to serialized audiences used in experiment
         * for examples:
         * 1. Input: ["or", "1", "2"]
         * Output: "\"us\" OR \"female\""
         * 2. Input: ["not", "1"]
         * Output: "NOT \"us\""
         * 3. Input: ["or", "1"]
         * Output: "\"us\""
         * 4. Input: ["and", ["or", "1", ["and", "2", "3"]], ["and", "11", ["or", "12", "13"]]]
         * Output: "(\"us\" OR (\"female\" AND \"adult\")) AND (\"fr\" AND (\"male\" OR \"kid\"))"
         * @param       {Array<string | string[]>}                 conditions
         * @param       {[id: string]: Audience}                   audiencesById
         * @returns     {string}                                   Serialized audiences condition string
         */
        OptimizelyConfig.getSerializedAudiences = function (conditions, audiencesById) {
            var serializedAudience = '';
            if (conditions) {
                var cond_1 = '';
                conditions.forEach(function (item) {
                    var subAudience = '';
                    // Checks if item is list of conditions means it is sub audience
                    if (item instanceof Array) {
                        subAudience = OptimizelyConfig.getSerializedAudiences(item, audiencesById);
                        subAudience = "(".concat(subAudience, ")");
                    }
                    else if (DEFAULT_OPERATOR_TYPES.indexOf(item) > -1) {
                        cond_1 = item.toUpperCase();
                    }
                    else {
                        // Checks if item is audience id
                        var audienceName = audiencesById[item] ? audiencesById[item].name : item;
                        // if audience condition is "NOT" then add "NOT" at start. Otherwise check if there is already audience id in serializedAudience then append condition between serializedAudience and item
                        if (serializedAudience || cond_1 === 'NOT') {
                            cond_1 = cond_1 === '' ? 'OR' : cond_1;
                            if (serializedAudience === '') {
                                serializedAudience = "".concat(cond_1, " \"").concat(audiencesById[item].name, "\"");
                            }
                            else {
                                serializedAudience = serializedAudience.concat(" ".concat(cond_1, " \"").concat(audienceName, "\""));
                            }
                        }
                        else {
                            serializedAudience = "\"".concat(audienceName, "\"");
                        }
                    }
                    // Checks if sub audience is empty or not
                    if (subAudience !== '') {
                        if (serializedAudience !== '' || cond_1 === 'NOT') {
                            cond_1 = cond_1 === '' ? 'OR' : cond_1;
                            if (serializedAudience === '') {
                                serializedAudience = "".concat(cond_1, " ").concat(subAudience);
                            }
                            else {
                                serializedAudience = serializedAudience.concat(" ".concat(cond_1, " ").concat(subAudience));
                            }
                        }
                        else {
                            serializedAudience = serializedAudience.concat(subAudience);
                        }
                    }
                });
            }
            return serializedAudience;
        };
        /**
         * Get serialized audience condition string for experiment
         * @param       {Experiment}                 experiment
         * @param       {ProjectConfig}              configObj
         * @returns     {string}                     Serialized audiences condition string
         */
        OptimizelyConfig.getExperimentAudiences = function (experiment, configObj) {
            if (!experiment.audienceConditions) {
                return '';
            }
            return OptimizelyConfig.getSerializedAudiences(experiment.audienceConditions, configObj.audiencesById);
        };
        /**
         * Make map of featureVariable which are associated with given feature experiment
         * @param       {FeatureVariablesMap}                 featureIdVariableMap
         * @param       {[id: string]: FeatureVariable}       variableIdMap
         * @param       {string}                              featureId
         * @param       {VariationVariable[] | undefined}     featureVariableUsages
         * @param       {boolean | undefined}                 isFeatureEnabled
         * @returns     {OptimizelyVariablesMap}              FeatureVariables mapped by key
         */
        OptimizelyConfig.mergeFeatureVariables = function (featureIdVariableMap, variableIdMap, featureId, featureVariableUsages, isFeatureEnabled) {
            var variablesMap = (featureIdVariableMap[featureId] || []).reduce(function (optlyVariablesMap, featureVariable) {
                optlyVariablesMap[featureVariable.key] = {
                    id: featureVariable.id,
                    key: featureVariable.key,
                    type: featureVariable.type,
                    value: featureVariable.defaultValue,
                };
                return optlyVariablesMap;
            }, {});
            (featureVariableUsages || []).forEach(function (featureVariableUsage) {
                var defaultVariable = variableIdMap[featureVariableUsage.id];
                var optimizelyVariable = {
                    id: featureVariableUsage.id,
                    key: defaultVariable.key,
                    type: defaultVariable.type,
                    value: isFeatureEnabled ? featureVariableUsage.value : defaultVariable.defaultValue,
                };
                variablesMap[defaultVariable.key] = optimizelyVariable;
            });
            return variablesMap;
        };
        /**
         * Gets Map of all experiment variations and variables including rollouts
         * @param       {Variation[]}                           variations
         * @param       {FeatureVariablesMap}                   featureIdVariableMap
         * @param       {{[id: string]: FeatureVariable}}       variableIdMap
         * @param       {string}                                featureId
         * @returns     {[key: string]: Variation}              Variations mapped by key
         */
        OptimizelyConfig.getVariationsMap = function (variations, featureIdVariableMap, variableIdMap, featureId) {
            var variationsMap = {};
            variationsMap = variations.reduce(function (optlyVariationsMap, variation) {
                var variablesMap = OptimizelyConfig.mergeFeatureVariables(featureIdVariableMap, variableIdMap, featureId, variation.variables, variation.featureEnabled);
                optlyVariationsMap[variation.key] = {
                    id: variation.id,
                    key: variation.key,
                    featureEnabled: variation.featureEnabled,
                    variablesMap: variablesMap,
                };
                return optlyVariationsMap;
            }, {});
            return variationsMap;
        };
        /**
         * Gets Map of FeatureVariable with respect to featureVariableId
         * @param       {ProjectConfig}                        configObj
         * @returns     {[id: string]: FeatureVariable}        FeatureVariables mapped by id
         */
        OptimizelyConfig.getVariableIdMap = function (configObj) {
            var variablesIdMap = {};
            variablesIdMap = (configObj.featureFlags || []).reduce(function (resultMap, feature) {
                feature.variables.forEach(function (variable) {
                    resultMap[variable.id] = variable;
                });
                return resultMap;
            }, {});
            return variablesIdMap;
        };
        /**
         * Gets list of rollout experiments
         * @param       {ProjectConfig}                     configObj
         * @param       {FeatureVariablesMap}               featureVariableIdMap
         * @param       {string}                            featureId
         * @param       {Experiment[]}                      experiments
         * @param       {{[id: string]: FeatureVariable}}   variableIdMap
         * @returns     {OptimizelyExperiment[]}            List of Optimizely rollout experiments
         */
        OptimizelyConfig.getDeliveryRules = function (configObj, featureVariableIdMap, featureId, experiments, variableIdMap) {
            return experiments.map(function (experiment) {
                return {
                    id: experiment.id,
                    key: experiment.key,
                    audiences: OptimizelyConfig.getExperimentAudiences(experiment, configObj),
                    variationsMap: OptimizelyConfig.getVariationsMap(experiment.variations, featureVariableIdMap, variableIdMap, featureId),
                };
            });
        };
        /**
         * Get Experiment Ids which are part of rollout
         * @param       {Rollout[]}     rollouts
         * @returns     {string[]}      Array of experiment Ids
         */
        OptimizelyConfig.getRolloutExperimentIds = function (rollouts) {
            var experimentIds = [];
            (rollouts || []).forEach(function (rollout) {
                rollout.experiments.forEach(function (e) {
                    experimentIds.push(e.id);
                });
            });
            return experimentIds;
        };
        /**
         * Get experiments mapped by their id's which are not part of a rollout
         * @param       {ProjectConfig}                           configObj
         * @param       {FeatureVariablesMap}                     featureIdVariableMap
         * @param       {{[id: string]: FeatureVariable}}         variableIdMap
         * @returns     { experimentsMapById: { [id: string]: OptimizelyExperiment }, experimentsMapByKey: OptimizelyExperimentsMap }      Experiments mapped by id and key
         */
        OptimizelyConfig.getExperimentsMap = function (configObj, featureIdVariableMap, variableIdMap, logger) {
            var rolloutExperimentIds = this.getRolloutExperimentIds(configObj.rollouts);
            var experimentsMapById = {};
            var experimentsMapByKey = {};
            var experiments = configObj.experiments || [];
            experiments.forEach(function (experiment) {
                if (rolloutExperimentIds.indexOf(experiment.id) !== -1) {
                    return;
                }
                var featureIds = configObj.experimentFeatureMap[experiment.id];
                var featureId = '';
                if (featureIds && featureIds.length > 0) {
                    featureId = featureIds[0];
                }
                var variationsMap = OptimizelyConfig.getVariationsMap(experiment.variations, featureIdVariableMap, variableIdMap, featureId.toString());
                var optimizelyExperiment = {
                    id: experiment.id,
                    key: experiment.key,
                    audiences: OptimizelyConfig.getExperimentAudiences(experiment, configObj),
                    variationsMap: variationsMap,
                };
                experimentsMapById[experiment.id] = optimizelyExperiment;
                if (experimentsMapByKey[experiment.key] && logger) {
                    logger.warn("Duplicate experiment keys found in datafile: ".concat(experiment.key));
                }
                experimentsMapByKey[experiment.key] = optimizelyExperiment;
            });
            return { experimentsMapById: experimentsMapById, experimentsMapByKey: experimentsMapByKey };
        };
        /**
         * Get experiments mapped by their keys
         * @param       {OptimizelyExperimentsMap}     experimentsMapById
         * @returns     {OptimizelyExperimentsMap}     Experiments mapped by key
         */
        OptimizelyConfig.getExperimentsKeyMap = function (experimentsMapById) {
            var experimentKeysMap = {};
            for (var id in experimentsMapById) {
                var experiment = experimentsMapById[id];
                experimentKeysMap[experiment.key] = experiment;
            }
            return experimentKeysMap;
        };
        /**
         * Gets Map of all FeatureFlags and associated experiment map inside it
         * @param       {ProjectConfig}                     configObj
         * @param       {FeatureVariablesMap}               featureVariableIdMap
         * @param       {OptimizelyExperimentsMap}          experimentsMapById
         * @param       {{[id: string]: FeatureVariable}}   variableIdMap
         * @returns     {OptimizelyFeaturesMap}             OptimizelyFeature mapped by key
         */
        OptimizelyConfig.getFeaturesMap = function (configObj, featureVariableIdMap, experimentsMapById, variableIdMap) {
            var featuresMap = {};
            configObj.featureFlags.forEach(function (featureFlag) {
                var featureExperimentMap = {};
                var experimentRules = [];
                featureFlag.experimentIds.forEach(function (experimentId) {
                    var experiment = experimentsMapById[experimentId];
                    if (experiment) {
                        featureExperimentMap[experiment.key] = experiment;
                    }
                    experimentRules.push(experimentsMapById[experimentId]);
                });
                var featureVariableMap = (featureFlag.variables || []).reduce(function (variables, variable) {
                    variables[variable.key] = {
                        id: variable.id,
                        key: variable.key,
                        type: variable.type,
                        value: variable.defaultValue,
                    };
                    return variables;
                }, {});
                var deliveryRules = [];
                var rollout = configObj.rolloutIdMap[featureFlag.rolloutId];
                if (rollout) {
                    deliveryRules = OptimizelyConfig.getDeliveryRules(configObj, featureVariableIdMap, featureFlag.id, rollout.experiments, variableIdMap);
                }
                featuresMap[featureFlag.key] = {
                    id: featureFlag.id,
                    key: featureFlag.key,
                    experimentRules: experimentRules,
                    deliveryRules: deliveryRules,
                    experimentsMap: featureExperimentMap,
                    variablesMap: featureVariableMap,
                };
            });
            return featuresMap;
        };
        return OptimizelyConfig;
    }());
    /**
     * Create an instance of OptimizelyConfig
     * @param   {ProjectConfig}             configObj
     * @param   {string}                    datafile
     * @returns {OptimizelyConfig}          An instance of OptimizelyConfig
     */
    function createOptimizelyConfig(configObj, datafile, logger) {
        return new OptimizelyConfig(configObj, datafile, logger);
    }

    /**
     * Copyright 2019-2022, 2024, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$7 = getLogger();
    var MODULE_NAME$4 = 'PROJECT_CONFIG_MANAGER';
    /**
     * Return an error message derived from a thrown value. If the thrown value is
     * an error, return the error's message property. Otherwise, return a default
     * provided by the second argument.
     * @param  {Error|null}                   maybeError
     * @param  {string}                       defaultMessage
     * @return {string}
     */
    function getErrorMessage(maybeError, defaultMessage) {
        if (maybeError instanceof Error) {
            return maybeError.message;
        }
        return defaultMessage || 'Unknown error';
    }
    /**
     * ProjectConfigManager provides project config objects via its methods
     * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is
     * responsible for parsing and validating datafiles, and converting datafile
     * string into project config objects.
     * @param {ProjectConfigManagerConfig}    config
     */
    var ProjectConfigManager = /** @class */ (function () {
        function ProjectConfigManager(config) {
            this.updateListeners = [];
            this.configObj = null;
            this.optimizelyConfigObj = null;
            this.datafileManager = null;
            try {
                this.jsonSchemaValidator = config.jsonSchemaValidator;
                if (!config.datafile && !config.sdkKey) {
                    var datafileAndSdkKeyMissingError = new Error(sprintf(ERROR_MESSAGES.DATAFILE_AND_SDK_KEY_MISSING, MODULE_NAME$4));
                    this.readyPromise = Promise.resolve({
                        success: false,
                        reason: getErrorMessage(datafileAndSdkKeyMissingError),
                    });
                    logger$7.error(datafileAndSdkKeyMissingError);
                    return;
                }
                var handleNewDatafileException = null;
                if (config.datafile) {
                    handleNewDatafileException = this.handleNewDatafile(config.datafile);
                }
                if (config.sdkKey && config.datafileManager) {
                    this.datafileManager = config.datafileManager;
                    this.datafileManager.start();
                    this.readyPromise = this.datafileManager
                        .onReady()
                        .then(this.onDatafileManagerReadyFulfill.bind(this), this.onDatafileManagerReadyReject.bind(this));
                    this.datafileManager.on('update', this.onDatafileManagerUpdate.bind(this));
                }
                else if (this.configObj) {
                    this.readyPromise = Promise.resolve({
                        success: true,
                    });
                }
                else {
                    this.readyPromise = Promise.resolve({
                        success: false,
                        reason: getErrorMessage(handleNewDatafileException, 'Invalid datafile'),
                    });
                }
            }
            catch (ex) {
                logger$7.error(ex);
                this.readyPromise = Promise.resolve({
                    success: false,
                    reason: getErrorMessage(ex, 'Error in initialize'),
                });
            }
        }
        /**
         * Respond to datafile manager's onReady promise becoming fulfilled.
         * If there are validation or parse failures using the datafile provided by
         * DatafileManager, ProjectConfigManager's ready promise is resolved with an
         * unsuccessful result. Otherwise, ProjectConfigManager updates its own project
         * config object from the new datafile, and its ready promise is resolved with a
         * successful result.
         */
        ProjectConfigManager.prototype.onDatafileManagerReadyFulfill = function () {
            if (this.datafileManager) {
                var newDatafileError = this.handleNewDatafile(this.datafileManager.get());
                if (newDatafileError) {
                    return {
                        success: false,
                        reason: getErrorMessage(newDatafileError),
                    };
                }
                return { success: true };
            }
            return {
                success: false,
                reason: getErrorMessage(null, 'Datafile manager is not provided'),
            };
        };
        /**
         * Respond to datafile manager's onReady promise becoming rejected.
         * When DatafileManager's onReady promise is rejected, there is no possibility
         * of obtaining a datafile. In this case, ProjectConfigManager's ready promise
         * is fulfilled with an unsuccessful result.
         * @param   {Error}   err
         * @returns {Object}
         */
        ProjectConfigManager.prototype.onDatafileManagerReadyReject = function (err) {
            return {
                success: false,
                reason: getErrorMessage(err, 'Failed to become ready'),
            };
        };
        /**
         * Respond to datafile manager's update event. Attempt to update own config
         * object using latest datafile from datafile manager. Call own registered
         * update listeners if successful
         */
        ProjectConfigManager.prototype.onDatafileManagerUpdate = function () {
            if (this.datafileManager) {
                this.handleNewDatafile(this.datafileManager.get());
            }
        };
        /**
         * Handle new datafile by attemping to create a new Project Config object. If successful and
         * the new config object's revision is newer than the current one, sets/updates the project config
         * and optimizely config object instance variables and returns null for the error. If unsuccessful,
         * the project config and optimizely config objects will not be updated, and the error is returned.
         * @param   {string | object}        newDatafile
         * @returns {Error|null}    error or null
         */
        // TODO[OASIS-6649]: Don't use object type
        // eslint-disable-next-line  @typescript-eslint/ban-types
        ProjectConfigManager.prototype.handleNewDatafile = function (newDatafile) {
            var _this = this;
            var _a = tryCreatingProjectConfig({
                datafile: newDatafile,
                jsonSchemaValidator: this.jsonSchemaValidator,
                logger: logger$7,
            }), configObj = _a.configObj, error = _a.error;
            if (error) {
                logger$7.error(error);
            }
            else {
                var oldRevision = this.configObj ? this.configObj.revision : 'null';
                if (configObj && oldRevision !== configObj.revision) {
                    this.configObj = configObj;
                    this.optimizelyConfigObj = null;
                    scheduleMicrotaskOrTimeout(function () {
                        _this.updateListeners.forEach(function (listener) { return listener(configObj); });
                    });
                }
            }
            return error;
        };
        /**
         * Returns the current project config object, or null if no project config object
         * is available
         * @return {ProjectConfig|null}
         */
        ProjectConfigManager.prototype.getConfig = function () {
            return this.configObj;
        };
        /**
         * Returns the optimizely config object or null
         * @return {OptimizelyConfig|null}
         */
        ProjectConfigManager.prototype.getOptimizelyConfig = function () {
            if (!this.optimizelyConfigObj && this.configObj) {
                this.optimizelyConfigObj = createOptimizelyConfig(this.configObj, toDatafile(this.configObj), logger$7);
            }
            return this.optimizelyConfigObj;
        };
        /**
         * Returns a Promise that fulfills when this ProjectConfigManager is ready to
         * use (meaning it has a valid project config object), or has failed to become
         * ready.
         *
         * Failure can be caused by the following:
         * - At least one of sdkKey or datafile is not provided in the constructor argument
         * - The provided datafile was invalid
         * - The datafile provided by the datafile manager was invalid
         * - The datafile manager failed to fetch a datafile
         *
         * The returned Promise is fulfilled with a result object containing these
         * properties:
         *    - success (boolean): True if this instance is ready to use with a valid
         *                         project config object, or false if it failed to
         *                         become ready
         *    - reason (string=):  If success is false, this is a string property with
         *                         an explanatory message.
         * @return {Promise}
         */
        ProjectConfigManager.prototype.onReady = function () {
            return this.readyPromise;
        };
        /**
         * Add a listener for project config updates. The listener will be called
         * whenever this instance has a new project config object available.
         * Returns a dispose function that removes the subscription
         * @param  {Function} listener
         * @return {Function}
         */
        ProjectConfigManager.prototype.onUpdate = function (listener) {
            var _this = this;
            this.updateListeners.push(listener);
            return function () {
                var index = _this.updateListeners.indexOf(listener);
                if (index > -1) {
                    _this.updateListeners.splice(index, 1);
                }
            };
        };
        /**
         * Stop the internal datafile manager and remove all update listeners
         */
        ProjectConfigManager.prototype.stop = function () {
            if (this.datafileManager) {
                this.datafileManager.stop();
            }
            this.updateListeners = [];
        };
        return ProjectConfigManager;
    }());
    function createProjectConfigManager(config) {
        return new ProjectConfigManager(config);
    }

    var murmurhash = createCommonjsModule(function (module) {
    (function(){

      const createBuffer = (val) => new TextEncoder().encode(val);

      /**
       * JS Implementation of MurmurHash2
       *
       * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
       * @see http://github.com/garycourt/murmurhash-js
       * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
       * @see http://sites.google.com/site/murmurhash/
       *
       * @param {Uint8Array | string} str ASCII only
       * @param {number} seed Positive integer only
       * @return {number} 32-bit positive integer hash
       */
      function MurmurHashV2(str, seed) {
        if (typeof str === 'string') str = createBuffer(str);
        let
          l = str.length,
          h = seed ^ l,
          i = 0,
          k;

        while (l >= 4) {
          k =
            ((str[i] & 0xff)) |
            ((str[++i] & 0xff) << 8) |
            ((str[++i] & 0xff) << 16) |
            ((str[++i] & 0xff) << 24);

          k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));
          k ^= k >>> 24;
          k = (((k & 0xffff) * 0x5bd1e995) + ((((k >>> 16) * 0x5bd1e995) & 0xffff) << 16));

        h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16)) ^ k;

          l -= 4;
          ++i;
        }

        switch (l) {
        case 3: h ^= (str[i + 2] & 0xff) << 16;
        case 2: h ^= (str[i + 1] & 0xff) << 8;
        case 1: h ^= (str[i] & 0xff);
                h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
        }

        h ^= h >>> 13;
        h = (((h & 0xffff) * 0x5bd1e995) + ((((h >>> 16) * 0x5bd1e995) & 0xffff) << 16));
        h ^= h >>> 15;

        return h >>> 0;
      }
      /*
       * JS Implementation of MurmurHash3 (r136) (as of May 20, 2011)
       *
       * @author <a href="mailto:gary.court@gmail.com">Gary Court</a>
       * @see http://github.com/garycourt/murmurhash-js
       * @author <a href="mailto:aappleby@gmail.com">Austin Appleby</a>
       * @see http://sites.google.com/site/murmurhash/
       *
       * @param {Uint8Array | string} key ASCII only
       * @param {number} seed Positive integer only
       * @return {number} 32-bit positive integer hash
       */
      function MurmurHashV3(key, seed) {
        if (typeof key === 'string') key = createBuffer(key);

        let remainder, bytes, h1, h1b, c1, c2, k1, i;

        remainder = key.length & 3; // key.length % 4
        bytes = key.length - remainder;
        h1 = seed;
        c1 = 0xcc9e2d51;
        c2 = 0x1b873593;
        i = 0;

        while (i < bytes) {
            k1 =
              ((key[i] & 0xff)) |
              ((key[++i] & 0xff) << 8) |
              ((key[++i] & 0xff) << 16) |
              ((key[++i] & 0xff) << 24);
          ++i;

          k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
          k1 = (k1 << 15) | (k1 >>> 17);
          k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

          h1 ^= k1;
              h1 = (h1 << 13) | (h1 >>> 19);
          h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
          h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
        }

        k1 = 0;

        switch (remainder) {
          case 3: k1 ^= (key[i + 2] & 0xff) << 16;
          case 2: k1 ^= (key[i + 1] & 0xff) << 8;
          case 1: k1 ^= (key[i] & 0xff);

          k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
          k1 = (k1 << 15) | (k1 >>> 17);
          k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
          h1 ^= k1;
        }

        h1 ^= key.length;

        h1 ^= h1 >>> 16;
        h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
        h1 ^= h1 >>> 13;
        h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
        h1 ^= h1 >>> 16;

        return h1 >>> 0;
      }

      const murmur = MurmurHashV3;
      murmur.v2 = MurmurHashV2;
      murmur.v3 = MurmurHashV3;

      {
        module.exports = murmur;
      }
    }());
    });

    /**
     * Copyright 2016, 2019-2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var HASH_SEED = 1;
    var MAX_HASH_VALUE = Math.pow(2, 32);
    var MAX_TRAFFIC_VALUE = 10000;
    var MODULE_NAME$5 = 'BUCKETER';
    var RANDOM_POLICY = 'random';
    /**
     * Determines ID of variation to be shown for the given input params
     * @param  {Object}             bucketerParams
     * @param  {string}             bucketerParams.experimentId
     * @param  {string}             bucketerParams.experimentKey
     * @param  {string}             bucketerParams.userId
     * @param  {Object[]}           bucketerParams.trafficAllocationConfig
     * @param  {Array}              bucketerParams.experimentKeyMap
     * @param  {Object}             bucketerParams.groupIdMap
     * @param  {Object}             bucketerParams.variationIdMap
     * @param  {string}             bucketerParams.varationIdMap[].key
     * @param  {Object}             bucketerParams.logger
     * @param  {string}             bucketerParams.bucketingId
     * @return {Object}             DecisionResponse                         DecisionResponse containing variation ID that user has been bucketed into,
     *                                                                       null if user is not bucketed into any experiment and the decide reasons.
     */
    var bucket = function (bucketerParams) {
        var decideReasons = [];
        // Check if user is in a random group; if so, check if user is bucketed into a specific experiment
        var experiment = bucketerParams.experimentIdMap[bucketerParams.experimentId];
        var groupId = experiment['groupId'];
        if (groupId) {
            var group = bucketerParams.groupIdMap[groupId];
            if (!group) {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_GROUP_ID, MODULE_NAME$5, groupId));
            }
            if (group.policy === RANDOM_POLICY) {
                var bucketedExperimentId = bucketUserIntoExperiment(group, bucketerParams.bucketingId, bucketerParams.userId, bucketerParams.logger);
                // Return if user is not bucketed into any experiment
                if (bucketedExperimentId === null) {
                    bucketerParams.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT, MODULE_NAME$5, bucketerParams.userId, groupId);
                    decideReasons.push([
                        LOG_MESSAGES.USER_NOT_IN_ANY_EXPERIMENT,
                        MODULE_NAME$5,
                        bucketerParams.userId,
                        groupId,
                    ]);
                    return {
                        result: null,
                        reasons: decideReasons,
                    };
                }
                // Return if user is bucketed into a different experiment than the one specified
                if (bucketedExperimentId !== bucketerParams.experimentId) {
                    bucketerParams.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME$5, bucketerParams.userId, bucketerParams.experimentKey, groupId);
                    decideReasons.push([
                        LOG_MESSAGES.USER_NOT_BUCKETED_INTO_EXPERIMENT_IN_GROUP,
                        MODULE_NAME$5,
                        bucketerParams.userId,
                        bucketerParams.experimentKey,
                        groupId,
                    ]);
                    return {
                        result: null,
                        reasons: decideReasons,
                    };
                }
                // Continue bucketing if user is bucketed into specified experiment      
                bucketerParams.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP, MODULE_NAME$5, bucketerParams.userId, bucketerParams.experimentKey, groupId);
                decideReasons.push([
                    LOG_MESSAGES.USER_BUCKETED_INTO_EXPERIMENT_IN_GROUP,
                    MODULE_NAME$5,
                    bucketerParams.userId,
                    bucketerParams.experimentKey,
                    groupId,
                ]);
            }
        }
        var bucketingId = "".concat(bucketerParams.bucketingId).concat(bucketerParams.experimentId);
        var bucketValue = _generateBucketValue(bucketingId);
        bucketerParams.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME$5, bucketValue, bucketerParams.userId);
        decideReasons.push([
            LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET,
            MODULE_NAME$5,
            bucketValue,
            bucketerParams.userId,
        ]);
        var entityId = _findBucket(bucketValue, bucketerParams.trafficAllocationConfig);
        if (entityId !== null) {
            if (!bucketerParams.variationIdMap[entityId]) {
                if (entityId) {
                    bucketerParams.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME$5);
                    decideReasons.push([LOG_MESSAGES.INVALID_VARIATION_ID, MODULE_NAME$5]);
                }
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
        }
        return {
            result: entityId,
            reasons: decideReasons,
        };
    };
    /**
     * Returns bucketed experiment ID to compare against experiment user is being called into
     * @param  {Group}       group        Group that experiment is in
     * @param  {string}      bucketingId  Bucketing ID
     * @param  {string}      userId       ID of user to be bucketed into experiment
     * @param  {LogHandler}  logger       Logger implementation
     * @return {string|null}              ID of experiment if user is bucketed into experiment within the group, null otherwise
     */
    var bucketUserIntoExperiment = function (group, bucketingId, userId, logger) {
        var bucketingKey = "".concat(bucketingId).concat(group.id);
        var bucketValue = _generateBucketValue(bucketingKey);
        logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_ASSIGNED_TO_EXPERIMENT_BUCKET, MODULE_NAME$5, bucketValue, userId);
        var trafficAllocationConfig = group.trafficAllocation;
        var bucketedExperimentId = _findBucket(bucketValue, trafficAllocationConfig);
        return bucketedExperimentId;
    };
    /**
     * Returns entity ID associated with bucket value
     * @param  {number}                bucketValue
     * @param  {TrafficAllocation[]}   trafficAllocationConfig
     * @param  {number}                trafficAllocationConfig[].endOfRange
     * @param  {string}                trafficAllocationConfig[].entityId
     * @return {string|null}           Entity ID for bucketing if bucket value is within traffic allocation boundaries, null otherwise
     */
    var _findBucket = function (bucketValue, trafficAllocationConfig) {
        for (var i = 0; i < trafficAllocationConfig.length; i++) {
            if (bucketValue < trafficAllocationConfig[i].endOfRange) {
                return trafficAllocationConfig[i].entityId;
            }
        }
        return null;
    };
    /**
     * Helper function to generate bucket value in half-closed interval [0, MAX_TRAFFIC_VALUE)
     * @param  {string}               bucketingKey          String value for bucketing
     * @return {number}               The generated bucket value
     * @throws                        If bucketing value is not a valid string
     */
    var _generateBucketValue = function (bucketingKey) {
        try {
            // NOTE: the mmh library already does cast the hash value as an unsigned 32bit int
            // https://github.com/perezd/node-murmurhash/blob/master/murmurhash.js#L115
            var hashValue = murmurhash.v3(bucketingKey, HASH_SEED);
            var ratio = hashValue / MAX_HASH_VALUE;
            return Math.floor(ratio * MAX_TRAFFIC_VALUE);
        }
        catch (ex) {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_BUCKETING_ID, MODULE_NAME$5, bucketingKey, ex.message));
        }
    };

    /**
     * Copyright 2020, 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MODULE_NAME$6 = 'SEMANTIC VERSION';
    var logger$8 = getLogger();
    /**
     * Evaluate if provided string is number only
     * @param  {unknown}  content
     * @return {boolean}  true if the string is number only
     *
     */
    function isNumber$1(content) {
        return /^\d+$/.test(content);
    }
    /**
     * Evaluate if provided version contains pre-release "-"
     * @param  {unknown}  version
     * @return {boolean}  true if the version contains "-" and meets condition
     *
     */
    function isPreReleaseVersion(version) {
        var preReleaseIndex = version.indexOf("-" /* VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER */);
        var buildIndex = version.indexOf("+" /* VERSION_TYPE.BUILD_VERSION_DELIMITER */);
        if (preReleaseIndex < 0) {
            return false;
        }
        if (buildIndex < 0) {
            return true;
        }
        return preReleaseIndex < buildIndex;
    }
    /**
     * Evaluate if provided version contains build "+"
     * @param  {unknown}  version
     * @return {boolean}  true if the version contains "+" and meets condition
     *
     */
    function isBuildVersion(version) {
        var preReleaseIndex = version.indexOf("-" /* VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER */);
        var buildIndex = version.indexOf("+" /* VERSION_TYPE.BUILD_VERSION_DELIMITER */);
        if (buildIndex < 0) {
            return false;
        }
        if (preReleaseIndex < 0) {
            return true;
        }
        return buildIndex < preReleaseIndex;
    }
    /**
     * check if there is any white spaces " " in version
     * @param  {unknown}  version
     * @return {boolean}  true if the version contains " "
     *
     */
    function hasWhiteSpaces(version) {
        return /\s/.test(version);
    }
    /**
     * split version in parts
     * @param  {unknown}  version
     * @return {boolean}  The array of version split into smaller parts i.e major, minor, patch etc
     *                    null if given version is in invalid format
     */
    function splitVersion(version) {
        var targetPrefix = version;
        var targetSuffix = '';
        // check that version shouldn't have white space
        if (hasWhiteSpaces(version)) {
            logger$8.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$6, version);
            return null;
        }
        //check for pre release e.g. 1.0.0-alpha where 'alpha' is a pre release
        //otherwise check for build e.g. 1.0.0+001 where 001 is a build metadata
        if (isPreReleaseVersion(version)) {
            targetPrefix = version.substring(0, version.indexOf("-" /* VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER */));
            targetSuffix = version.substring(version.indexOf("-" /* VERSION_TYPE.PRE_RELEASE_VERSION_DELIMITER */) + 1);
        }
        else if (isBuildVersion(version)) {
            targetPrefix = version.substring(0, version.indexOf("+" /* VERSION_TYPE.BUILD_VERSION_DELIMITER */));
            targetSuffix = version.substring(version.indexOf("+" /* VERSION_TYPE.BUILD_VERSION_DELIMITER */) + 1);
        }
        // check dot counts in target_prefix
        if (typeof targetPrefix !== 'string' || typeof targetSuffix !== 'string') {
            return null;
        }
        var dotCount = targetPrefix.split('.').length - 1;
        if (dotCount > 2) {
            logger$8.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$6, version);
            return null;
        }
        var targetVersionParts = targetPrefix.split('.');
        if (targetVersionParts.length != dotCount + 1) {
            logger$8.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$6, version);
            return null;
        }
        for (var _i = 0, targetVersionParts_1 = targetVersionParts; _i < targetVersionParts_1.length; _i++) {
            var part = targetVersionParts_1[_i];
            if (!isNumber$1(part)) {
                logger$8.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$6, version);
                return null;
            }
        }
        if (targetSuffix) {
            targetVersionParts.push(targetSuffix);
        }
        return targetVersionParts;
    }
    /**
     * Compare user version with condition version
     * @param  {string}  conditionsVersion
     * @param  {string}  userProvidedVersion
     * @return {number | null}  0 if user version is equal to condition version
     *                          1 if user version is greater than condition version
     *                         -1 if user version is less than condition version
     *                          null if invalid user or condition version is provided
     */
    function compareVersion(conditionsVersion, userProvidedVersion) {
        var userVersionParts = splitVersion(userProvidedVersion);
        var conditionsVersionParts = splitVersion(conditionsVersion);
        if (!userVersionParts || !conditionsVersionParts) {
            return null;
        }
        var userVersionPartsLen = userVersionParts.length;
        for (var idx = 0; idx < conditionsVersionParts.length; idx++) {
            if (userVersionPartsLen <= idx) {
                return isPreReleaseVersion(conditionsVersion) || isBuildVersion(conditionsVersion) ? 1 : -1;
            }
            else if (!isNumber$1(userVersionParts[idx])) {
                if (userVersionParts[idx] < conditionsVersionParts[idx]) {
                    return isPreReleaseVersion(conditionsVersion) && !isPreReleaseVersion(userProvidedVersion) ? 1 : -1;
                }
                else if (userVersionParts[idx] > conditionsVersionParts[idx]) {
                    return !isPreReleaseVersion(conditionsVersion) && isPreReleaseVersion(userProvidedVersion) ? -1 : 1;
                }
            }
            else {
                var userVersionPart = parseInt(userVersionParts[idx]);
                var conditionsVersionPart = parseInt(conditionsVersionParts[idx]);
                if (userVersionPart > conditionsVersionPart) {
                    return 1;
                }
                else if (userVersionPart < conditionsVersionPart) {
                    return -1;
                }
            }
        }
        // check if user version contains release and target version does not
        if (isPreReleaseVersion(userProvidedVersion) && !isPreReleaseVersion(conditionsVersion)) {
            return -1;
        }
        return 0;
    }

    /****************************************************************************
     * Copyright 2018-2019, 2020, 2022, Optimizely, Inc. and contributors              *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    http://www.apache.org/licenses/LICENSE-2.0                            *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    var MODULE_NAME$7 = 'CUSTOM_ATTRIBUTE_CONDITION_EVALUATOR';
    var logger$9 = getLogger();
    var EXACT_MATCH_TYPE = 'exact';
    var EXISTS_MATCH_TYPE = 'exists';
    var GREATER_OR_EQUAL_THAN_MATCH_TYPE = 'ge';
    var GREATER_THAN_MATCH_TYPE = 'gt';
    var LESS_OR_EQUAL_THAN_MATCH_TYPE = 'le';
    var LESS_THAN_MATCH_TYPE = 'lt';
    var SEMVER_EXACT_MATCH_TYPE = 'semver_eq';
    var SEMVER_GREATER_OR_EQUAL_THAN_MATCH_TYPE = 'semver_ge';
    var SEMVER_GREATER_THAN_MATCH_TYPE = 'semver_gt';
    var SEMVER_LESS_OR_EQUAL_THAN_MATCH_TYPE = 'semver_le';
    var SEMVER_LESS_THAN_MATCH_TYPE = 'semver_lt';
    var SUBSTRING_MATCH_TYPE = 'substring';
    var MATCH_TYPES = [
        EXACT_MATCH_TYPE,
        EXISTS_MATCH_TYPE,
        GREATER_THAN_MATCH_TYPE,
        GREATER_OR_EQUAL_THAN_MATCH_TYPE,
        LESS_THAN_MATCH_TYPE,
        LESS_OR_EQUAL_THAN_MATCH_TYPE,
        SUBSTRING_MATCH_TYPE,
        SEMVER_EXACT_MATCH_TYPE,
        SEMVER_LESS_THAN_MATCH_TYPE,
        SEMVER_LESS_OR_EQUAL_THAN_MATCH_TYPE,
        SEMVER_GREATER_THAN_MATCH_TYPE,
        SEMVER_GREATER_OR_EQUAL_THAN_MATCH_TYPE
    ];
    var EVALUATORS_BY_MATCH_TYPE = {};
    EVALUATORS_BY_MATCH_TYPE[EXACT_MATCH_TYPE] = exactEvaluator;
    EVALUATORS_BY_MATCH_TYPE[EXISTS_MATCH_TYPE] = existsEvaluator;
    EVALUATORS_BY_MATCH_TYPE[GREATER_THAN_MATCH_TYPE] = greaterThanEvaluator;
    EVALUATORS_BY_MATCH_TYPE[GREATER_OR_EQUAL_THAN_MATCH_TYPE] = greaterThanOrEqualEvaluator;
    EVALUATORS_BY_MATCH_TYPE[LESS_THAN_MATCH_TYPE] = lessThanEvaluator;
    EVALUATORS_BY_MATCH_TYPE[LESS_OR_EQUAL_THAN_MATCH_TYPE] = lessThanOrEqualEvaluator;
    EVALUATORS_BY_MATCH_TYPE[SUBSTRING_MATCH_TYPE] = substringEvaluator;
    EVALUATORS_BY_MATCH_TYPE[SEMVER_EXACT_MATCH_TYPE] = semverEqualEvaluator;
    EVALUATORS_BY_MATCH_TYPE[SEMVER_GREATER_THAN_MATCH_TYPE] = semverGreaterThanEvaluator;
    EVALUATORS_BY_MATCH_TYPE[SEMVER_GREATER_OR_EQUAL_THAN_MATCH_TYPE] = semverGreaterThanOrEqualEvaluator;
    EVALUATORS_BY_MATCH_TYPE[SEMVER_LESS_THAN_MATCH_TYPE] = semverLessThanEvaluator;
    EVALUATORS_BY_MATCH_TYPE[SEMVER_LESS_OR_EQUAL_THAN_MATCH_TYPE] = semverLessThanOrEqualEvaluator;
    /**
     * Given a custom attribute audience condition and user attributes, evaluate the
     * condition against the attributes.
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @return {?boolean}               true/false if the given user attributes match/don't match the given condition,
     *                                  null if the given user attributes and condition can't be evaluated
     * TODO: Change to accept and object with named properties
     */
    function evaluate$1(condition, user) {
        var userAttributes = user.getAttributes();
        var conditionMatch = condition.match;
        if (typeof conditionMatch !== 'undefined' && MATCH_TYPES.indexOf(conditionMatch) === -1) {
            logger$9.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$7, JSON.stringify(condition));
            return null;
        }
        var attributeKey = condition.name;
        if (!userAttributes.hasOwnProperty(attributeKey) && conditionMatch != EXISTS_MATCH_TYPE) {
            logger$9.debug(LOG_MESSAGES.MISSING_ATTRIBUTE_VALUE, MODULE_NAME$7, JSON.stringify(condition), attributeKey);
            return null;
        }
        var evaluatorForMatch;
        if (!conditionMatch) {
            evaluatorForMatch = exactEvaluator;
        }
        else {
            evaluatorForMatch = EVALUATORS_BY_MATCH_TYPE[conditionMatch] || exactEvaluator;
        }
        return evaluatorForMatch(condition, user);
    }
    /**
     * Returns true if the value is valid for exact conditions. Valid values include
     * strings, booleans, and numbers that aren't NaN, -Infinity, or Infinity.
     * @param value
     * @returns {boolean}
     */
    function isValueTypeValidForExactConditions(value) {
        return typeof value === 'string' || typeof value === 'boolean' || fns.isNumber(value);
    }
    /**
     * Evaluate the given exact match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @return  {?boolean}              true if the user attribute value is equal (===) to the condition value,
     *                                  false if the user attribute value is not equal (!==) to the condition value,
     *                                  null if the condition value or user attribute value has an invalid type, or
     *                                  if there is a mismatch between the user attribute type and the condition value
     *                                  type
     */
    function exactEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var conditionValue = condition.value;
        var conditionValueType = typeof conditionValue;
        var conditionName = condition.name;
        var userValue = userAttributes[conditionName];
        var userValueType = typeof userValue;
        if (!isValueTypeValidForExactConditions(conditionValue) ||
            (fns.isNumber(conditionValue) && !fns.isSafeInteger(conditionValue))) {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$7, JSON.stringify(condition));
            return null;
        }
        if (userValue === null) {
            logger$9.debug(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$7, JSON.stringify(condition), conditionName);
            return null;
        }
        if (!isValueTypeValidForExactConditions(userValue) || conditionValueType !== userValueType) {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$7, JSON.stringify(condition), userValueType, conditionName);
            return null;
        }
        if (fns.isNumber(userValue) && !fns.isSafeInteger(userValue)) {
            logger$9.warn(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$7, JSON.stringify(condition), conditionName);
            return null;
        }
        return conditionValue === userValue;
    }
    /**
     * Evaluate the given exists match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {boolean}               true if both:
     *                                    1) the user attributes have a value for the given condition, and
     *                                    2) the user attribute value is neither null nor undefined
     *                                  Returns false otherwise
     */
    function existsEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var userValue = userAttributes[condition.name];
        return typeof userValue !== 'undefined' && userValue !== null;
    }
    /**
     * Validate user and condition values
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?boolean}              true if values are valid,
     *                                  false if values are not valid
     */
    function validateValuesForNumericCondition(condition, user) {
        var userAttributes = user.getAttributes();
        var conditionName = condition.name;
        var userValue = userAttributes[conditionName];
        var userValueType = typeof userValue;
        var conditionValue = condition.value;
        if (conditionValue === null || !fns.isSafeInteger(conditionValue)) {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$7, JSON.stringify(condition));
            return false;
        }
        if (userValue === null) {
            logger$9.debug(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$7, JSON.stringify(condition), conditionName);
            return false;
        }
        if (!fns.isNumber(userValue)) {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$7, JSON.stringify(condition), userValueType, conditionName);
            return false;
        }
        if (!fns.isSafeInteger(userValue)) {
            logger$9.warn(LOG_MESSAGES.OUT_OF_BOUNDS, MODULE_NAME$7, JSON.stringify(condition), conditionName);
            return false;
        }
        return true;
    }
    /**
     * Evaluate the given greater than match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?boolean}              true if the user attribute value is greater than the condition value,
     *                                  false if the user attribute value is less than or equal to the condition value,
     *                                  null if the condition value isn't a number or the user attribute value
     *                                  isn't a number
     */
    function greaterThanEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var userValue = userAttributes[condition.name];
        var conditionValue = condition.value;
        if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {
            return null;
        }
        return userValue > conditionValue;
    }
    /**
     * Evaluate the given greater or equal than match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute value is greater or equal than the condition value,
     *                                  false if the user attribute value is less than to the condition value,
     *                                  null if the condition value isn't a number or the user attribute value isn't a
     *                                  number
     */
    function greaterThanOrEqualEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var userValue = userAttributes[condition.name];
        var conditionValue = condition.value;
        if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {
            return null;
        }
        return userValue >= conditionValue;
    }
    /**
     * Evaluate the given less than match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?boolean}              true if the user attribute value is less than the condition value,
     *                                  false if the user attribute value is greater than or equal to the condition value,
     *                                  null if the condition value isn't a number or the user attribute value isn't a
     *                                  number
     */
    function lessThanEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var userValue = userAttributes[condition.name];
        var conditionValue = condition.value;
        if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {
            return null;
        }
        return userValue < conditionValue;
    }
    /**
     * Evaluate the given less or equal than match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute value is less or equal than the condition value,
     *                                  false if the user attribute value is greater than to the condition value,
     *                                  null if the condition value isn't a number or the user attribute value isn't a
     *                                  number
     */
    function lessThanOrEqualEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var userValue = userAttributes[condition.name];
        var conditionValue = condition.value;
        if (!validateValuesForNumericCondition(condition, user) || conditionValue === null) {
            return null;
        }
        return userValue <= conditionValue;
    }
    /**
     * Evaluate the given substring match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the condition value is a substring of the user attribute value,
     *                                  false if the condition value is not a substring of the user attribute value,
     *                                  null if the condition value isn't a string or the user attribute value
     *                                  isn't a string
     */
    function substringEvaluator(condition, user) {
        var userAttributes = user.getAttributes();
        var conditionName = condition.name;
        var userValue = userAttributes[condition.name];
        var userValueType = typeof userValue;
        var conditionValue = condition.value;
        if (typeof conditionValue !== 'string') {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$7, JSON.stringify(condition));
            return null;
        }
        if (userValue === null) {
            logger$9.debug(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$7, JSON.stringify(condition), conditionName);
            return null;
        }
        if (typeof userValue !== 'string') {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$7, JSON.stringify(condition), userValueType, conditionName);
            return null;
        }
        return userValue.indexOf(conditionValue) !== -1;
    }
    /**
     * Evaluate the given semantic version match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?number}               returns compareVersion result
     *                                  null if the user attribute version has an invalid type
     */
    function evaluateSemanticVersion(condition, user) {
        var userAttributes = user.getAttributes();
        var conditionName = condition.name;
        var userValue = userAttributes[conditionName];
        var userValueType = typeof userValue;
        var conditionValue = condition.value;
        if (typeof conditionValue !== 'string') {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_CONDITION_VALUE, MODULE_NAME$7, JSON.stringify(condition));
            return null;
        }
        if (userValue === null) {
            logger$9.debug(LOG_MESSAGES.UNEXPECTED_TYPE_NULL, MODULE_NAME$7, JSON.stringify(condition), conditionName);
            return null;
        }
        if (typeof userValue !== 'string') {
            logger$9.warn(LOG_MESSAGES.UNEXPECTED_TYPE, MODULE_NAME$7, JSON.stringify(condition), userValueType, conditionName);
            return null;
        }
        return compareVersion(conditionValue, userValue);
    }
    /**
     * Evaluate the given version match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute version is equal (===) to the condition version,
     *                                  false if the user attribute version is not equal (!==) to the condition version,
     *                                  null if the user attribute version has an invalid type
     */
    function semverEqualEvaluator(condition, user) {
        var result = evaluateSemanticVersion(condition, user);
        if (result === null) {
            return null;
        }
        return result === 0;
    }
    /**
     * Evaluate the given version match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute version is greater (>) than the condition version,
     *                                  false if the user attribute version is not greater than the condition version,
     *                                  null if the user attribute version has an invalid type
     */
    function semverGreaterThanEvaluator(condition, user) {
        var result = evaluateSemanticVersion(condition, user);
        if (result === null) {
            return null;
        }
        return result > 0;
    }
    /**
     * Evaluate the given version match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute version is less (<) than the condition version,
     *                                  false if the user attribute version is not less than the condition version,
     *                                  null if the user attribute version has an invalid type
     */
    function semverLessThanEvaluator(condition, user) {
        var result = evaluateSemanticVersion(condition, user);
        if (result === null) {
            return null;
        }
        return result < 0;
    }
    /**
     * Evaluate the given version match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute version is greater than or equal (>=) to the condition version,
     *                                  false if the user attribute version is not greater than or equal to the condition version,
     *                                  null if the user attribute version has an invalid type
     */
    function semverGreaterThanOrEqualEvaluator(condition, user) {
        var result = evaluateSemanticVersion(condition, user);
        if (result === null) {
            return null;
        }
        return result >= 0;
    }
    /**
     * Evaluate the given version match condition for the given user attributes
     * @param  {Condition}              condition
     * @param  {OptimizelyUserContext}  user
     * @returns {?Boolean}              true if the user attribute version is less than or equal (<=) to the condition version,
     *                                  false if the user attribute version is not less than or equal to the condition version,
     *                                  null if the user attribute version has an invalid type
     */
    function semverLessThanOrEqualEvaluator(condition, user) {
        var result = evaluateSemanticVersion(condition, user);
        if (result === null) {
            return null;
        }
        return result <= 0;
    }

    var customAttributeConditionEvaluator = /*#__PURE__*/Object.freeze({
        __proto__: null,
        evaluate: evaluate$1
    });

    /****************************************************************************
     * Copyright 2022 Optimizely, Inc. and contributors              *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    http://www.apache.org/licenses/LICENSE-2.0                            *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    var MODULE_NAME$8 = 'ODP_SEGMENT_CONDITION_EVALUATOR';
    var logger$a = getLogger();
    var QUALIFIED_MATCH_TYPE = 'qualified';
    var MATCH_TYPES$1 = [
        QUALIFIED_MATCH_TYPE,
    ];
    var EVALUATORS_BY_MATCH_TYPE$1 = {};
    EVALUATORS_BY_MATCH_TYPE$1[QUALIFIED_MATCH_TYPE] = qualifiedEvaluator;
    /**
     * Given a custom attribute audience condition and user attributes, evaluate the
     * condition against the attributes.
     * @param  {Condition}        condition
     * @param  {OptimizelyUserContext} user
     * @return {?boolean}         true/false if the given user attributes match/don't match the given condition,
     *                            null if the given user attributes and condition can't be evaluated
     * TODO: Change to accept and object with named properties
     */
    function evaluate$2(condition, user) {
        var conditionMatch = condition.match;
        if (typeof conditionMatch !== 'undefined' && MATCH_TYPES$1.indexOf(conditionMatch) === -1) {
            logger$a.warn(LOG_MESSAGES.UNKNOWN_MATCH_TYPE, MODULE_NAME$8, JSON.stringify(condition));
            return null;
        }
        var evaluator;
        if (!conditionMatch) {
            evaluator = qualifiedEvaluator;
        }
        else {
            evaluator = EVALUATORS_BY_MATCH_TYPE$1[conditionMatch] || qualifiedEvaluator;
        }
        return evaluator(condition, user);
    }
    function qualifiedEvaluator(condition, user) {
        return user.isQualifiedFor(condition.value);
    }

    var odpSegmentsConditionEvaluator = /*#__PURE__*/Object.freeze({
        __proto__: null,
        evaluate: evaluate$2
    });

    /**
     * Copyright 2016, 2018-2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$b = getLogger();
    var MODULE_NAME$9 = 'AUDIENCE_EVALUATOR';
    var AudienceEvaluator = /** @class */ (function () {
        /**
         * Construct an instance of AudienceEvaluator with given options
         * @param {Object=} UNSTABLE_conditionEvaluators     A map of condition evaluators provided by the consumer. This enables matching
         *                                                   condition types which are not supported natively by the SDK. Note that built in
         *                                                   Optimizely evaluators cannot be overridden.
         * @constructor
         */
        function AudienceEvaluator(UNSTABLE_conditionEvaluators) {
            this.typeToEvaluatorMap = fns.assign({}, UNSTABLE_conditionEvaluators, {
                custom_attribute: customAttributeConditionEvaluator,
                third_party_dimension: odpSegmentsConditionEvaluator,
            });
        }
        /**
         * Determine if the given user attributes satisfy the given audience conditions
         * @param  {Array<string|string[]}        audienceConditions    Audience conditions to match the user attributes against - can be an array
         *                                                              of audience IDs, a nested array of conditions, or a single leaf condition.
         *                                                              Examples: ["5", "6"], ["and", ["or", "1", "2"], "3"], "1"
         * @param  {[id: string]: Audience}       audiencesById         Object providing access to full audience objects for audience IDs
         *                                                              contained in audienceConditions. Keys should be audience IDs, values
         *                                                              should be full audience objects with conditions properties
         * @param  {OptimizelyUserContext}        userAttributes        User context which contains the attributes and segments which will be used in
         *                                                              determining if audience conditions are met.
         * @return {boolean}                                            true if the user attributes match the given audience conditions, false
         *                                                              otherwise
         */
        AudienceEvaluator.prototype.evaluate = function (audienceConditions, audiencesById, user) {
            var _this = this;
            // if there are no audiences, return true because that means ALL users are included in the experiment
            if (!audienceConditions || audienceConditions.length === 0) {
                return true;
            }
            var evaluateAudience = function (audienceId) {
                var audience = audiencesById[audienceId];
                if (audience) {
                    logger$b.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.EVALUATING_AUDIENCE, MODULE_NAME$9, audienceId, JSON.stringify(audience.conditions));
                    var result = evaluate(audience.conditions, _this.evaluateConditionWithUserAttributes.bind(_this, user));
                    var resultText = result === null ? 'UNKNOWN' : result.toString().toUpperCase();
                    logger$b.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT, MODULE_NAME$9, audienceId, resultText);
                    return result;
                }
                return null;
            };
            return !!evaluate(audienceConditions, evaluateAudience);
        };
        /**
         * Wrapper around evaluator.evaluate that is passed to the conditionTreeEvaluator.
         * Evaluates the condition provided given the user attributes if an evaluator has been defined for the condition type.
         * @param  {OptimizelyUserContext}  user             Optimizely user context containing attributes and segments
         * @param  {Condition}              condition        A single condition object to evaluate.
         * @return {boolean|null}                            true if the condition is satisfied, null if a matcher is not found.
         */
        AudienceEvaluator.prototype.evaluateConditionWithUserAttributes = function (user, condition) {
            var evaluator = this.typeToEvaluatorMap[condition.type];
            if (!evaluator) {
                logger$b.log(LOG_LEVEL.WARNING, LOG_MESSAGES.UNKNOWN_CONDITION_TYPE, MODULE_NAME$9, JSON.stringify(condition));
                return null;
            }
            try {
                return evaluator.evaluate(condition, user);
            }
            catch (err) {
                logger$b.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.CONDITION_EVALUATOR_ERROR, MODULE_NAME$9, condition.type, err.message);
            }
            return null;
        };
        return AudienceEvaluator;
    }());
    var createAudienceEvaluator = function (UNSTABLE_conditionEvaluators) {
        return new AudienceEvaluator(UNSTABLE_conditionEvaluators);
    };

    /**
     * Copyright 2018, 2020, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Validates provided value is a non-empty string
     * @param  {unknown}  input
     * @return {boolean}  true for non-empty string, false otherwise
     */
    function validate$3(input) {
        return typeof input === 'string' && input !== '';
    }

    var MODULE_NAME$a = 'DECISION_SERVICE';
    /**
     * Optimizely's decision service that determines which variation of an experiment the user will be allocated to.
     *
     * The decision service contains all logic around how a user decision is made. This includes all of the following (in order):
     *   1. Checking experiment status
     *   2. Checking forced bucketing
     *   3. Checking whitelisting
     *   4. Checking user profile service for past bucketing decisions (sticky bucketing)
     *   5. Checking audience targeting
     *   6. Using Murmurhash3 to bucket the user.
     *
     * @constructor
     * @param   {DecisionServiceOptions}      options
     * @returns {DecisionService}
     */
    var DecisionService = /** @class */ (function () {
        function DecisionService(options) {
            this.audienceEvaluator = createAudienceEvaluator(options.UNSTABLE_conditionEvaluators);
            this.forcedVariationMap = {};
            this.logger = options.logger;
            this.userProfileService = options.userProfileService || null;
        }
        /**
         * Gets variation where visitor will be bucketed.
         * @param  {ProjectConfig}                          configObj         The parsed project configuration object
         * @param  {Experiment}                             experiment
         * @param  {OptimizelyUserContext}                  user              A user context
         * @param  {[key: string]: boolean}                 options           Optional map of decide options
         * @return {DecisionResponse<string|null>}          DecisionResponse containing the variation the user is bucketed into
         *                                                                    and the decide reasons.
         */
        DecisionService.prototype.getVariation = function (configObj, experiment, user, options) {
            if (options === void 0) { options = {}; }
            var userId = user.getUserId();
            var attributes = user.getAttributes();
            // by default, the bucketing ID should be the user ID
            var bucketingId = this.getBucketingId(userId, attributes);
            var decideReasons = [];
            var experimentKey = experiment.key;
            if (!this.checkIfExperimentIsActive(configObj, experimentKey)) {
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME$a, experimentKey);
                decideReasons.push([LOG_MESSAGES.EXPERIMENT_NOT_RUNNING, MODULE_NAME$a, experimentKey]);
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
            var decisionForcedVariation = this.getForcedVariation(configObj, experimentKey, userId);
            decideReasons.push.apply(decideReasons, decisionForcedVariation.reasons);
            var forcedVariationKey = decisionForcedVariation.result;
            if (forcedVariationKey) {
                return {
                    result: forcedVariationKey,
                    reasons: decideReasons,
                };
            }
            var decisionWhitelistedVariation = this.getWhitelistedVariation(experiment, userId);
            decideReasons.push.apply(decideReasons, decisionWhitelistedVariation.reasons);
            var variation = decisionWhitelistedVariation.result;
            if (variation) {
                return {
                    result: variation.key,
                    reasons: decideReasons,
                };
            }
            var shouldIgnoreUPS = options[exports.OptimizelyDecideOption.IGNORE_USER_PROFILE_SERVICE];
            var experimentBucketMap = this.resolveExperimentBucketMap(userId, attributes);
            // check for sticky bucketing if decide options do not include shouldIgnoreUPS
            if (!shouldIgnoreUPS) {
                variation = this.getStoredVariation(configObj, experiment, userId, experimentBucketMap);
                if (variation) {
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.RETURNING_STORED_VARIATION, MODULE_NAME$a, variation.key, experimentKey, userId);
                    decideReasons.push([
                        LOG_MESSAGES.RETURNING_STORED_VARIATION,
                        MODULE_NAME$a,
                        variation.key,
                        experimentKey,
                        userId,
                    ]);
                    return {
                        result: variation.key,
                        reasons: decideReasons,
                    };
                }
            }
            // Perform regular targeting and bucketing
            var decisionifUserIsInAudience = this.checkIfUserIsInAudience(configObj, experiment, AUDIENCE_EVALUATION_TYPES.EXPERIMENT, user, '');
            decideReasons.push.apply(decideReasons, decisionifUserIsInAudience.reasons);
            if (!decisionifUserIsInAudience.result) {
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_NOT_IN_EXPERIMENT, MODULE_NAME$a, userId, experimentKey);
                decideReasons.push([
                    LOG_MESSAGES.USER_NOT_IN_EXPERIMENT,
                    MODULE_NAME$a,
                    userId,
                    experimentKey,
                ]);
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
            var bucketerParams = this.buildBucketerParams(configObj, experiment, bucketingId, userId);
            var decisionVariation = bucket(bucketerParams);
            decideReasons.push.apply(decideReasons, decisionVariation.reasons);
            var variationId = decisionVariation.result;
            if (variationId) {
                variation = configObj.variationIdMap[variationId];
            }
            if (!variation) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_HAS_NO_VARIATION, MODULE_NAME$a, userId, experimentKey);
                decideReasons.push([
                    LOG_MESSAGES.USER_HAS_NO_VARIATION,
                    MODULE_NAME$a,
                    userId,
                    experimentKey,
                ]);
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
            this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_HAS_VARIATION, MODULE_NAME$a, userId, variation.key, experimentKey);
            decideReasons.push([
                LOG_MESSAGES.USER_HAS_VARIATION,
                MODULE_NAME$a,
                userId,
                variation.key,
                experimentKey,
            ]);
            // persist bucketing if decide options do not include shouldIgnoreUPS
            if (!shouldIgnoreUPS) {
                this.saveUserProfile(experiment, variation, userId, experimentBucketMap);
            }
            return {
                result: variation.key,
                reasons: decideReasons,
            };
        };
        /**
         * Merges attributes from attributes[STICKY_BUCKETING_KEY] and userProfileService
         * @param  {string}               userId
         * @param  {UserAttributes}       attributes
         * @return {ExperimentBucketMap}  finalized copy of experiment_bucket_map
         */
        DecisionService.prototype.resolveExperimentBucketMap = function (userId, attributes) {
            attributes = attributes || {};
            var userProfile = this.getUserProfile(userId) || {};
            var attributeExperimentBucketMap = attributes[CONTROL_ATTRIBUTES.STICKY_BUCKETING_KEY];
            return fns.assign({}, userProfile.experiment_bucket_map, attributeExperimentBucketMap);
        };
        /**
         * Checks whether the experiment is running
         * @param  {ProjectConfig}  configObj     The parsed project configuration object
         * @param  {string}         experimentKey Key of experiment being validated
         * @return {boolean}        True if experiment is running
         */
        DecisionService.prototype.checkIfExperimentIsActive = function (configObj, experimentKey) {
            return isActive(configObj, experimentKey);
        };
        /**
         * Checks if user is whitelisted into any variation and return that variation if so
         * @param  {Experiment}                                 experiment
         * @param  {string}                                     userId
         * @return {DecisionResponse<Variation|null>}           DecisionResponse containing the forced variation if it exists
         *                                                      or user ID and the decide reasons.
         */
        DecisionService.prototype.getWhitelistedVariation = function (experiment, userId) {
            var decideReasons = [];
            if (experiment.forcedVariations && experiment.forcedVariations.hasOwnProperty(userId)) {
                var forcedVariationKey = experiment.forcedVariations[userId];
                if (experiment.variationKeyMap.hasOwnProperty(forcedVariationKey)) {
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_FORCED_IN_VARIATION, MODULE_NAME$a, userId, forcedVariationKey);
                    decideReasons.push([
                        LOG_MESSAGES.USER_FORCED_IN_VARIATION,
                        MODULE_NAME$a,
                        userId,
                        forcedVariationKey,
                    ]);
                    return {
                        result: experiment.variationKeyMap[forcedVariationKey],
                        reasons: decideReasons,
                    };
                }
                else {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.FORCED_BUCKETING_FAILED, MODULE_NAME$a, forcedVariationKey, userId);
                    decideReasons.push([
                        LOG_MESSAGES.FORCED_BUCKETING_FAILED,
                        MODULE_NAME$a,
                        forcedVariationKey,
                        userId,
                    ]);
                    return {
                        result: null,
                        reasons: decideReasons,
                    };
                }
            }
            return {
                result: null,
                reasons: decideReasons,
            };
        };
        /**
         * Checks whether the user is included in experiment audience
         * @param  {ProjectConfig}                configObj            The parsed project configuration object
         * @param  {string}                       experimentKey        Key of experiment being validated
         * @param  {string}                       evaluationAttribute  String representing experiment key or rule
         * @param  {string}                       userId               ID of user
         * @param  {UserAttributes}               attributes           Optional parameter for user's attributes
         * @param  {string}                       loggingKey           String representing experiment key or rollout rule. To be used in log messages only.
         * @return {DecisionResponse<boolean>}    DecisionResponse     DecisionResponse containing result true if user meets audience conditions and
         *                                                             the decide reasons.
         */
        DecisionService.prototype.checkIfUserIsInAudience = function (configObj, experiment, evaluationAttribute, user, loggingKey) {
            var decideReasons = [];
            var experimentAudienceConditions = getExperimentAudienceConditions(configObj, experiment.id);
            var audiencesById = getAudiencesById(configObj);
            this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED, MODULE_NAME$a, evaluationAttribute, loggingKey || experiment.key, JSON.stringify(experimentAudienceConditions));
            decideReasons.push([
                LOG_MESSAGES.EVALUATING_AUDIENCES_COMBINED,
                MODULE_NAME$a,
                evaluationAttribute,
                loggingKey || experiment.key,
                JSON.stringify(experimentAudienceConditions),
            ]);
            var result = this.audienceEvaluator.evaluate(experimentAudienceConditions, audiencesById, user);
            this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED, MODULE_NAME$a, evaluationAttribute, loggingKey || experiment.key, result.toString().toUpperCase());
            decideReasons.push([
                LOG_MESSAGES.AUDIENCE_EVALUATION_RESULT_COMBINED,
                MODULE_NAME$a,
                evaluationAttribute,
                loggingKey || experiment.key,
                result.toString().toUpperCase(),
            ]);
            return {
                result: result,
                reasons: decideReasons,
            };
        };
        /**
         * Given an experiment key and user ID, returns params used in bucketer call
         * @param  {ProjectConfig}         configObj     The parsed project configuration object
         * @param  {string}                experimentKey Experiment key used for bucketer
         * @param  {string}                bucketingId   ID to bucket user into
         * @param  {string}                userId        ID of user to be bucketed
         * @return {BucketerParams}
         */
        DecisionService.prototype.buildBucketerParams = function (configObj, experiment, bucketingId, userId) {
            return {
                bucketingId: bucketingId,
                experimentId: experiment.id,
                experimentKey: experiment.key,
                experimentIdMap: configObj.experimentIdMap,
                experimentKeyMap: configObj.experimentKeyMap,
                groupIdMap: configObj.groupIdMap,
                logger: this.logger,
                trafficAllocationConfig: getTrafficAllocation(configObj, experiment.id),
                userId: userId,
                variationIdMap: configObj.variationIdMap,
            };
        };
        /**
         * Pull the stored variation out of the experimentBucketMap for an experiment/userId
         * @param  {ProjectConfig}        configObj            The parsed project configuration object
         * @param  {Experiment}           experiment
         * @param  {string}               userId
         * @param  {ExperimentBucketMap}  experimentBucketMap  mapping experiment => { variation_id: <variationId> }
         * @return {Variation|null}       the stored variation or null if the user profile does not have one for the given experiment
         */
        DecisionService.prototype.getStoredVariation = function (configObj, experiment, userId, experimentBucketMap) {
            if (experimentBucketMap.hasOwnProperty(experiment.id)) {
                var decision = experimentBucketMap[experiment.id];
                var variationId = decision.variation_id;
                if (configObj.variationIdMap.hasOwnProperty(variationId)) {
                    return configObj.variationIdMap[decision.variation_id];
                }
                else {
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.SAVED_VARIATION_NOT_FOUND, MODULE_NAME$a, userId, variationId, experiment.key);
                }
            }
            return null;
        };
        /**
         * Get the user profile with the given user ID
         * @param  {string} userId
         * @return {UserProfile|null} the stored user profile or null if one isn't found
         */
        DecisionService.prototype.getUserProfile = function (userId) {
            var userProfile = {
                user_id: userId,
                experiment_bucket_map: {},
            };
            if (!this.userProfileService) {
                return userProfile;
            }
            try {
                return this.userProfileService.lookup(userId);
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.USER_PROFILE_LOOKUP_ERROR, MODULE_NAME$a, userId, ex.message);
            }
            return null;
        };
        /**
         * Saves the bucketing decision to the user profile
         * @param {Experiment}          experiment
         * @param {Variation}           variation
         * @param {string}              userId
         * @param {ExperimentBucketMap} experimentBucketMap
         */
        DecisionService.prototype.saveUserProfile = function (experiment, variation, userId, experimentBucketMap) {
            if (!this.userProfileService) {
                return;
            }
            try {
                experimentBucketMap[experiment.id] = {
                    variation_id: variation.id
                };
                this.userProfileService.save({
                    user_id: userId,
                    experiment_bucket_map: experimentBucketMap,
                });
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.SAVED_VARIATION, MODULE_NAME$a, variation.key, experiment.key, userId);
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.USER_PROFILE_SAVE_ERROR, MODULE_NAME$a, userId, ex.message);
            }
        };
        /**
         * Given a feature, user ID, and attributes, returns a decision response containing
         * an object representing a decision and decide reasons. If the user was bucketed into
         * a variation for the given feature and attributes, the decision object will have variation and
         * experiment properties (both objects), as well as a decisionSource property.
         * decisionSource indicates whether the decision was due to a rollout or an
         * experiment.
         * @param   {ProjectConfig}               configObj         The parsed project configuration object
         * @param   {FeatureFlag}                 feature           A feature flag object from project configuration
         * @param   {OptimizelyUserContext}       user              A user context
         * @param   {[key: string]: boolean}      options           Map of decide options
         * @return  {DecisionResponse}            DecisionResponse  DecisionResponse containing an object with experiment, variation, and decisionSource
         *                                                          properties and decide reasons. If the user was not bucketed into a variation, the variation
         *                                                          property in decision object is null.
         */
        DecisionService.prototype.getVariationForFeature = function (configObj, feature, user, options) {
            if (options === void 0) { options = {}; }
            var decideReasons = [];
            var decisionVariation = this.getVariationForFeatureExperiment(configObj, feature, user, options);
            decideReasons.push.apply(decideReasons, decisionVariation.reasons);
            var experimentDecision = decisionVariation.result;
            if (experimentDecision.variation !== null) {
                return {
                    result: experimentDecision,
                    reasons: decideReasons,
                };
            }
            var decisionRolloutVariation = this.getVariationForRollout(configObj, feature, user);
            decideReasons.push.apply(decideReasons, decisionRolloutVariation.reasons);
            var rolloutDecision = decisionRolloutVariation.result;
            var userId = user.getUserId();
            if (rolloutDecision.variation) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME$a, userId, feature.key);
                decideReasons.push([LOG_MESSAGES.USER_IN_ROLLOUT, MODULE_NAME$a, userId, feature.key]);
                return {
                    result: rolloutDecision,
                    reasons: decideReasons,
                };
            }
            this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME$a, userId, feature.key);
            decideReasons.push([LOG_MESSAGES.USER_NOT_IN_ROLLOUT, MODULE_NAME$a, userId, feature.key]);
            return {
                result: rolloutDecision,
                reasons: decideReasons,
            };
        };
        DecisionService.prototype.getVariationForFeatureExperiment = function (configObj, feature, user, options) {
            if (options === void 0) { options = {}; }
            var decideReasons = [];
            var variationKey = null;
            var decisionVariation;
            var index;
            var variationForFeatureExperiment;
            // Check if the feature flag is under an experiment and the the user is bucketed into one of these experiments
            if (feature.experimentIds.length > 0) {
                // Evaluate each experiment ID and return the first bucketed experiment variation
                for (index = 0; index < feature.experimentIds.length; index++) {
                    var experiment = getExperimentFromId(configObj, feature.experimentIds[index], this.logger);
                    if (experiment) {
                        decisionVariation = this.getVariationFromExperimentRule(configObj, feature.key, experiment, user, options);
                        decideReasons.push.apply(decideReasons, decisionVariation.reasons);
                        variationKey = decisionVariation.result;
                        if (variationKey) {
                            var variation = null;
                            variation = experiment.variationKeyMap[variationKey];
                            if (!variation) {
                                variation = getFlagVariationByKey(configObj, feature.key, variationKey);
                            }
                            variationForFeatureExperiment = {
                                experiment: experiment,
                                variation: variation,
                                decisionSource: DECISION_SOURCES.FEATURE_TEST,
                            };
                            return {
                                result: variationForFeatureExperiment,
                                reasons: decideReasons,
                            };
                        }
                    }
                }
            }
            else {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME$a, feature.key);
                decideReasons.push([LOG_MESSAGES.FEATURE_HAS_NO_EXPERIMENTS, MODULE_NAME$a, feature.key]);
            }
            variationForFeatureExperiment = {
                experiment: null,
                variation: null,
                decisionSource: DECISION_SOURCES.FEATURE_TEST,
            };
            return {
                result: variationForFeatureExperiment,
                reasons: decideReasons,
            };
        };
        DecisionService.prototype.getVariationForRollout = function (configObj, feature, user) {
            var decideReasons = [];
            var decisionObj;
            if (!feature.rolloutId) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME$a, feature.key);
                decideReasons.push([LOG_MESSAGES.NO_ROLLOUT_EXISTS, MODULE_NAME$a, feature.key]);
                decisionObj = {
                    experiment: null,
                    variation: null,
                    decisionSource: DECISION_SOURCES.ROLLOUT,
                };
                return {
                    result: decisionObj,
                    reasons: decideReasons,
                };
            }
            var rollout = configObj.rolloutIdMap[feature.rolloutId];
            if (!rollout) {
                this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.INVALID_ROLLOUT_ID, MODULE_NAME$a, feature.rolloutId, feature.key);
                decideReasons.push([ERROR_MESSAGES.INVALID_ROLLOUT_ID, MODULE_NAME$a, feature.rolloutId, feature.key]);
                decisionObj = {
                    experiment: null,
                    variation: null,
                    decisionSource: DECISION_SOURCES.ROLLOUT,
                };
                return {
                    result: decisionObj,
                    reasons: decideReasons,
                };
            }
            var rolloutRules = rollout.experiments;
            if (rolloutRules.length === 0) {
                this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME$a, feature.rolloutId);
                decideReasons.push([LOG_MESSAGES.ROLLOUT_HAS_NO_EXPERIMENTS, MODULE_NAME$a, feature.rolloutId]);
                decisionObj = {
                    experiment: null,
                    variation: null,
                    decisionSource: DECISION_SOURCES.ROLLOUT,
                };
                return {
                    result: decisionObj,
                    reasons: decideReasons,
                };
            }
            var decisionVariation;
            var skipToEveryoneElse;
            var variation;
            var rolloutRule;
            var index = 0;
            while (index < rolloutRules.length) {
                decisionVariation = this.getVariationFromDeliveryRule(configObj, feature.key, rolloutRules, index, user);
                decideReasons.push.apply(decideReasons, decisionVariation.reasons);
                variation = decisionVariation.result;
                skipToEveryoneElse = decisionVariation.skipToEveryoneElse;
                if (variation) {
                    rolloutRule = configObj.experimentIdMap[rolloutRules[index].id];
                    decisionObj = {
                        experiment: rolloutRule,
                        variation: variation,
                        decisionSource: DECISION_SOURCES.ROLLOUT
                    };
                    return {
                        result: decisionObj,
                        reasons: decideReasons,
                    };
                }
                // the last rule is special for "Everyone Else"
                index = skipToEveryoneElse ? (rolloutRules.length - 1) : (index + 1);
            }
            decisionObj = {
                experiment: null,
                variation: null,
                decisionSource: DECISION_SOURCES.ROLLOUT,
            };
            return {
                result: decisionObj,
                reasons: decideReasons,
            };
        };
        /**
         * Get bucketing Id from user attributes.
         * @param   {string}          userId
         * @param   {UserAttributes}  attributes
         * @returns {string}          Bucketing Id if it is a string type in attributes, user Id otherwise.
         */
        DecisionService.prototype.getBucketingId = function (userId, attributes) {
            var bucketingId = userId;
            // If the bucketing ID key is defined in attributes, than use that in place of the userID for the murmur hash key
            if (attributes != null &&
                typeof attributes === 'object' &&
                attributes.hasOwnProperty(CONTROL_ATTRIBUTES.BUCKETING_ID)) {
                if (typeof attributes[CONTROL_ATTRIBUTES.BUCKETING_ID] === 'string') {
                    bucketingId = String(attributes[CONTROL_ATTRIBUTES.BUCKETING_ID]);
                    this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.VALID_BUCKETING_ID, MODULE_NAME$a, bucketingId);
                }
                else {
                    this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.BUCKETING_ID_NOT_STRING, MODULE_NAME$a);
                }
            }
            return bucketingId;
        };
        /**
         * Finds a validated forced decision for specific flagKey and optional ruleKey.
         * @param     {ProjectConfig}         config               A projectConfig.
         * @param     {OptimizelyUserContext} user                 A Optimizely User Context.
         * @param     {string}                flagKey              A flagKey.
         * @param     {ruleKey}               ruleKey              A ruleKey (optional).
         * @return    {DecisionResponse<Variation|null>}  DecisionResponse object containing valid variation object and decide reasons.
         */
        DecisionService.prototype.findValidatedForcedDecision = function (config, user, flagKey, ruleKey) {
            var decideReasons = [];
            var forcedDecision = user.getForcedDecision({ flagKey: flagKey, ruleKey: ruleKey });
            var variation = null;
            var variationKey;
            var userId = user.getUserId();
            if (config && forcedDecision) {
                variationKey = forcedDecision.variationKey;
                variation = getFlagVariationByKey(config, flagKey, variationKey);
                if (variation) {
                    if (ruleKey) {
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED, variationKey, flagKey, ruleKey, userId);
                        decideReasons.push([
                            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED,
                            variationKey,
                            flagKey,
                            ruleKey,
                            userId
                        ]);
                    }
                    else {
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED, variationKey, flagKey, userId);
                        decideReasons.push([
                            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED,
                            variationKey,
                            flagKey,
                            userId
                        ]);
                    }
                }
                else {
                    if (ruleKey) {
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID, flagKey, ruleKey, userId);
                        decideReasons.push([
                            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_RULE_SPECIFIED_BUT_INVALID,
                            flagKey,
                            ruleKey,
                            userId
                        ]);
                    }
                    else {
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID, flagKey, userId);
                        decideReasons.push([
                            LOG_MESSAGES.USER_HAS_FORCED_DECISION_WITH_NO_RULE_SPECIFIED_BUT_INVALID,
                            flagKey,
                            userId
                        ]);
                    }
                }
            }
            return {
                result: variation,
                reasons: decideReasons,
            };
        };
        /**
         * Removes forced variation for given userId and experimentKey
         * @param  {string} userId         String representing the user id
         * @param  {string} experimentId   Number representing the experiment id
         * @param  {string} experimentKey  Key representing the experiment id
         * @throws If the user id is not valid or not in the forced variation map
         */
        DecisionService.prototype.removeForcedVariation = function (userId, experimentId, experimentKey) {
            if (!userId) {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_ID, MODULE_NAME$a));
            }
            if (this.forcedVariationMap.hasOwnProperty(userId)) {
                delete this.forcedVariationMap[userId][experimentId];
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.VARIATION_REMOVED_FOR_USER, MODULE_NAME$a, experimentKey, userId);
            }
            else {
                throw new Error(sprintf(ERROR_MESSAGES.USER_NOT_IN_FORCED_VARIATION, MODULE_NAME$a, userId));
            }
        };
        /**
         * Sets forced variation for given userId and experimentKey
         * @param  {string} userId        String representing the user id
         * @param  {string} experimentId  Number representing the experiment id
         * @param  {number} variationId   Number representing the variation id
         * @throws If the user id is not valid
         */
        DecisionService.prototype.setInForcedVariationMap = function (userId, experimentId, variationId) {
            if (this.forcedVariationMap.hasOwnProperty(userId)) {
                this.forcedVariationMap[userId][experimentId] = variationId;
            }
            else {
                this.forcedVariationMap[userId] = {};
                this.forcedVariationMap[userId][experimentId] = variationId;
            }
            this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_MAPPED_TO_FORCED_VARIATION, MODULE_NAME$a, variationId, experimentId, userId);
        };
        /**
         * Gets the forced variation key for the given user and experiment.
         * @param  {ProjectConfig}                  configObj         Object representing project configuration
         * @param  {string}                         experimentKey     Key for experiment.
         * @param  {string}                         userId            The user Id.
         * @return {DecisionResponse<string|null>}                    DecisionResponse containing variation which the given user and experiment
         *                                                            should be forced into and the decide reasons.
         */
        DecisionService.prototype.getForcedVariation = function (configObj, experimentKey, userId) {
            var decideReasons = [];
            var experimentToVariationMap = this.forcedVariationMap[userId];
            if (!experimentToVariationMap) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION, MODULE_NAME$a, userId);
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
            var experimentId;
            try {
                var experiment = getExperimentFromKey(configObj, experimentKey);
                if (experiment.hasOwnProperty('id')) {
                    experimentId = experiment['id'];
                }
                else {
                    // catching improperly formatted experiments
                    this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME$a, experimentKey);
                    decideReasons.push([
                        ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT,
                        MODULE_NAME$a,
                        experimentKey,
                    ]);
                    return {
                        result: null,
                        reasons: decideReasons,
                    };
                }
            }
            catch (ex) {
                // catching experiment not in datafile
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                decideReasons.push(ex.message);
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
            var variationId = experimentToVariationMap[experimentId];
            if (!variationId) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME$a, experimentKey, userId);
                return {
                    result: null,
                    reasons: decideReasons,
                };
            }
            var variationKey = getVariationKeyFromId(configObj, variationId);
            if (variationKey) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_HAS_FORCED_VARIATION, MODULE_NAME$a, variationKey, experimentKey, userId);
                decideReasons.push([
                    LOG_MESSAGES.USER_HAS_FORCED_VARIATION,
                    MODULE_NAME$a,
                    variationKey,
                    experimentKey,
                    userId,
                ]);
            }
            else {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_HAS_NO_FORCED_VARIATION_FOR_EXPERIMENT, MODULE_NAME$a, experimentKey, userId);
            }
            return {
                result: variationKey,
                reasons: decideReasons,
            };
        };
        /**
         * Sets the forced variation for a user in a given experiment
         * @param  {ProjectConfig}  configObj      Object representing project configuration
         * @param  {string}         experimentKey  Key for experiment.
         * @param  {string}         userId         The user Id.
         * @param  {string|null}    variationKey   Key for variation. If null, then clear the existing experiment-to-variation mapping
         * @return {boolean}     A boolean value that indicates if the set completed successfully.
         */
        DecisionService.prototype.setForcedVariation = function (configObj, experimentKey, userId, variationKey) {
            if (variationKey != null && !validate$3(variationKey)) {
                this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.INVALID_VARIATION_KEY, MODULE_NAME$a);
                return false;
            }
            var experimentId;
            try {
                var experiment = getExperimentFromKey(configObj, experimentKey);
                if (experiment.hasOwnProperty('id')) {
                    experimentId = experiment['id'];
                }
                else {
                    // catching improperly formatted experiments
                    this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.IMPROPERLY_FORMATTED_EXPERIMENT, MODULE_NAME$a, experimentKey);
                    return false;
                }
            }
            catch (ex) {
                // catching experiment not in datafile
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                return false;
            }
            if (variationKey == null) {
                try {
                    this.removeForcedVariation(userId, experimentId, experimentKey);
                    return true;
                }
                catch (ex) {
                    this.logger.log(LOG_LEVEL.ERROR, ex.message);
                    return false;
                }
            }
            var variationId = getVariationIdFromExperimentAndVariationKey(configObj, experimentKey, variationKey);
            if (!variationId) {
                this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.NO_VARIATION_FOR_EXPERIMENT_KEY, MODULE_NAME$a, variationKey, experimentKey);
                return false;
            }
            try {
                this.setInForcedVariationMap(userId, experimentId, variationId);
                return true;
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                return false;
            }
        };
        DecisionService.prototype.getVariationFromExperimentRule = function (configObj, flagKey, rule, user, options) {
            if (options === void 0) { options = {}; }
            var decideReasons = [];
            // check forced decision first
            var forcedDecisionResponse = this.findValidatedForcedDecision(configObj, user, flagKey, rule.key);
            decideReasons.push.apply(decideReasons, forcedDecisionResponse.reasons);
            var forcedVariation = forcedDecisionResponse.result;
            if (forcedVariation) {
                return {
                    result: forcedVariation.key,
                    reasons: decideReasons,
                };
            }
            var decisionVariation = this.getVariation(configObj, rule, user, options);
            decideReasons.push.apply(decideReasons, decisionVariation.reasons);
            var variationKey = decisionVariation.result;
            return {
                result: variationKey,
                reasons: decideReasons,
            };
        };
        DecisionService.prototype.getVariationFromDeliveryRule = function (configObj, flagKey, rules, ruleIndex, user) {
            var decideReasons = [];
            var skipToEveryoneElse = false;
            // check forced decision first
            var rule = rules[ruleIndex];
            var forcedDecisionResponse = this.findValidatedForcedDecision(configObj, user, flagKey, rule.key);
            decideReasons.push.apply(decideReasons, forcedDecisionResponse.reasons);
            var forcedVariation = forcedDecisionResponse.result;
            if (forcedVariation) {
                return {
                    result: forcedVariation,
                    reasons: decideReasons,
                    skipToEveryoneElse: skipToEveryoneElse,
                };
            }
            var userId = user.getUserId();
            var attributes = user.getAttributes();
            var bucketingId = this.getBucketingId(userId, attributes);
            var everyoneElse = ruleIndex === rules.length - 1;
            var loggingKey = everyoneElse ? "Everyone Else" : ruleIndex + 1;
            var bucketedVariation = null;
            var bucketerVariationId;
            var bucketerParams;
            var decisionVariation;
            var decisionifUserIsInAudience = this.checkIfUserIsInAudience(configObj, rule, AUDIENCE_EVALUATION_TYPES.RULE, user, loggingKey);
            decideReasons.push.apply(decideReasons, decisionifUserIsInAudience.reasons);
            if (decisionifUserIsInAudience.result) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$a, userId, loggingKey);
                decideReasons.push([
                    LOG_MESSAGES.USER_MEETS_CONDITIONS_FOR_TARGETING_RULE,
                    MODULE_NAME$a,
                    userId,
                    loggingKey
                ]);
                bucketerParams = this.buildBucketerParams(configObj, rule, bucketingId, userId);
                decisionVariation = bucket(bucketerParams);
                decideReasons.push.apply(decideReasons, decisionVariation.reasons);
                bucketerVariationId = decisionVariation.result;
                if (bucketerVariationId) {
                    bucketedVariation = getVariationFromId(configObj, bucketerVariationId);
                }
                if (bucketedVariation) {
                    this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME$a, userId, loggingKey);
                    decideReasons.push([
                        LOG_MESSAGES.USER_BUCKETED_INTO_TARGETING_RULE,
                        MODULE_NAME$a,
                        userId,
                        loggingKey
                    ]);
                }
                else if (!everyoneElse) {
                    // skip this logging for EveryoneElse since this has a message not for EveryoneElse
                    this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE, MODULE_NAME$a, userId, loggingKey);
                    decideReasons.push([
                        LOG_MESSAGES.USER_NOT_BUCKETED_INTO_TARGETING_RULE,
                        MODULE_NAME$a,
                        userId,
                        loggingKey
                    ]);
                    // skip the rest of rollout rules to the everyone-else rule if audience matches but not bucketed
                    skipToEveryoneElse = true;
                }
            }
            else {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE, MODULE_NAME$a, userId, loggingKey);
                decideReasons.push([
                    LOG_MESSAGES.USER_DOESNT_MEET_CONDITIONS_FOR_TARGETING_RULE,
                    MODULE_NAME$a,
                    userId,
                    loggingKey
                ]);
            }
            return {
                result: bucketedVariation,
                reasons: decideReasons,
                skipToEveryoneElse: skipToEveryoneElse,
            };
        };
        return DecisionService;
    }());
    /**
     * Creates an instance of the DecisionService.
     * @param  {DecisionServiceOptions}     options       Configuration options
     * @return {Object}                     An instance of the DecisionService
     */
    function createDecisionService(options) {
        return new DecisionService(options);
    }

    /**
     * Provides utility method for parsing event tag values
     */
    var MODULE_NAME$b = 'EVENT_TAG_UTILS';
    var REVENUE_EVENT_METRIC_NAME = "revenue" /* RESERVED_EVENT_KEYWORDS.REVENUE */;
    var VALUE_EVENT_METRIC_NAME = "value" /* RESERVED_EVENT_KEYWORDS.VALUE */;
    /**
     * Grab the revenue value from the event tags. "revenue" is a reserved keyword.
     * @param {EventTags} eventTags
     * @param {LoggerFacade} logger
     * @return {number|null}
     */
    function getRevenueValue(eventTags, logger) {
        var rawValue = eventTags[REVENUE_EVENT_METRIC_NAME];
        if (rawValue == null) { // null or undefined event values
            return null;
        }
        var parsedRevenueValue = typeof rawValue === 'string' ? parseInt(rawValue) : rawValue;
        if (isFinite(parsedRevenueValue)) {
            logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.PARSED_REVENUE_VALUE, MODULE_NAME$b, parsedRevenueValue);
            return parsedRevenueValue;
        }
        else { // NaN, +/- infinity values
            logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FAILED_TO_PARSE_REVENUE, MODULE_NAME$b, rawValue);
            return null;
        }
    }
    /**
     * Grab the event value from the event tags. "value" is a reserved keyword.
     * @param {EventTags} eventTags
     * @param {LoggerFacade} logger
     * @return {number|null}
     */
    function getEventValue(eventTags, logger) {
        var rawValue = eventTags[VALUE_EVENT_METRIC_NAME];
        if (rawValue == null) { // null or undefined event values
            return null;
        }
        var parsedEventValue = typeof rawValue === 'string' ? parseFloat(rawValue) : rawValue;
        if (isFinite(parsedEventValue)) {
            logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.PARSED_NUMERIC_VALUE, MODULE_NAME$b, parsedEventValue);
            return parsedEventValue;
        }
        else { // NaN, +/- infinity values
            logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FAILED_TO_PARSE_VALUE, MODULE_NAME$b, rawValue);
            return null;
        }
    }

    /**
     * Copyright 2016, 2018-2020, 2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MODULE_NAME$c = 'ATTRIBUTES_VALIDATOR';
    /**
     * Validates user's provided attributes
     * @param  {unknown}  attributes
     * @return {boolean}  true if the attributes are valid
     * @throws If the attributes are not valid
     */
    function validate$4(attributes) {
        if (typeof attributes === 'object' && !Array.isArray(attributes) && attributes !== null) {
            Object.keys(attributes).forEach(function (key) {
                if (typeof attributes[key] === 'undefined') {
                    throw new Error(sprintf(ERROR_MESSAGES.UNDEFINED_ATTRIBUTE, MODULE_NAME$c, key));
                }
            });
            return true;
        }
        else {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_ATTRIBUTES, MODULE_NAME$c));
        }
    }
    /**
     * Validates user's provided attribute
     * @param  {unknown}  attributeKey
     * @param  {unknown}  attributeValue
     * @return {boolean}  true if the attribute is valid
     */
    function isAttributeValid(attributeKey, attributeValue) {
        return (typeof attributeKey === 'string' &&
            (typeof attributeValue === 'string' ||
                typeof attributeValue === 'boolean' ||
                (fns.isNumber(attributeValue) && fns.isSafeInteger(attributeValue))));
    }

    var ACTIVATE_EVENT_KEY$1 = 'campaign_activated';
    var CUSTOM_ATTRIBUTE_FEATURE_TYPE$1 = 'custom';
    var ENDPOINT = 'https://logx.optimizely.com/v1/events';
    var HTTP_VERB = 'POST';
    /**
     * Get params which are used same in both conversion and impression events
     * @param  {ImpressionOptions|ConversionEventOptions} options    Object containing values needed to build impression/conversion event
     * @return {CommonEventParams}                                   Common params with properties that are used in both conversion and impression events
     */
    function getCommonEventParams(_a) {
        var attributes = _a.attributes, userId = _a.userId, clientEngine = _a.clientEngine, clientVersion = _a.clientVersion, configObj = _a.configObj, logger = _a.logger;
        var anonymize_ip = configObj.anonymizeIP ? configObj.anonymizeIP : false;
        var botFiltering = configObj.botFiltering;
        var visitor = {
            snapshots: [],
            visitor_id: userId,
            attributes: [],
        };
        var commonParams = {
            account_id: configObj.accountId,
            project_id: configObj.projectId,
            visitors: [visitor],
            revision: configObj.revision,
            client_name: clientEngine,
            client_version: clientVersion,
            anonymize_ip: anonymize_ip,
            enrich_decisions: true,
        };
        if (attributes) {
            // Omit attribute values that are not supported by the log endpoint.
            Object.keys(attributes || {}).forEach(function (attributeKey) {
                var attributeValue = attributes[attributeKey];
                if (isAttributeValid(attributeKey, attributeValue)) {
                    var attributeId = getAttributeId(configObj, attributeKey, logger);
                    if (attributeId) {
                        commonParams.visitors[0].attributes.push({
                            entity_id: attributeId,
                            key: attributeKey,
                            type: CUSTOM_ATTRIBUTE_FEATURE_TYPE$1,
                            value: attributeValue,
                        });
                    }
                }
            });
        }
        if (typeof botFiltering === 'boolean') {
            commonParams.visitors[0].attributes.push({
                entity_id: CONTROL_ATTRIBUTES.BOT_FILTERING,
                key: CONTROL_ATTRIBUTES.BOT_FILTERING,
                type: CUSTOM_ATTRIBUTE_FEATURE_TYPE$1,
                value: botFiltering,
            });
        }
        return commonParams;
    }
    /**
     * Creates object of params specific to impression events
     * @param  {ProjectConfig}       configObj    Object representing project configuration
     * @param  {string|null}         experimentId ID of experiment for which impression needs to be recorded
     * @param  {string|null}         variationId  ID for variation which would be presented to user
     * @param  {string}              ruleKey      Key of experiment for which impression needs to be recorded
     * @param  {string}              ruleType     Type for the decision source
     * @param  {string}              flagKey      Key for a feature flag
     * @param  {boolean}             enabled      Boolean representing if feature is enabled
     * @return {Snapshot}                         Impression event params
     */
    function getImpressionEventParams(configObj, experimentId, variationId, ruleKey, ruleType, flagKey, enabled) {
        var campaignId = experimentId ? getLayerId(configObj, experimentId) : null;
        var variationKey = variationId ? getVariationKeyFromId(configObj, variationId) : null;
        variationKey = variationKey || '';
        var impressionEventParams = {
            decisions: [
                {
                    campaign_id: campaignId,
                    experiment_id: experimentId,
                    variation_id: variationId,
                    metadata: {
                        flag_key: flagKey,
                        rule_key: ruleKey,
                        rule_type: ruleType,
                        variation_key: variationKey,
                        enabled: enabled,
                    }
                },
            ],
            events: [
                {
                    entity_id: campaignId,
                    timestamp: fns.currentTimestamp(),
                    key: ACTIVATE_EVENT_KEY$1,
                    uuid: fns.uuid(),
                },
            ],
        };
        return impressionEventParams;
    }
    /**
     * Creates object of params specific to conversion events
     * @param  {ProjectConfig} configObj                 Object representing project configuration
     * @param  {string}        eventKey                  Event key representing the event which needs to be recorded
     * @param  {LoggerFacade}  logger                    Logger object
     * @param  {EventTags}     eventTags                 Values associated with the event.
     * @return {Snapshot}                                Conversion event params
     */
    function getVisitorSnapshot(configObj, eventKey, logger, eventTags) {
        var snapshot = {
            events: [],
        };
        var eventDict = {
            entity_id: getEventId(configObj, eventKey),
            timestamp: fns.currentTimestamp(),
            uuid: fns.uuid(),
            key: eventKey,
        };
        if (eventTags) {
            var revenue = getRevenueValue(eventTags, logger);
            if (revenue !== null) {
                eventDict["revenue" /* RESERVED_EVENT_KEYWORDS.REVENUE */] = revenue;
            }
            var eventValue = getEventValue(eventTags, logger);
            if (eventValue !== null) {
                eventDict["value" /* RESERVED_EVENT_KEYWORDS.VALUE */] = eventValue;
            }
            eventDict['tags'] = eventTags;
        }
        snapshot.events.push(eventDict);
        return snapshot;
    }
    /**
     * Create impression event params to be sent to the logging endpoint
     * @param  {ImpressionOptions}    options    Object containing values needed to build impression event
     * @return {EventLoggingEndpoint}            Params to be used in impression event logging endpoint call
     */
    function getImpressionEvent(options) {
        var commonParams = getCommonEventParams(options);
        var impressionEventParams = getImpressionEventParams(options.configObj, options.experimentId, options.variationId, options.ruleKey, options.ruleType, options.flagKey, options.enabled);
        commonParams.visitors[0].snapshots.push(impressionEventParams);
        var impressionEvent = {
            httpVerb: HTTP_VERB,
            url: ENDPOINT,
            params: commonParams,
        };
        return impressionEvent;
    }
    /**
     * Create conversion event params to be sent to the logging endpoint
     * @param  {ConversionEventOptions}  options   Object containing values needed to build conversion event
     * @return {EventLoggingEndpoint}              Params to be used in conversion event logging endpoint call
     */
    function getConversionEvent(options) {
        var commonParams = getCommonEventParams(options);
        var snapshot = getVisitorSnapshot(options.configObj, options.eventKey, options.logger, options.eventTags);
        commonParams.visitors[0].snapshots = [snapshot];
        var conversionEvent = {
            httpVerb: HTTP_VERB,
            url: ENDPOINT,
            params: commonParams,
        };
        return conversionEvent;
    }

    /**
     * Copyright 2020, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Get experiment key from the provided decision object
     * @param   {DecisionObj} decisionObj       Object representing decision
     * @returns {string}                        Experiment key or empty string if experiment is null
     */
    function getExperimentKey(decisionObj) {
        var _a, _b;
        return (_b = (_a = decisionObj.experiment) === null || _a === void 0 ? void 0 : _a.key) !== null && _b !== void 0 ? _b : '';
    }
    /**
     * Get variation key from the provided decision object
     * @param   {DecisionObj} decisionObj       Object representing decision
     * @returns {string}                        Variation key or empty string if variation is null
     */
    function getVariationKey(decisionObj) {
        var _a, _b;
        return (_b = (_a = decisionObj.variation) === null || _a === void 0 ? void 0 : _a.key) !== null && _b !== void 0 ? _b : '';
    }
    /**
     * Get featureEnabled from variation in the provided decision object
     * @param   {DecisionObj} decisionObj       Object representing decision
     * @returns {boolean}                       featureEnabled boolean or false if variation is null
     */
    function getFeatureEnabledFromVariation(decisionObj) {
        var _a, _b;
        return (_b = (_a = decisionObj.variation) === null || _a === void 0 ? void 0 : _a.featureEnabled) !== null && _b !== void 0 ? _b : false;
    }
    /**
     * Get experiment id from the provided decision object
     * @param   {DecisionObj} decisionObj       Object representing decision
     * @returns {string}                        Experiment id or null if experiment is null
     */
    function getExperimentId(decisionObj) {
        var _a, _b;
        return (_b = (_a = decisionObj.experiment) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : null;
    }
    /**
     * Get variation id from the provided decision object
     * @param   {DecisionObj} decisionObj       Object representing decision
     * @returns {string}                        Variation id or null if variation is null
     */
    function getVariationId(decisionObj) {
        var _a, _b;
        return (_b = (_a = decisionObj.variation) === null || _a === void 0 ? void 0 : _a.id) !== null && _b !== void 0 ? _b : null;
    }

    /**
     * Copyright 2019-2022, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$c = getLogger('EVENT_BUILDER');
    /**
     * Creates an ImpressionEvent object from decision data
     * @param  {ImpressionConfig}  config
     * @return {ImpressionEvent}   an ImpressionEvent object
     */
    var buildImpressionEvent = function (_a) {
        var configObj = _a.configObj, decisionObj = _a.decisionObj, userId = _a.userId, flagKey = _a.flagKey, enabled = _a.enabled, userAttributes = _a.userAttributes, clientEngine = _a.clientEngine, clientVersion = _a.clientVersion;
        var ruleType = decisionObj.decisionSource;
        var experimentKey = getExperimentKey(decisionObj);
        var experimentId = getExperimentId(decisionObj);
        var variationKey = getVariationKey(decisionObj);
        var variationId = getVariationId(decisionObj);
        var layerId = experimentId !== null ? getLayerId(configObj, experimentId) : null;
        return {
            type: 'impression',
            timestamp: fns.currentTimestamp(),
            uuid: fns.uuid(),
            user: {
                id: userId,
                attributes: buildVisitorAttributes(configObj, userAttributes),
            },
            context: {
                accountId: configObj.accountId,
                projectId: configObj.projectId,
                revision: configObj.revision,
                clientName: clientEngine,
                clientVersion: clientVersion,
                anonymizeIP: configObj.anonymizeIP || false,
                botFiltering: configObj.botFiltering,
            },
            layer: {
                id: layerId,
            },
            experiment: {
                id: experimentId,
                key: experimentKey,
            },
            variation: {
                id: variationId,
                key: variationKey,
            },
            ruleKey: experimentKey,
            flagKey: flagKey,
            ruleType: ruleType,
            enabled: enabled,
        };
    };
    /**
     * Creates a ConversionEvent object from track
     * @param  {ConversionConfig} config
     * @return {ConversionEvent}  a ConversionEvent object
     */
    var buildConversionEvent = function (_a) {
        var configObj = _a.configObj, userId = _a.userId, userAttributes = _a.userAttributes, clientEngine = _a.clientEngine, clientVersion = _a.clientVersion, eventKey = _a.eventKey, eventTags = _a.eventTags;
        var eventId = getEventId(configObj, eventKey);
        var revenue = eventTags ? getRevenueValue(eventTags, logger$c) : null;
        var eventValue = eventTags ? getEventValue(eventTags, logger$c) : null;
        return {
            type: 'conversion',
            timestamp: fns.currentTimestamp(),
            uuid: fns.uuid(),
            user: {
                id: userId,
                attributes: buildVisitorAttributes(configObj, userAttributes),
            },
            context: {
                accountId: configObj.accountId,
                projectId: configObj.projectId,
                revision: configObj.revision,
                clientName: clientEngine,
                clientVersion: clientVersion,
                anonymizeIP: configObj.anonymizeIP || false,
                botFiltering: configObj.botFiltering,
            },
            event: {
                id: eventId,
                key: eventKey,
            },
            revenue: revenue,
            value: eventValue,
            tags: eventTags,
        };
    };
    function buildVisitorAttributes(configObj, attributes) {
        var builtAttributes = [];
        // Omit attribute values that are not supported by the log endpoint.
        if (attributes) {
            Object.keys(attributes || {}).forEach(function (attributeKey) {
                var attributeValue = attributes[attributeKey];
                if (isAttributeValid(attributeKey, attributeValue)) {
                    var attributeId = getAttributeId(configObj, attributeKey, logger$c);
                    if (attributeId) {
                        builtAttributes.push({
                            entityId: attributeId,
                            key: attributeKey,
                            value: attributeValue,
                        });
                    }
                }
            });
        }
        return builtAttributes;
    }

    /**
     * Copyright 2017, 2020, 2022 Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var MODULE_NAME$d = 'EVENT_TAGS_VALIDATOR';
    /**
     * Validates user's provided event tags
     * @param  {unknown}  eventTags
     * @return {boolean} true if event tags are valid
     * @throws If event tags are not valid
     */
    function validate$5(eventTags) {
        if (typeof eventTags === 'object' && !Array.isArray(eventTags) && eventTags !== null) {
            return true;
        }
        else {
            throw new Error(sprintf(ERROR_MESSAGES.INVALID_EVENT_TAGS, MODULE_NAME$d));
        }
    }

    /****************************************************************************
     * Copyright 2017, 2020, 2022, Optimizely, Inc. and contributors                  *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    http://www.apache.org/licenses/LICENSE-2.0                            *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    var MODULE_NAME$e = 'USER_PROFILE_SERVICE_VALIDATOR';
    /**
     * Validates user's provided user profile service instance
     * @param  {unknown}  userProfileServiceInstance
     * @return {boolean} true if the instance is valid
     * @throws If the instance is not valid
     */
    function validate$6(userProfileServiceInstance) {
        if (typeof userProfileServiceInstance === 'object' && userProfileServiceInstance !== null) {
            if (typeof userProfileServiceInstance['lookup'] !== 'function') {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$e, "Missing function 'lookup'"));
            }
            else if (typeof userProfileServiceInstance['save'] !== 'function') {
                throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$e, "Missing function 'save'"));
            }
            return true;
        }
        throw new Error(sprintf(ERROR_MESSAGES.INVALID_USER_PROFILE_SERVICE, MODULE_NAME$e));
    }

    /****************************************************************************
     * Copyright 2020-2024, Optimizely, Inc. and contributors                   *
     *                                                                          *
     * Licensed under the Apache License, Version 2.0 (the "License");          *
     * you may not use this file except in compliance with the License.         *
     * You may obtain a copy of the License at                                  *
     *                                                                          *
     *    https://www.apache.org/licenses/LICENSE-2.0                           *
     *                                                                          *
     * Unless required by applicable law or agreed to in writing, software      *
     * distributed under the License is distributed on an "AS IS" BASIS,        *
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *
     * See the License for the specific language governing permissions and      *
     * limitations under the License.                                           *
     ***************************************************************************/
    var MODULE_NAME$f = 'OPTIMIZELY';
    var DEFAULT_ONREADY_TIMEOUT = 30000;
    var Optimizely = /** @class */ (function () {
        function Optimizely(config) {
            var _this = this;
            var _a;
            var clientEngine = config.clientEngine;
            if (!clientEngine) {
                config.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.INVALID_CLIENT_ENGINE, MODULE_NAME$f, clientEngine);
                clientEngine = NODE_CLIENT_ENGINE;
            }
            this.clientEngine = clientEngine;
            this.clientVersion = config.clientVersion || CLIENT_VERSION;
            this.errorHandler = config.errorHandler;
            this.isOptimizelyConfigValid = config.isValidInstance;
            this.logger = config.logger;
            this.odpManager = config.odpManager;
            var decideOptionsArray = (_a = config.defaultDecideOptions) !== null && _a !== void 0 ? _a : [];
            if (!Array.isArray(decideOptionsArray)) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.INVALID_DEFAULT_DECIDE_OPTIONS, MODULE_NAME$f);
                decideOptionsArray = [];
            }
            var defaultDecideOptions = {};
            decideOptionsArray.forEach(function (option) {
                // Filter out all provided default decide options that are not in OptimizelyDecideOption[]
                if (exports.OptimizelyDecideOption[option]) {
                    defaultDecideOptions[option] = true;
                }
                else {
                    _this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.UNRECOGNIZED_DECIDE_OPTION, MODULE_NAME$f, option);
                }
            });
            this.defaultDecideOptions = defaultDecideOptions;
            this.projectConfigManager = createProjectConfigManager({
                datafile: config.datafile,
                jsonSchemaValidator: config.jsonSchemaValidator,
                sdkKey: config.sdkKey,
                datafileManager: config.datafileManager,
            });
            this.disposeOnUpdate = this.projectConfigManager.onUpdate(function (configObj) {
                _this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.UPDATED_OPTIMIZELY_CONFIG, MODULE_NAME$f, configObj.revision, configObj.projectId);
                _this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.OPTIMIZELY_CONFIG_UPDATE);
                _this.updateOdpSettings();
            });
            var projectConfigManagerReadyPromise = this.projectConfigManager.onReady();
            var userProfileService = null;
            if (config.userProfileService) {
                try {
                    if (validate$6(config.userProfileService)) {
                        userProfileService = config.userProfileService;
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.VALID_USER_PROFILE_SERVICE, MODULE_NAME$f);
                    }
                }
                catch (ex) {
                    this.logger.log(LOG_LEVEL.WARNING, ex.message);
                }
            }
            this.decisionService = createDecisionService({
                userProfileService: userProfileService,
                logger: this.logger,
                UNSTABLE_conditionEvaluators: config.UNSTABLE_conditionEvaluators,
            });
            this.notificationCenter = config.notificationCenter;
            this.eventProcessor = config.eventProcessor;
            var eventProcessorStartedPromise = this.eventProcessor.start();
            this.readyPromise = Promise.all([
                projectConfigManagerReadyPromise,
                eventProcessorStartedPromise,
                config.odpManager ? config.odpManager.onReady() : Promise.resolve(),
            ]).then(function (promiseResults) {
                // Only return status from project config promise because event processor promise does not return any status.
                return promiseResults[0];
            });
            this.readyTimeouts = {};
            this.nextReadyTimeoutId = 0;
        }
        /**
         * Returns the project configuration retrieved from projectConfigManager
         * @return {projectConfig.ProjectConfig}
         */
        Optimizely.prototype.getProjectConfig = function () {
            return this.projectConfigManager.getConfig();
        };
        /**
         * Returns a truthy value if this instance currently has a valid project config
         * object, and the initial configuration object that was passed into the
         * constructor was also valid.
         * @return {boolean}
         */
        Optimizely.prototype.isValidInstance = function () {
            return this.isOptimizelyConfigValid && !!this.projectConfigManager.getConfig();
        };
        /**
         * Buckets visitor and sends impression event to Optimizely.
         * @param  {string}             experimentKey
         * @param  {string}             userId
         * @param  {UserAttributes}     attributes
         * @return {string|null}        variation key
         */
        Optimizely.prototype.activate = function (experimentKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'activate');
                    return null;
                }
                if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {
                    return this.notActivatingExperiment(experimentKey, userId);
                }
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return null;
                }
                try {
                    var variationKey = this.getVariation(experimentKey, userId, attributes);
                    if (variationKey === null) {
                        return this.notActivatingExperiment(experimentKey, userId);
                    }
                    // If experiment is not set to 'Running' status, log accordingly and return variation key
                    if (!isRunning(configObj, experimentKey)) {
                        this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.SHOULD_NOT_DISPATCH_ACTIVATE, MODULE_NAME$f, experimentKey);
                        return variationKey;
                    }
                    var experiment = getExperimentFromKey(configObj, experimentKey);
                    var variation = experiment.variationKeyMap[variationKey];
                    var decisionObj = {
                        experiment: experiment,
                        variation: variation,
                        decisionSource: DECISION_SOURCES.EXPERIMENT,
                    };
                    this.sendImpressionEvent(decisionObj, '', userId, true, attributes);
                    return variationKey;
                }
                catch (ex) {
                    this.logger.log(LOG_LEVEL.ERROR, ex.message);
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME$f, userId, experimentKey);
                    this.errorHandler.handleError(ex);
                    return null;
                }
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Create an impression event and call the event dispatcher's dispatch method to
         * send this event to Optimizely. Then use the notification center to trigger
         * any notification listeners for the ACTIVATE notification type.
         * @param {DecisionObj}    decisionObj    Decision Object
         * @param {string}         flagKey        Key for a feature flag
         * @param {string}         userId         ID of user to whom the variation was shown
         * @param {UserAttributes} attributes     Optional user attributes
         * @param {boolean}        enabled        Boolean representing if feature is enabled
         */
        Optimizely.prototype.sendImpressionEvent = function (decisionObj, flagKey, userId, enabled, attributes) {
            var configObj = this.projectConfigManager.getConfig();
            if (!configObj) {
                return;
            }
            var impressionEvent = buildImpressionEvent({
                decisionObj: decisionObj,
                flagKey: flagKey,
                enabled: enabled,
                userId: userId,
                userAttributes: attributes,
                clientEngine: this.clientEngine,
                clientVersion: this.clientVersion,
                configObj: configObj,
            });
            // TODO is it okay to not pass a projectConfig as second argument
            this.eventProcessor.process(impressionEvent);
            this.emitNotificationCenterActivate(decisionObj, flagKey, userId, enabled, attributes);
        };
        /**
         * Emit the ACTIVATE notification on the notificationCenter
         * @param  {DecisionObj}    decisionObj    Decision object
         * @param  {string}         flagKey        Key for a feature flag
         * @param  {string}         userId         ID of user to whom the variation was shown
         * @param  {boolean}        enabled        Boolean representing if feature is enabled
         * @param  {UserAttributes} attributes     Optional user attributes
         */
        Optimizely.prototype.emitNotificationCenterActivate = function (decisionObj, flagKey, userId, enabled, attributes) {
            var configObj = this.projectConfigManager.getConfig();
            if (!configObj) {
                return;
            }
            var ruleType = decisionObj.decisionSource;
            var experimentKey = getExperimentKey(decisionObj);
            var experimentId = getExperimentId(decisionObj);
            var variationKey = getVariationKey(decisionObj);
            var variationId = getVariationId(decisionObj);
            var experiment;
            if (experimentId !== null && variationKey !== '') {
                experiment = configObj.experimentIdMap[experimentId];
            }
            var impressionEventOptions = {
                attributes: attributes,
                clientEngine: this.clientEngine,
                clientVersion: this.clientVersion,
                configObj: configObj,
                experimentId: experimentId,
                ruleKey: experimentKey,
                flagKey: flagKey,
                ruleType: ruleType,
                userId: userId,
                enabled: enabled,
                variationId: variationId,
                logger: this.logger,
            };
            var impressionEvent = getImpressionEvent(impressionEventOptions);
            var variation;
            if (experiment && experiment.variationKeyMap && variationKey !== '') {
                variation = experiment.variationKeyMap[variationKey];
            }
            this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.ACTIVATE, {
                experiment: experiment,
                userId: userId,
                attributes: attributes,
                variation: variation,
                logEvent: impressionEvent,
            });
        };
        /**
         * Sends conversion event to Optimizely.
         * @param  {string}         eventKey
         * @param  {string}         userId
         * @param  {UserAttributes} attributes
         * @param  {EventTags}      eventTags Values associated with the event.
         */
        Optimizely.prototype.track = function (eventKey, userId, attributes, eventTags) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'track');
                    return;
                }
                if (!this.validateInputs({ user_id: userId, event_key: eventKey }, attributes, eventTags)) {
                    return;
                }
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return;
                }
                if (!eventWithKeyExists(configObj, eventKey)) {
                    this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.EVENT_KEY_NOT_FOUND, MODULE_NAME$f, eventKey);
                    this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME$f, userId);
                    return;
                }
                // remove null values from eventTags
                eventTags = this.filterEmptyValues(eventTags);
                var conversionEvent = buildConversionEvent({
                    eventKey: eventKey,
                    eventTags: eventTags,
                    userId: userId,
                    userAttributes: attributes,
                    clientEngine: this.clientEngine,
                    clientVersion: this.clientVersion,
                    configObj: configObj,
                });
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.TRACK_EVENT, MODULE_NAME$f, eventKey, userId);
                // TODO is it okay to not pass a projectConfig as second argument
                this.eventProcessor.process(conversionEvent);
                this.emitNotificationCenterTrack(eventKey, userId, attributes, eventTags);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.NOT_TRACKING_USER, MODULE_NAME$f, userId);
            }
        };
        /**
         * Send TRACK event to notificationCenter
         * @param  {string}         eventKey
         * @param  {string}         userId
         * @param  {UserAttributes} attributes
         * @param  {EventTags}      eventTags Values associated with the event.
         */
        Optimizely.prototype.emitNotificationCenterTrack = function (eventKey, userId, attributes, eventTags) {
            try {
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return;
                }
                var conversionEventOptions = {
                    attributes: attributes,
                    clientEngine: this.clientEngine,
                    clientVersion: this.clientVersion,
                    configObj: configObj,
                    eventKey: eventKey,
                    eventTags: eventTags,
                    logger: this.logger,
                    userId: userId,
                };
                var conversionEvent = getConversionEvent(conversionEventOptions);
                this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.TRACK, {
                    eventKey: eventKey,
                    userId: userId,
                    attributes: attributes,
                    eventTags: eventTags,
                    logEvent: conversionEvent,
                });
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                this.errorHandler.handleError(ex);
            }
        };
        /**
         * Gets variation where visitor will be bucketed.
         * @param  {string}              experimentKey
         * @param  {string}              userId
         * @param  {UserAttributes}      attributes
         * @return {string|null}         variation key
         */
        Optimizely.prototype.getVariation = function (experimentKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getVariation');
                    return null;
                }
                try {
                    if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId }, attributes)) {
                        return null;
                    }
                    var configObj = this.projectConfigManager.getConfig();
                    if (!configObj) {
                        return null;
                    }
                    var experiment = configObj.experimentKeyMap[experimentKey];
                    if (!experiment) {
                        this.logger.log(LOG_LEVEL.DEBUG, ERROR_MESSAGES.INVALID_EXPERIMENT_KEY, MODULE_NAME$f, experimentKey);
                        return null;
                    }
                    var variationKey = this.decisionService.getVariation(configObj, experiment, this.createInternalUserContext(userId, attributes)).result;
                    var decisionNotificationType = isFeatureExperiment(configObj, experiment.id)
                        ? DECISION_NOTIFICATION_TYPES.FEATURE_TEST
                        : DECISION_NOTIFICATION_TYPES.AB_TEST;
                    this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {
                        type: decisionNotificationType,
                        userId: userId,
                        attributes: attributes || {},
                        decisionInfo: {
                            experimentKey: experimentKey,
                            variationKey: variationKey,
                        },
                    });
                    return variationKey;
                }
                catch (ex) {
                    this.logger.log(LOG_LEVEL.ERROR, ex.message);
                    this.errorHandler.handleError(ex);
                    return null;
                }
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Force a user into a variation for a given experiment.
         * @param  {string}      experimentKey
         * @param  {string}      userId
         * @param  {string|null} variationKey   user will be forced into. If null,
         *                                      then clear the existing experiment-to-variation mapping.
         * @return {boolean}                    A boolean value that indicates if the set completed successfully.
         */
        Optimizely.prototype.setForcedVariation = function (experimentKey, userId, variationKey) {
            if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId })) {
                return false;
            }
            var configObj = this.projectConfigManager.getConfig();
            if (!configObj) {
                return false;
            }
            try {
                return this.decisionService.setForcedVariation(configObj, experimentKey, userId, variationKey);
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                this.errorHandler.handleError(ex);
                return false;
            }
        };
        /**
         * Gets the forced variation for a given user and experiment.
         * @param  {string}      experimentKey
         * @param  {string}      userId
         * @return {string|null} The forced variation key.
         */
        Optimizely.prototype.getForcedVariation = function (experimentKey, userId) {
            if (!this.validateInputs({ experiment_key: experimentKey, user_id: userId })) {
                return null;
            }
            var configObj = this.projectConfigManager.getConfig();
            if (!configObj) {
                return null;
            }
            try {
                return this.decisionService.getForcedVariation(configObj, experimentKey, userId).result;
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                this.errorHandler.handleError(ex);
                return null;
            }
        };
        /**
         * Validate string inputs, user attributes and event tags.
         * @param  {StringInputs}  stringInputs   Map of string keys and associated values
         * @param  {unknown}       userAttributes Optional parameter for user's attributes
         * @param  {unknown}       eventTags      Optional parameter for event tags
         * @return {boolean}                      True if inputs are valid
         *
         */
        Optimizely.prototype.validateInputs = function (stringInputs, userAttributes, eventTags) {
            try {
                if (stringInputs.hasOwnProperty('user_id')) {
                    var userId = stringInputs['user_id'];
                    if (typeof userId !== 'string' || userId === null || userId === 'undefined') {
                        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME$f, 'user_id'));
                    }
                    delete stringInputs['user_id'];
                }
                Object.keys(stringInputs).forEach(function (key) {
                    if (!validate$3(stringInputs[key])) {
                        throw new Error(sprintf(ERROR_MESSAGES.INVALID_INPUT_FORMAT, MODULE_NAME$f, key));
                    }
                });
                if (userAttributes) {
                    validate$4(userAttributes);
                }
                if (eventTags) {
                    validate$5(eventTags);
                }
                return true;
            }
            catch (ex) {
                this.logger.log(LOG_LEVEL.ERROR, ex.message);
                this.errorHandler.handleError(ex);
                return false;
            }
        };
        /**
         * Shows failed activation log message and returns null when user is not activated in experiment
         * @param  {string} experimentKey
         * @param  {string} userId
         * @return {null}
         */
        Optimizely.prototype.notActivatingExperiment = function (experimentKey, userId) {
            this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.NOT_ACTIVATING_USER, MODULE_NAME$f, userId, experimentKey);
            return null;
        };
        /**
         * Filters out attributes/eventTags with null or undefined values
         * @param   {EventTags | undefined} map
         * @returns {EventTags | undefined}
         */
        Optimizely.prototype.filterEmptyValues = function (map) {
            for (var key in map) {
                if (map.hasOwnProperty(key) && (map[key] === null || map[key] === undefined)) {
                    delete map[key];
                }
            }
            return map;
        };
        /**
         * Returns true if the feature is enabled for the given user.
         * @param  {string}         featureKey   Key of feature which will be checked
         * @param  {string}         userId       ID of user which will be checked
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {boolean}                     true if the feature is enabled for the user, false otherwise
         */
        Optimizely.prototype.isFeatureEnabled = function (featureKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'isFeatureEnabled');
                    return false;
                }
                if (!this.validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {
                    return false;
                }
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return false;
                }
                var feature = getFeatureFromKey(configObj, featureKey, this.logger);
                if (!feature) {
                    return false;
                }
                var sourceInfo = {};
                var user = this.createInternalUserContext(userId, attributes);
                var decisionObj = this.decisionService.getVariationForFeature(configObj, feature, user).result;
                var decisionSource = decisionObj.decisionSource;
                var experimentKey = getExperimentKey(decisionObj);
                var variationKey = getVariationKey(decisionObj);
                var featureEnabled = getFeatureEnabledFromVariation(decisionObj);
                if (decisionSource === DECISION_SOURCES.FEATURE_TEST) {
                    sourceInfo = {
                        experimentKey: experimentKey,
                        variationKey: variationKey,
                    };
                }
                if (decisionSource === DECISION_SOURCES.FEATURE_TEST ||
                    (decisionSource === DECISION_SOURCES.ROLLOUT && getSendFlagDecisionsValue(configObj))) {
                    this.sendImpressionEvent(decisionObj, feature.key, userId, featureEnabled, attributes);
                }
                if (featureEnabled === true) {
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME$f, featureKey, userId);
                }
                else {
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME$f, featureKey, userId);
                    featureEnabled = false;
                }
                var featureInfo = {
                    featureKey: featureKey,
                    featureEnabled: featureEnabled,
                    source: decisionObj.decisionSource,
                    sourceInfo: sourceInfo,
                };
                this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {
                    type: DECISION_NOTIFICATION_TYPES.FEATURE,
                    userId: userId,
                    attributes: attributes || {},
                    decisionInfo: featureInfo,
                });
                return featureEnabled;
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return false;
            }
        };
        /**
         * Returns an Array containing the keys of all features in the project that are
         * enabled for the given user.
         * @param  {string}         userId
         * @param  {UserAttributes} attributes
         * @return {string[]}       Array of feature keys (strings)
         */
        Optimizely.prototype.getEnabledFeatures = function (userId, attributes) {
            var _this = this;
            try {
                var enabledFeatures_1 = [];
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getEnabledFeatures');
                    return enabledFeatures_1;
                }
                if (!this.validateInputs({ user_id: userId })) {
                    return enabledFeatures_1;
                }
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return enabledFeatures_1;
                }
                objectValues(configObj.featureKeyMap).forEach(function (feature) {
                    if (_this.isFeatureEnabled(feature.key, userId, attributes)) {
                        enabledFeatures_1.push(feature.key);
                    }
                });
                return enabledFeatures_1;
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return [];
            }
        };
        /**
         * Returns dynamically-typed value of the variable attached to the given
         * feature flag. Returns null if the feature key or variable key is invalid.
         *
         * @param  {string}          featureKey           Key of the feature whose variable's
         *                                                value is being accessed
         * @param  {string}          variableKey          Key of the variable whose value is
         *                                                being accessed
         * @param  {string}          userId               ID for the user
         * @param  {UserAttributes}  attributes           Optional user attributes
         * @return {unknown}                              Value of the variable cast to the appropriate
         *                                                type, or null if the feature key is invalid or
         *                                                the variable key is invalid
         */
        Optimizely.prototype.getFeatureVariable = function (featureKey, variableKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getFeatureVariable');
                    return null;
                }
                return this.getFeatureVariableForType(featureKey, variableKey, null, userId, attributes);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Helper method to get the value for a variable of a certain type attached to a
         * feature flag. Returns null if the feature key is invalid, the variable key is
         * invalid, the given variable type does not match the variable's actual type,
         * or the variable value cannot be cast to the required type. If the given variable
         * type is null, the value of the variable cast to the appropriate type is returned.
         *
         * @param   {string}         featureKey           Key of the feature whose variable's value is
         *                                                being accessed
         * @param   {string}         variableKey          Key of the variable whose value is being
         *                                                accessed
         * @param   {string|null}    variableType         Type of the variable whose value is being
         *                                                accessed (must be one of FEATURE_VARIABLE_TYPES
         *                                                in lib/utils/enums/index.js), or null to return the
         *                                                value of the variable cast to the appropriate type
         * @param   {string}         userId               ID for the user
         * @param   {UserAttributes} attributes           Optional user attributes
         * @return  {unknown}                             Value of the variable cast to the appropriate
         *                                                type, or null if the feature key is invalid, thevariable
         *                                                key is invalid, or there is a mismatch with the type of
         *                                                the variable
         */
        Optimizely.prototype.getFeatureVariableForType = function (featureKey, variableKey, variableType, userId, attributes) {
            if (!this.validateInputs({ feature_key: featureKey, variable_key: variableKey, user_id: userId }, attributes)) {
                return null;
            }
            var configObj = this.projectConfigManager.getConfig();
            if (!configObj) {
                return null;
            }
            var featureFlag = getFeatureFromKey(configObj, featureKey, this.logger);
            if (!featureFlag) {
                return null;
            }
            var variable = getVariableForFeature(configObj, featureKey, variableKey, this.logger);
            if (!variable) {
                return null;
            }
            if (variableType && variable.type !== variableType) {
                this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.VARIABLE_REQUESTED_WITH_WRONG_TYPE, MODULE_NAME$f, variableType, variable.type);
                return null;
            }
            var user = this.createInternalUserContext(userId, attributes);
            var decisionObj = this.decisionService.getVariationForFeature(configObj, featureFlag, user).result;
            var featureEnabled = getFeatureEnabledFromVariation(decisionObj);
            var variableValue = this.getFeatureVariableValueFromVariation(featureKey, featureEnabled, decisionObj.variation, variable, userId);
            var sourceInfo = {};
            if (decisionObj.decisionSource === DECISION_SOURCES.FEATURE_TEST &&
                decisionObj.experiment !== null &&
                decisionObj.variation !== null) {
                sourceInfo = {
                    experimentKey: decisionObj.experiment.key,
                    variationKey: decisionObj.variation.key,
                };
            }
            this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {
                type: DECISION_NOTIFICATION_TYPES.FEATURE_VARIABLE,
                userId: userId,
                attributes: attributes || {},
                decisionInfo: {
                    featureKey: featureKey,
                    featureEnabled: featureEnabled,
                    source: decisionObj.decisionSource,
                    variableKey: variableKey,
                    variableValue: variableValue,
                    variableType: variable.type,
                    sourceInfo: sourceInfo,
                },
            });
            return variableValue;
        };
        /**
         * Helper method to get the non type-casted value for a variable attached to a
         * feature flag. Returns appropriate variable value depending on whether there
         * was a matching variation, feature was enabled or not or varible was part of the
         * available variation or not. Also logs the appropriate message explaining how it
         * evaluated the value of the variable.
         *
         * @param  {string}          featureKey           Key of the feature whose variable's value is
         *                                                being accessed
         * @param  {boolean}         featureEnabled       Boolean indicating if feature is enabled or not
         * @param  {Variation}       variation            variation returned by decision service
         * @param  {FeatureVariable} variable             varible whose value is being evaluated
         * @param  {string}          userId               ID for the user
         * @return {unknown}                              Value of the variable or null if the
         *                                                config Obj is null
         */
        Optimizely.prototype.getFeatureVariableValueFromVariation = function (featureKey, featureEnabled, variation, variable, userId) {
            var configObj = this.projectConfigManager.getConfig();
            if (!configObj) {
                return null;
            }
            var variableValue = variable.defaultValue;
            if (variation !== null) {
                var value = getVariableValueForVariation(configObj, variable, variation, this.logger);
                if (value !== null) {
                    if (featureEnabled) {
                        variableValue = value;
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_RECEIVED_VARIABLE_VALUE, MODULE_NAME$f, variableValue, variable.key, featureKey);
                    }
                    else {
                        this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_NOT_ENABLED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME$f, featureKey, userId, variableValue);
                    }
                }
                else {
                    this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.VARIABLE_NOT_USED_RETURN_DEFAULT_VARIABLE_VALUE, MODULE_NAME$f, variable.key, variation.key);
                }
            }
            else {
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.USER_RECEIVED_DEFAULT_VARIABLE_VALUE, MODULE_NAME$f, userId, variable.key, featureKey);
            }
            return getTypeCastValue(variableValue, variable.type, this.logger);
        };
        /**
         * Returns value for the given boolean variable attached to the given feature
         * flag.
         * @param  {string}         featureKey   Key of the feature whose variable's value is
         *                                       being accessed
         * @param  {string}         variableKey  Key of the variable whose value is being
         *                                       accessed
         * @param  {string}         userId       ID for the user
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {boolean|null}                Boolean value of the variable, or null if the
         *                                       feature key is invalid, the variable key is invalid,
         *                                       or there is a mismatch with the type of the variable.
         */
        Optimizely.prototype.getFeatureVariableBoolean = function (featureKey, variableKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getFeatureVariableBoolean');
                    return null;
                }
                return this.getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.BOOLEAN, userId, attributes);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Returns value for the given double variable attached to the given feature
         * flag.
         * @param  {string} featureKey           Key of the feature whose variable's value is
         *                                       being accessed
         * @param  {string} variableKey          Key of the variable whose value is being
         *                                       accessed
         * @param  {string} userId               ID for the user
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {number|null}                 Number value of the variable, or null if the
         *                                       feature key is invalid, the variable key is
         *                                       invalid, or there is a mismatch with the type
         *                                       of the variable
         */
        Optimizely.prototype.getFeatureVariableDouble = function (featureKey, variableKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getFeatureVariableDouble');
                    return null;
                }
                return this.getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.DOUBLE, userId, attributes);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Returns value for the given integer variable attached to the given feature
         * flag.
         * @param  {string}         featureKey   Key of the feature whose variable's value is
         *                                       being accessed
         * @param  {string}         variableKey  Key of the variable whose value is being
         *                                       accessed
         * @param  {string}         userId       ID for the user
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {number|null}                 Number value of the variable, or null if the
         *                                       feature key is invalid, the variable key is
         *                                       invalid, or there is a mismatch with the type
         *                                       of the variable
         */
        Optimizely.prototype.getFeatureVariableInteger = function (featureKey, variableKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getFeatureVariableInteger');
                    return null;
                }
                return this.getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.INTEGER, userId, attributes);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Returns value for the given string variable attached to the given feature
         * flag.
         * @param  {string}         featureKey   Key of the feature whose variable's value is
         *                                       being accessed
         * @param  {string}         variableKey  Key of the variable whose value is being
         *                                       accessed
         * @param  {string}         userId       ID for the user
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {string|null}                 String value of the variable, or null if the
         *                                       feature key is invalid, the variable key is
         *                                       invalid, or there is a mismatch with the type
         *                                       of the variable
         */
        Optimizely.prototype.getFeatureVariableString = function (featureKey, variableKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getFeatureVariableString');
                    return null;
                }
                return this.getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.STRING, userId, attributes);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Returns value for the given json variable attached to the given feature
         * flag.
         * @param  {string}         featureKey   Key of the feature whose variable's value is
         *                                       being accessed
         * @param  {string}         variableKey  Key of the variable whose value is being
         *                                       accessed
         * @param  {string}         userId       ID for the user
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {unknown}                     Object value of the variable, or null if the
         *                                       feature key is invalid, the variable key is
         *                                       invalid, or there is a mismatch with the type
         *                                       of the variable
         */
        Optimizely.prototype.getFeatureVariableJSON = function (featureKey, variableKey, userId, attributes) {
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getFeatureVariableJSON');
                    return null;
                }
                return this.getFeatureVariableForType(featureKey, variableKey, FEATURE_VARIABLE_TYPES.JSON, userId, attributes);
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Returns values for all the variables attached to the given feature
         * flag.
         * @param  {string}         featureKey   Key of the feature whose variables are being
         *                                       accessed
         * @param  {string}         userId       ID for the user
         * @param  {UserAttributes} attributes   Optional user attributes
         * @return {object|null}                 Object containing all the variables, or null if the
         *                                       feature key is invalid
         */
        Optimizely.prototype.getAllFeatureVariables = function (featureKey, userId, attributes) {
            var _this = this;
            try {
                if (!this.isValidInstance()) {
                    this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'getAllFeatureVariables');
                    return null;
                }
                if (!this.validateInputs({ feature_key: featureKey, user_id: userId }, attributes)) {
                    return null;
                }
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return null;
                }
                var featureFlag = getFeatureFromKey(configObj, featureKey, this.logger);
                if (!featureFlag) {
                    return null;
                }
                var user = this.createInternalUserContext(userId, attributes);
                var decisionObj_1 = this.decisionService.getVariationForFeature(configObj, featureFlag, user).result;
                var featureEnabled_1 = getFeatureEnabledFromVariation(decisionObj_1);
                var allVariables_1 = {};
                featureFlag.variables.forEach(function (variable) {
                    allVariables_1[variable.key] = _this.getFeatureVariableValueFromVariation(featureKey, featureEnabled_1, decisionObj_1.variation, variable, userId);
                });
                var sourceInfo = {};
                if (decisionObj_1.decisionSource === DECISION_SOURCES.FEATURE_TEST &&
                    decisionObj_1.experiment !== null &&
                    decisionObj_1.variation !== null) {
                    sourceInfo = {
                        experimentKey: decisionObj_1.experiment.key,
                        variationKey: decisionObj_1.variation.key,
                    };
                }
                this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {
                    type: DECISION_NOTIFICATION_TYPES.ALL_FEATURE_VARIABLES,
                    userId: userId,
                    attributes: attributes || {},
                    decisionInfo: {
                        featureKey: featureKey,
                        featureEnabled: featureEnabled_1,
                        source: decisionObj_1.decisionSource,
                        variableValues: allVariables_1,
                        sourceInfo: sourceInfo,
                    },
                });
                return allVariables_1;
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Returns OptimizelyConfig object containing experiments and features data
         * @return {OptimizelyConfig|null}
         *
         * OptimizelyConfig Object Schema
         * {
         *   'experimentsMap': {
         *     'my-fist-experiment': {
         *       'id': '111111',
         *       'key': 'my-fist-experiment'
         *       'variationsMap': {
         *         'variation_1': {
         *           'id': '121212',
         *           'key': 'variation_1',
         *           'variablesMap': {
         *             'age': {
         *               'id': '222222',
         *               'key': 'age',
         *               'type': 'integer',
         *               'value': '0',
         *             }
         *           }
         *         }
         *       }
         *     }
         *   },
         *   'featuresMap': {
         *     'awesome-feature': {
         *       'id': '333333',
         *       'key': 'awesome-feature',
         *       'experimentsMap': Object,
         *       'variationsMap': Object,
         *     }
         *   }
         * }
         */
        Optimizely.prototype.getOptimizelyConfig = function () {
            try {
                var configObj = this.projectConfigManager.getConfig();
                if (!configObj) {
                    return null;
                }
                return this.projectConfigManager.getOptimizelyConfig();
            }
            catch (e) {
                this.logger.log(LOG_LEVEL.ERROR, e.message);
                this.errorHandler.handleError(e);
                return null;
            }
        };
        /**
         * Stop background processes belonging to this instance, including:
         *
         * - Active datafile requests
         * - Pending datafile requests
         * - Pending event queue flushes
         *
         * In-flight datafile requests will be aborted. Any events waiting to be sent
         * as part of a batched event request will be immediately flushed to the event
         * dispatcher.
         *
         * Returns a Promise that fulfills after all in-flight event dispatcher requests
         * (including any final request resulting from flushing the queue as described
         * above) are complete. If there are no in-flight event dispatcher requests and
         * no queued events waiting to be sent, returns an immediately-fulfilled Promise.
         *
         * Returned Promises are fulfilled with result objects containing these
         * properties:
         *    - success (boolean): true if the event dispatcher signaled completion of
         *                         all in-flight and final requests, or if there were no
         *                         queued events and no in-flight requests. false if an
         *                         unexpected error was encountered during the close
         *                         process.
         *    - reason (string=):  If success is false, this is a string property with
         *                         an explanatory message.
         *
         * NOTE: After close is called, this instance is no longer usable - any events
         * generated will no longer be sent to the event dispatcher.
         *
         * @return {Promise}
         */
        Optimizely.prototype.close = function () {
            var _this = this;
            var _a;
            try {
                if (this.odpManager) {
                    this.odpManager.stop();
                }
                this.notificationCenter.clearAllNotificationListeners();
                var sdkKey = (_a = this.projectConfigManager.getConfig()) === null || _a === void 0 ? void 0 : _a.sdkKey;
                if (sdkKey) {
                    NotificationRegistry.removeNotificationCenter(sdkKey);
                }
                var eventProcessorStoppedPromise = this.eventProcessor.stop();
                if (this.disposeOnUpdate) {
                    this.disposeOnUpdate();
                    this.disposeOnUpdate = null;
                }
                if (this.projectConfigManager) {
                    this.projectConfigManager.stop();
                }
                Object.keys(this.readyTimeouts).forEach(function (readyTimeoutId) {
                    var readyTimeoutRecord = _this.readyTimeouts[readyTimeoutId];
                    clearTimeout(readyTimeoutRecord.readyTimeout);
                    readyTimeoutRecord.onClose();
                });
                this.readyTimeouts = {};
                return eventProcessorStoppedPromise.then(function () {
                    return {
                        success: true,
                    };
                }, function (err) {
                    return {
                        success: false,
                        reason: String(err),
                    };
                });
            }
            catch (err) {
                this.logger.log(LOG_LEVEL.ERROR, err.message);
                this.errorHandler.handleError(err);
                return Promise.resolve({
                    success: false,
                    reason: String(err),
                });
            }
        };
        /**
         * Returns a Promise that fulfills when this instance is ready to use (meaning
         * it has a valid datafile), or has failed to become ready within a period of
         * time (configurable by the timeout property of the options argument), or when
         * this instance is closed via the close method.
         *
         * If a valid datafile was provided in the constructor, the returned Promise is
         * immediately fulfilled. If an sdkKey was provided, a manager will be used to
         * fetch  a datafile, and the returned promise will fulfill if that fetch
         * succeeds or fails before the timeout. The default timeout is 30 seconds,
         * which will be used if no timeout is provided in the argument options object.
         *
         * The returned Promise is fulfilled with a result object containing these
         * properties:
         *    - success (boolean): True if this instance is ready to use with a valid
         *                         datafile, or false if this instance failed to become
         *                         ready or was closed prior to becoming ready.
         *    - reason (string=):  If success is false, this is a string property with
         *                         an explanatory message. Failure could be due to
         *                         expiration of the timeout, network errors,
         *                         unsuccessful responses, datafile parse errors,
         *                         datafile validation errors, or the instance being
         *                         closed
         * @param  {Object=}          options
         * @param  {number|undefined} options.timeout
         * @return {Promise}
         */
        Optimizely.prototype.onReady = function (options) {
            var _this = this;
            var timeoutValue;
            if (typeof options === 'object' && options !== null) {
                if (options.timeout !== undefined) {
                    timeoutValue = options.timeout;
                }
            }
            if (!fns.isSafeInteger(timeoutValue)) {
                timeoutValue = DEFAULT_ONREADY_TIMEOUT;
            }
            var resolveTimeoutPromise;
            var timeoutPromise = new Promise(function (resolve) {
                resolveTimeoutPromise = resolve;
            });
            var timeoutId = this.nextReadyTimeoutId;
            this.nextReadyTimeoutId++;
            var onReadyTimeout = function () {
                delete _this.readyTimeouts[timeoutId];
                resolveTimeoutPromise({
                    success: false,
                    reason: sprintf('onReady timeout expired after %s ms', timeoutValue),
                });
            };
            var readyTimeout = setTimeout(onReadyTimeout, timeoutValue);
            var onClose = function () {
                resolveTimeoutPromise({
                    success: false,
                    reason: 'Instance closed',
                });
            };
            this.readyTimeouts[timeoutId] = {
                readyTimeout: readyTimeout,
                onClose: onClose,
            };
            this.readyPromise.then(function () {
                clearTimeout(readyTimeout);
                delete _this.readyTimeouts[timeoutId];
                resolveTimeoutPromise({
                    success: true,
                });
            });
            return Promise.race([this.readyPromise, timeoutPromise]);
        };
        //============ decide ============//
        /**
         * Creates a context of the user for which decision APIs will be called.
         *
         * A user context will be created successfully even when the SDK is not fully configured yet, so no
         * this.isValidInstance() check is performed here.
         *
         * @param  {string}          userId      (Optional) The user ID to be used for bucketing.
         * @param  {UserAttributes}  attributes  (Optional) user attributes.
         * @return {OptimizelyUserContext|null}  An OptimizelyUserContext associated with this OptimizelyClient or
         *                                       null if provided inputs are invalid
         */
        Optimizely.prototype.createUserContext = function (userId, attributes) {
            var _a;
            var userIdentifier = userId !== null && userId !== void 0 ? userId : (_a = this.odpManager) === null || _a === void 0 ? void 0 : _a.getVuid();
            if (userIdentifier === undefined || !this.validateInputs({ user_id: userIdentifier }, attributes)) {
                return null;
            }
            return new OptimizelyUserContext({
                optimizely: this,
                userId: userIdentifier,
                attributes: attributes,
                shouldIdentifyUser: true,
            });
        };
        /**
         * Creates an internal context of the user for which decision APIs will be called.
         *
         * A user context will be created successfully even when the SDK is not fully configured yet, so no
         * this.isValidInstance() check is performed here.
         *
         * @param  {string}          userId      The user ID to be used for bucketing.
         * @param  {UserAttributes}  attributes  Optional user attributes.
         * @return {OptimizelyUserContext|null}  An OptimizelyUserContext associated with this OptimizelyClient or
         *                                       null if provided inputs are invalid
         */
        Optimizely.prototype.createInternalUserContext = function (userId, attributes) {
            return new OptimizelyUserContext({
                optimizely: this,
                userId: userId,
                attributes: attributes,
                shouldIdentifyUser: false,
            });
        };
        Optimizely.prototype.decide = function (user, key, options) {
            var _this = this;
            var _a, _b, _c, _d;
            if (options === void 0) { options = []; }
            var userId = user.getUserId();
            var attributes = user.getAttributes();
            var configObj = this.projectConfigManager.getConfig();
            var reasons = [];
            var decisionObj;
            if (!this.isValidInstance() || !configObj) {
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'decide');
                return newErrorDecision(key, user, [DECISION_MESSAGES.SDK_NOT_READY]);
            }
            var feature = configObj.featureKeyMap[key];
            if (!feature) {
                this.logger.log(LOG_LEVEL.ERROR, ERROR_MESSAGES.FEATURE_NOT_IN_DATAFILE, MODULE_NAME$f, key);
                return newErrorDecision(key, user, [sprintf(DECISION_MESSAGES.FLAG_KEY_INVALID, key)]);
            }
            var allDecideOptions = this.getAllDecideOptions(options);
            var forcedDecisionResponse = this.decisionService.findValidatedForcedDecision(configObj, user, key);
            reasons.push.apply(reasons, forcedDecisionResponse.reasons);
            var variation = forcedDecisionResponse.result;
            if (variation) {
                decisionObj = {
                    experiment: null,
                    variation: variation,
                    decisionSource: DECISION_SOURCES.FEATURE_TEST,
                };
            }
            else {
                var decisionVariation = this.decisionService.getVariationForFeature(configObj, feature, user, allDecideOptions);
                reasons.push.apply(reasons, decisionVariation.reasons);
                decisionObj = decisionVariation.result;
            }
            var decisionSource = decisionObj.decisionSource;
            var experimentKey = (_b = (_a = decisionObj.experiment) === null || _a === void 0 ? void 0 : _a.key) !== null && _b !== void 0 ? _b : null;
            var variationKey = (_d = (_c = decisionObj.variation) === null || _c === void 0 ? void 0 : _c.key) !== null && _d !== void 0 ? _d : null;
            var flagEnabled = getFeatureEnabledFromVariation(decisionObj);
            if (flagEnabled === true) {
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_ENABLED_FOR_USER, MODULE_NAME$f, key, userId);
            }
            else {
                this.logger.log(LOG_LEVEL.INFO, LOG_MESSAGES.FEATURE_NOT_ENABLED_FOR_USER, MODULE_NAME$f, key, userId);
            }
            var variablesMap = {};
            var decisionEventDispatched = false;
            if (!allDecideOptions[exports.OptimizelyDecideOption.EXCLUDE_VARIABLES]) {
                feature.variables.forEach(function (variable) {
                    variablesMap[variable.key] = _this.getFeatureVariableValueFromVariation(key, flagEnabled, decisionObj.variation, variable, userId);
                });
            }
            if (!allDecideOptions[exports.OptimizelyDecideOption.DISABLE_DECISION_EVENT] &&
                (decisionSource === DECISION_SOURCES.FEATURE_TEST ||
                    (decisionSource === DECISION_SOURCES.ROLLOUT && getSendFlagDecisionsValue(configObj)))) {
                this.sendImpressionEvent(decisionObj, key, userId, flagEnabled, attributes);
                decisionEventDispatched = true;
            }
            var shouldIncludeReasons = allDecideOptions[exports.OptimizelyDecideOption.INCLUDE_REASONS];
            var reportedReasons = [];
            if (shouldIncludeReasons) {
                reportedReasons = reasons.map(function (reason) { return sprintf.apply(void 0, __spreadArray([reason[0]], reason.slice(1), false)); });
            }
            var featureInfo = {
                flagKey: key,
                enabled: flagEnabled,
                variationKey: variationKey,
                ruleKey: experimentKey,
                variables: variablesMap,
                reasons: reportedReasons,
                decisionEventDispatched: decisionEventDispatched,
            };
            this.notificationCenter.sendNotifications(NOTIFICATION_TYPES.DECISION, {
                type: DECISION_NOTIFICATION_TYPES.FLAG,
                userId: userId,
                attributes: attributes,
                decisionInfo: featureInfo,
            });
            return {
                variationKey: variationKey,
                enabled: flagEnabled,
                variables: variablesMap,
                ruleKey: experimentKey,
                flagKey: key,
                userContext: user,
                reasons: reportedReasons,
            };
        };
        /**
         * Get all decide options.
         * @param  {OptimizelyDecideOption[]}          options   decide options
         * @return {[key: string]: boolean}             Map of all provided decide options including default decide options
         */
        Optimizely.prototype.getAllDecideOptions = function (options) {
            var _this = this;
            var allDecideOptions = __assign({}, this.defaultDecideOptions);
            if (!Array.isArray(options)) {
                this.logger.log(LOG_LEVEL.DEBUG, LOG_MESSAGES.INVALID_DECIDE_OPTIONS, MODULE_NAME$f);
            }
            else {
                options.forEach(function (option) {
                    // Filter out all provided decide options that are not in OptimizelyDecideOption[]
                    if (exports.OptimizelyDecideOption[option]) {
                        allDecideOptions[option] = true;
                    }
                    else {
                        _this.logger.log(LOG_LEVEL.WARNING, LOG_MESSAGES.UNRECOGNIZED_DECIDE_OPTION, MODULE_NAME$f, option);
                    }
                });
            }
            return allDecideOptions;
        };
        /**
         * Returns an object of decision results for multiple flag keys and a user context.
         * If the SDK finds an error for a key, the response will include a decision for the key showing reasons for the error.
         * The SDK will always return an object of decisions. When it cannot process requests, it will return an empty object after logging the errors.
         * @param     {OptimizelyUserContext}      user        A user context associated with this OptimizelyClient
         * @param     {string[]}                   keys        An array of flag keys for which decisions will be made.
         * @param     {OptimizelyDecideOption[]}  options     An array of options for decision-making.
         * @return    {[key: string]: OptimizelyDecision}      An object of decision results mapped by flag keys.
         */
        Optimizely.prototype.decideForKeys = function (user, keys, options) {
            var _this = this;
            if (options === void 0) { options = []; }
            var decisionMap = {};
            if (!this.isValidInstance()) {
                this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'decideForKeys');
                return decisionMap;
            }
            if (keys.length === 0) {
                return decisionMap;
            }
            var allDecideOptions = this.getAllDecideOptions(options);
            keys.forEach(function (key) {
                var optimizelyDecision = _this.decide(user, key, options);
                if (!allDecideOptions[exports.OptimizelyDecideOption.ENABLED_FLAGS_ONLY] || optimizelyDecision.enabled) {
                    decisionMap[key] = optimizelyDecision;
                }
            });
            return decisionMap;
        };
        /**
         * Returns an object of decision results for all active flag keys.
         * @param     {OptimizelyUserContext}      user        A user context associated with this OptimizelyClient
         * @param     {OptimizelyDecideOption[]}  options     An array of options for decision-making.
         * @return    {[key: string]: OptimizelyDecision}      An object of all decision results mapped by flag keys.
         */
        Optimizely.prototype.decideAll = function (user, options) {
            if (options === void 0) { options = []; }
            var configObj = this.projectConfigManager.getConfig();
            var decisionMap = {};
            if (!this.isValidInstance() || !configObj) {
                this.logger.log(LOG_LEVEL.ERROR, LOG_MESSAGES.INVALID_OBJECT, MODULE_NAME$f, 'decideAll');
                return decisionMap;
            }
            var allFlagKeys = Object.keys(configObj.featureKeyMap);
            return this.decideForKeys(user, allFlagKeys, options);
        };
        /**
         * Updates ODP Config with most recent ODP key, host, pixelUrl, and segments from the project config
         */
        Optimizely.prototype.updateOdpSettings = function () {
            var projectConfig = this.projectConfigManager.getConfig();
            if (!projectConfig) {
                return;
            }
            if (this.odpManager) {
                this.odpManager.updateSettings(projectConfig.odpIntegrationConfig);
            }
        };
        /**
         * Sends an action as an ODP Event with optional custom parameters including type, identifiers, and data
         * Note: Since this depends on this.odpManager, it must await Optimizely client's onReady() promise resolution.
         * @param {string}              action         Subcategory of the event type (i.e. "client_initialized", "identified", or a custom action)
         * @param {string}              type           (Optional) Type of event (Defaults to "fullstack")
         * @param {Map<string, string>} identifiers    (Optional) Key-value map of user identifiers
         * @param {Map<string, string>} data           (Optional) Event data in a key-value map.
         */
        Optimizely.prototype.sendOdpEvent = function (action, type, identifiers, data) {
            if (!this.odpManager) {
                this.logger.error(ERROR_MESSAGES.ODP_EVENT_FAILED_ODP_MANAGER_MISSING);
                return;
            }
            var odpEventType = type !== null && type !== void 0 ? type : ODP_DEFAULT_EVENT_TYPE;
            var odpIdentifiers = new Map(identifiers);
            if (identifiers && identifiers.size > 0) {
                try {
                    identifiers.forEach(function (identifier_value, identifier_key) {
                        // Catch for fs-user-id, FS-USER-ID, and FS_USER_ID and assign value to fs_user_id identifier.
                        if (FS_USER_ID_ALIAS === identifier_key.toLowerCase() ||
                            ODP_USER_KEY.FS_USER_ID === identifier_key.toLowerCase()) {
                            odpIdentifiers.delete(identifier_key);
                            odpIdentifiers.set(ODP_USER_KEY.FS_USER_ID, identifier_value);
                        }
                    });
                }
                catch (e) {
                    this.logger.warn(LOG_MESSAGES.ODP_SEND_EVENT_IDENTIFIER_CONVERSION_FAILED);
                }
            }
            try {
                var odpEvent = new OdpEvent(odpEventType, action, odpIdentifiers, data);
                this.odpManager.sendEvent(odpEvent);
            }
            catch (e) {
                this.logger.error(ERROR_MESSAGES.ODP_EVENT_FAILED, e);
            }
        };
        /**
         * Checks if ODP (Optimizely Data Platform) is integrated into the project.
         * @returns { boolean } `true` if ODP settings were found in the datafile otherwise `false`
         */
        Optimizely.prototype.isOdpIntegrated = function () {
            var _a, _b, _c;
            return (_c = (_b = (_a = this.projectConfigManager.getConfig()) === null || _a === void 0 ? void 0 : _a.odpIntegrationConfig) === null || _b === void 0 ? void 0 : _b.integrated) !== null && _c !== void 0 ? _c : false;
        };
        /**
         * Identifies user with ODP server in a fire-and-forget manner.
         * Should be called only after the instance is ready
         * @param {string} userId
         */
        Optimizely.prototype.identifyUser = function (userId) {
            if (this.odpManager && this.isOdpIntegrated()) {
                this.odpManager.identifyUser(userId);
            }
        };
        /**
         * Fetches list of qualified segments from ODP for a particular userId.
         * @param {string}                          userId
         * @param {Array<OptimizelySegmentOption>}  options
         * @returns {Promise<string[] | null>}
         */
        Optimizely.prototype.fetchQualifiedSegments = function (userId, options) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!this.odpManager) {
                                return [2 /*return*/, null];
                            }
                            return [4 /*yield*/, this.odpManager.fetchQualifiedSegments(userId, options)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        /**
         * @returns {string|undefined}    Currently provisioned VUID from local ODP Manager or undefined if
         *                                ODP Manager has not been instantiated yet for any reason.
         */
        Optimizely.prototype.getVuid = function () {
            var _a;
            if (!this.odpManager) {
                (_a = this.logger) === null || _a === void 0 ? void 0 : _a.error('Unable to get VUID - ODP Manager is not instantiated yet.');
                return undefined;
            }
            if (!this.odpManager.isVuidEnabled()) {
                this.logger.log(LOG_LEVEL.WARNING, 'getVuid() unavailable for this platform', MODULE_NAME$f);
                return undefined;
            }
            return this.odpManager.getVuid();
        };
        return Optimizely;
    }());

    var uaParser = createCommonjsModule(function (module, exports) {
    /////////////////////////////////////////////////////////////////////////////////
    /* UAParser.js v1.0.37
       Copyright © 2012-2021 Faisal Salman <f@faisalman.com>
       MIT License *//*
       Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent data.
       Supports browser & node.js environment. 
       Demo   : https://faisalman.github.io/ua-parser-js
       Source : https://github.com/faisalman/ua-parser-js */
    /////////////////////////////////////////////////////////////////////////////////

    (function (window, undefined$1) {

        //////////////
        // Constants
        /////////////


        var LIBVERSION  = '1.0.37',
            EMPTY       = '',
            UNKNOWN     = '?',
            FUNC_TYPE   = 'function',
            UNDEF_TYPE  = 'undefined',
            OBJ_TYPE    = 'object',
            STR_TYPE    = 'string',
            MAJOR       = 'major',
            MODEL       = 'model',
            NAME        = 'name',
            TYPE        = 'type',
            VENDOR      = 'vendor',
            VERSION     = 'version',
            ARCHITECTURE= 'architecture',
            CONSOLE     = 'console',
            MOBILE      = 'mobile',
            TABLET      = 'tablet',
            SMARTTV     = 'smarttv',
            WEARABLE    = 'wearable',
            EMBEDDED    = 'embedded',
            UA_MAX_LENGTH = 500;

        var AMAZON  = 'Amazon',
            APPLE   = 'Apple',
            ASUS    = 'ASUS',
            BLACKBERRY = 'BlackBerry',
            BROWSER = 'Browser',
            CHROME  = 'Chrome',
            EDGE    = 'Edge',
            FIREFOX = 'Firefox',
            GOOGLE  = 'Google',
            HUAWEI  = 'Huawei',
            LG      = 'LG',
            MICROSOFT = 'Microsoft',
            MOTOROLA  = 'Motorola',
            OPERA   = 'Opera',
            SAMSUNG = 'Samsung',
            SHARP   = 'Sharp',
            SONY    = 'Sony',
            XIAOMI  = 'Xiaomi',
            ZEBRA   = 'Zebra',
            FACEBOOK    = 'Facebook',
            CHROMIUM_OS = 'Chromium OS',
            MAC_OS  = 'Mac OS';

        ///////////
        // Helper
        //////////

        var extend = function (regexes, extensions) {
                var mergedRegexes = {};
                for (var i in regexes) {
                    if (extensions[i] && extensions[i].length % 2 === 0) {
                        mergedRegexes[i] = extensions[i].concat(regexes[i]);
                    } else {
                        mergedRegexes[i] = regexes[i];
                    }
                }
                return mergedRegexes;
            },
            enumerize = function (arr) {
                var enums = {};
                for (var i=0; i<arr.length; i++) {
                    enums[arr[i].toUpperCase()] = arr[i];
                }
                return enums;
            },
            has = function (str1, str2) {
                return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
            },
            lowerize = function (str) {
                return str.toLowerCase();
            },
            majorize = function (version) {
                return typeof(version) === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split('.')[0] : undefined$1;
            },
            trim = function (str, len) {
                if (typeof(str) === STR_TYPE) {
                    str = str.replace(/^\s\s*/, EMPTY);
                    return typeof(len) === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
                }
        };

        ///////////////
        // Map helper
        //////////////

        var rgxMapper = function (ua, arrays) {

                var i = 0, j, k, p, q, matches, match;

                // loop through all regexes maps
                while (i < arrays.length && !matches) {

                    var regex = arrays[i],       // even sequence (0,2,4,..)
                        props = arrays[i + 1];   // odd sequence (1,3,5,..)
                    j = k = 0;

                    // try matching uastring with regexes
                    while (j < regex.length && !matches) {

                        if (!regex[j]) { break; }
                        matches = regex[j++].exec(ua);

                        if (!!matches) {
                            for (p = 0; p < props.length; p++) {
                                match = matches[++k];
                                q = props[p];
                                // check if given property is actually array
                                if (typeof q === OBJ_TYPE && q.length > 0) {
                                    if (q.length === 2) {
                                        if (typeof q[1] == FUNC_TYPE) {
                                            // assign modified match
                                            this[q[0]] = q[1].call(this, match);
                                        } else {
                                            // assign given value, ignore regex match
                                            this[q[0]] = q[1];
                                        }
                                    } else if (q.length === 3) {
                                        // check whether function or regex
                                        if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                                            // call function (usually string mapper)
                                            this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined$1;
                                        } else {
                                            // sanitize match using given regex
                                            this[q[0]] = match ? match.replace(q[1], q[2]) : undefined$1;
                                        }
                                    } else if (q.length === 4) {
                                            this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined$1;
                                    }
                                } else {
                                    this[q] = match ? match : undefined$1;
                                }
                            }
                        }
                    }
                    i += 2;
                }
            },

            strMapper = function (str, map) {

                for (var i in map) {
                    // check if current value is array
                    if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
                        for (var j = 0; j < map[i].length; j++) {
                            if (has(map[i][j], str)) {
                                return (i === UNKNOWN) ? undefined$1 : i;
                            }
                        }
                    } else if (has(map[i], str)) {
                        return (i === UNKNOWN) ? undefined$1 : i;
                    }
                }
                return str;
        };

        ///////////////
        // String map
        //////////////

        // Safari < 3.0
        var oldSafariMap = {
                '1.0'   : '/8',
                '1.2'   : '/1',
                '1.3'   : '/3',
                '2.0'   : '/412',
                '2.0.2' : '/416',
                '2.0.3' : '/417',
                '2.0.4' : '/419',
                '?'     : '/'
            },
            windowsVersionMap = {
                'ME'        : '4.90',
                'NT 3.11'   : 'NT3.51',
                'NT 4.0'    : 'NT4.0',
                '2000'      : 'NT 5.0',
                'XP'        : ['NT 5.1', 'NT 5.2'],
                'Vista'     : 'NT 6.0',
                '7'         : 'NT 6.1',
                '8'         : 'NT 6.2',
                '8.1'       : 'NT 6.3',
                '10'        : ['NT 6.4', 'NT 10.0'],
                'RT'        : 'ARM'
        };

        //////////////
        // Regex map
        /////////////

        var regexes = {

            browser : [[

                /\b(?:crmo|crios)\/([\w\.]+)/i                                      // Chrome for Android/iOS
                ], [VERSION, [NAME, 'Chrome']], [
                /edg(?:e|ios|a)?\/([\w\.]+)/i                                       // Microsoft Edge
                ], [VERSION, [NAME, 'Edge']], [

                // Presto based
                /(opera mini)\/([-\w\.]+)/i,                                        // Opera Mini
                /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,                 // Opera Mobi/Tablet
                /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i                           // Opera
                ], [NAME, VERSION], [
                /opios[\/ ]+([\w\.]+)/i                                             // Opera mini on iphone >= 8.0
                ], [VERSION, [NAME, OPERA+' Mini']], [
                /\bopr\/([\w\.]+)/i                                                 // Opera Webkit
                ], [VERSION, [NAME, OPERA]], [

                // Mixed
                /\bb[ai]*d(?:uhd|[ub]*[aekoprswx]{5,6})[\/ ]?([\w\.]+)/i            // Baidu
                ], [VERSION, [NAME, 'Baidu']], [
                /(kindle)\/([\w\.]+)/i,                                             // Kindle
                /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,      // Lunascape/Maxthon/Netfront/Jasmine/Blazer
                // Trident based
                /(avant|iemobile|slim)\s?(?:browser)?[\/ ]?([\w\.]*)/i,             // Avant/IEMobile/SlimBrowser
                /(?:ms|\()(ie) ([\w\.]+)/i,                                         // Internet Explorer

                // Webkit/KHTML based                                               // Flock/RockMelt/Midori/Epiphany/Silk/Skyfire/Bolt/Iron/Iridium/PhantomJS/Bowser/QupZilla/Falkon
                /(flock|rockmelt|midori|epiphany|silk|skyfire|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
                                                                                    // Rekonq/Puffin/Brave/Whale/QQBrowserLite/QQ, aka ShouQ
                /(heytap|ovi)browser\/([\d\.]+)/i,                                  // Heytap/Ovi
                /(weibo)__([\d\.]+)/i                                               // Weibo
                ], [NAME, VERSION], [
                /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i                 // UCBrowser
                ], [VERSION, [NAME, 'UC'+BROWSER]], [
                /microm.+\bqbcore\/([\w\.]+)/i,                                     // WeChat Desktop for Windows Built-in Browser
                /\bqbcore\/([\w\.]+).+microm/i,
                /micromessenger\/([\w\.]+)/i                                        // WeChat
                ], [VERSION, [NAME, 'WeChat']], [
                /konqueror\/([\w\.]+)/i                                             // Konqueror
                ], [VERSION, [NAME, 'Konqueror']], [
                /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i                       // IE11
                ], [VERSION, [NAME, 'IE']], [
                /ya(?:search)?browser\/([\w\.]+)/i                                  // Yandex
                ], [VERSION, [NAME, 'Yandex']], [
                /slbrowser\/([\w\.]+)/i                                             // Smart Lenovo Browser
                ], [VERSION, [NAME, 'Smart Lenovo '+BROWSER]], [
                /(avast|avg)\/([\w\.]+)/i                                           // Avast/AVG Secure Browser
                ], [[NAME, /(.+)/, '$1 Secure '+BROWSER], VERSION], [
                /\bfocus\/([\w\.]+)/i                                               // Firefox Focus
                ], [VERSION, [NAME, FIREFOX+' Focus']], [
                /\bopt\/([\w\.]+)/i                                                 // Opera Touch
                ], [VERSION, [NAME, OPERA+' Touch']], [
                /coc_coc\w+\/([\w\.]+)/i                                            // Coc Coc Browser
                ], [VERSION, [NAME, 'Coc Coc']], [
                /dolfin\/([\w\.]+)/i                                                // Dolphin
                ], [VERSION, [NAME, 'Dolphin']], [
                /coast\/([\w\.]+)/i                                                 // Opera Coast
                ], [VERSION, [NAME, OPERA+' Coast']], [
                /miuibrowser\/([\w\.]+)/i                                           // MIUI Browser
                ], [VERSION, [NAME, 'MIUI '+BROWSER]], [
                /fxios\/([-\w\.]+)/i                                                // Firefox for iOS
                ], [VERSION, [NAME, FIREFOX]], [
                /\bqihu|(qi?ho?o?|360)browser/i                                     // 360
                ], [[NAME, '360 ' + BROWSER]], [
                /(oculus|sailfish|huawei|vivo)browser\/([\w\.]+)/i
                ], [[NAME, /(.+)/, '$1 ' + BROWSER], VERSION], [                    // Oculus/Sailfish/HuaweiBrowser/VivoBrowser
                /samsungbrowser\/([\w\.]+)/i                                        // Samsung Internet
                ], [VERSION, [NAME, SAMSUNG + ' Internet']], [
                /(comodo_dragon)\/([\w\.]+)/i                                       // Comodo Dragon
                ], [[NAME, /_/g, ' '], VERSION], [
                /metasr[\/ ]?([\d\.]+)/i                                            // Sogou Explorer
                ], [VERSION, [NAME, 'Sogou Explorer']], [
                /(sogou)mo\w+\/([\d\.]+)/i                                          // Sogou Mobile
                ], [[NAME, 'Sogou Mobile'], VERSION], [
                /(electron)\/([\w\.]+) safari/i,                                    // Electron-based App
                /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,                   // Tesla
                /m?(qqbrowser|2345Explorer)[\/ ]?([\w\.]+)/i                        // QQBrowser/2345 Browser
                ], [NAME, VERSION], [
                /(lbbrowser)/i,                                                     // LieBao Browser
                /\[(linkedin)app\]/i                                                // LinkedIn App for iOS & Android
                ], [NAME], [

                // WebView
                /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i       // Facebook App for iOS & Android
                ], [[NAME, FACEBOOK], VERSION], [
                /(Klarna)\/([\w\.]+)/i,                                             // Klarna Shopping Browser for iOS & Android
                /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,                             // Kakao App
                /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,                                  // Naver InApp
                /safari (line)\/([\w\.]+)/i,                                        // Line App for iOS
                /\b(line)\/([\w\.]+)\/iab/i,                                        // Line App for Android
                /(alipay)client\/([\w\.]+)/i,                                       // Alipay
                /(chromium|instagram|snapchat)[\/ ]([-\w\.]+)/i                     // Chromium/Instagram/Snapchat
                ], [NAME, VERSION], [
                /\bgsa\/([\w\.]+) .*safari\//i                                      // Google Search Appliance on iOS
                ], [VERSION, [NAME, 'GSA']], [
                /musical_ly(?:.+app_?version\/|_)([\w\.]+)/i                        // TikTok
                ], [VERSION, [NAME, 'TikTok']], [

                /headlesschrome(?:\/([\w\.]+)| )/i                                  // Chrome Headless
                ], [VERSION, [NAME, CHROME+' Headless']], [

                / wv\).+(chrome)\/([\w\.]+)/i                                       // Chrome WebView
                ], [[NAME, CHROME+' WebView'], VERSION], [

                /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i           // Android Browser
                ], [VERSION, [NAME, 'Android '+BROWSER]], [

                /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i       // Chrome/OmniWeb/Arora/Tizen/Nokia
                ], [NAME, VERSION], [

                /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i                      // Mobile Safari
                ], [VERSION, [NAME, 'Mobile Safari']], [
                /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i                // Safari & Safari Mobile
                ], [VERSION, NAME], [
                /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i                      // Safari < 3.0
                ], [NAME, [VERSION, strMapper, oldSafariMap]], [

                /(webkit|khtml)\/([\w\.]+)/i
                ], [NAME, VERSION], [

                // Gecko based
                /(navigator|netscape\d?)\/([-\w\.]+)/i                              // Netscape
                ], [[NAME, 'Netscape'], VERSION], [
                /mobile vr; rv:([\w\.]+)\).+firefox/i                               // Firefox Reality
                ], [VERSION, [NAME, FIREFOX+' Reality']], [
                /ekiohf.+(flow)\/([\w\.]+)/i,                                       // Flow
                /(swiftfox)/i,                                                      // Swiftfox
                /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
                                                                                    // IceDragon/Iceweasel/Camino/Chimera/Fennec/Maemo/Minimo/Conkeror/Klar
                /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
                                                                                    // Firefox/SeaMonkey/K-Meleon/IceCat/IceApe/Firebird/Phoenix
                /(firefox)\/([\w\.]+)/i,                                            // Other Firefox-based
                /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,                         // Mozilla

                // Other
                /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
                                                                                    // Polaris/Lynx/Dillo/iCab/Doris/Amaya/w3m/NetSurf/Sleipnir/Obigo/Mosaic/Go/ICE/UP.Browser
                /(links) \(([\w\.]+)/i,                                             // Links
                /panasonic;(viera)/i                                                // Panasonic Viera
                ], [NAME, VERSION], [
                
                /(cobalt)\/([\w\.]+)/i                                              // Cobalt
                ], [NAME, [VERSION, /master.|lts./, ""]]
            ],

            cpu : [[

                /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i                     // AMD64 (x64)
                ], [[ARCHITECTURE, 'amd64']], [

                /(ia32(?=;))/i                                                      // IA32 (quicktime)
                ], [[ARCHITECTURE, lowerize]], [

                /((?:i[346]|x)86)[;\)]/i                                            // IA32 (x86)
                ], [[ARCHITECTURE, 'ia32']], [

                /\b(aarch64|arm(v?8e?l?|_?64))\b/i                                 // ARM64
                ], [[ARCHITECTURE, 'arm64']], [

                /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i                                   // ARMHF
                ], [[ARCHITECTURE, 'armhf']], [

                // PocketPC mistakenly identified as PowerPC
                /windows (ce|mobile); ppc;/i
                ], [[ARCHITECTURE, 'arm']], [

                /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i                            // PowerPC
                ], [[ARCHITECTURE, /ower/, EMPTY, lowerize]], [

                /(sun4\w)[;\)]/i                                                    // SPARC
                ], [[ARCHITECTURE, 'sparc']], [

                /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
                                                                                    // IA64, 68K, ARM/64, AVR/32, IRIX/64, MIPS/64, SPARC/64, PA-RISC
                ], [[ARCHITECTURE, lowerize]]
            ],

            device : [[

                //////////////////////////
                // MOBILES & TABLETS
                /////////////////////////

                // Samsung
                /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
                ], [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]], [
                /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
                /samsung[- ]([-\w]+)/i,
                /sec-(sgh\w+)/i
                ], [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]], [

                // Apple
                /(?:\/|\()(ip(?:hone|od)[\w, ]*)(?:\/|;)/i                          // iPod/iPhone
                ], [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]], [
                /\((ipad);[-\w\),; ]+apple/i,                                       // iPad
                /applecoremedia\/[\w\.]+ \((ipad)/i,
                /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
                ], [MODEL, [VENDOR, APPLE], [TYPE, TABLET]], [
                /(macintosh);/i
                ], [MODEL, [VENDOR, APPLE]], [

                // Sharp
                /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
                ], [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]], [

                // Huawei
                /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
                ], [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]], [
                /(?:huawei|honor)([-\w ]+)[;\)]/i,
                /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
                ], [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]], [

                // Xiaomi
                /\b(poco[\w ]+|m2\d{3}j\d\d[a-z]{2})(?: bui|\))/i,                  // Xiaomi POCO
                /\b; (\w+) build\/hm\1/i,                                           // Xiaomi Hongmi 'numeric' models
                /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,                             // Xiaomi Hongmi
                /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,                   // Xiaomi Redmi
                /oid[^\)]+; (m?[12][0-389][01]\w{3,6}[c-y])( bui|; wv|\))/i,        // Xiaomi Redmi 'numeric' models
                /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i // Xiaomi Mi
                ], [[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, MOBILE]], [
                /oid[^\)]+; (2\d{4}(283|rpbf)[cgl])( bui|\))/i,                     // Redmi Pad
                /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i                        // Mi Pad tablets
                ],[[MODEL, /_/g, ' '], [VENDOR, XIAOMI], [TYPE, TABLET]], [

                // OPPO
                /; (\w+) bui.+ oppo/i,
                /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
                ], [MODEL, [VENDOR, 'OPPO'], [TYPE, MOBILE]], [

                // Vivo
                /vivo (\w+)(?: bui|\))/i,
                /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
                ], [MODEL, [VENDOR, 'Vivo'], [TYPE, MOBILE]], [

                // Realme
                /\b(rmx[1-3]\d{3})(?: bui|;|\))/i
                ], [MODEL, [VENDOR, 'Realme'], [TYPE, MOBILE]], [

                // Motorola
                /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
                /\bmot(?:orola)?[- ](\w*)/i,
                /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
                ], [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]], [
                /\b(mz60\d|xoom[2 ]{0,2}) build\//i
                ], [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]], [

                // LG
                /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
                ], [MODEL, [VENDOR, LG], [TYPE, TABLET]], [
                /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
                /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
                /\blg-?([\d\w]+) bui/i
                ], [MODEL, [VENDOR, LG], [TYPE, MOBILE]], [

                // Lenovo
                /(ideatab[-\w ]+)/i,
                /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
                ], [MODEL, [VENDOR, 'Lenovo'], [TYPE, TABLET]], [

                // Nokia
                /(?:maemo|nokia).*(n900|lumia \d+)/i,
                /nokia[-_ ]?([-\w\.]*)/i
                ], [[MODEL, /_/g, ' '], [VENDOR, 'Nokia'], [TYPE, MOBILE]], [

                // Google
                /(pixel c)\b/i                                                      // Google Pixel C
                ], [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]], [
                /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i                         // Google Pixel
                ], [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]], [

                // Sony
                /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
                ], [MODEL, [VENDOR, SONY], [TYPE, MOBILE]], [
                /sony tablet [ps]/i,
                /\b(?:sony)?sgp\w+(?: bui|\))/i
                ], [[MODEL, 'Xperia Tablet'], [VENDOR, SONY], [TYPE, TABLET]], [

                // OnePlus
                / (kb2005|in20[12]5|be20[12][59])\b/i,
                /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
                ], [MODEL, [VENDOR, 'OnePlus'], [TYPE, MOBILE]], [

                // Amazon
                /(alexa)webm/i,
                /(kf[a-z]{2}wi|aeo[c-r]{2})( bui|\))/i,                             // Kindle Fire without Silk / Echo Show
                /(kf[a-z]+)( bui|\)).+silk\//i                                      // Kindle Fire HD
                ], [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]], [
                /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i                     // Fire Phone
                ], [[MODEL, /(.+)/g, 'Fire Phone $1'], [VENDOR, AMAZON], [TYPE, MOBILE]], [

                // BlackBerry
                /(playbook);[-\w\),; ]+(rim)/i                                      // BlackBerry PlayBook
                ], [MODEL, VENDOR, [TYPE, TABLET]], [
                /\b((?:bb[a-f]|st[hv])100-\d)/i,
                /\(bb10; (\w+)/i                                                    // BlackBerry 10
                ], [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]], [

                // Asus
                /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
                ], [MODEL, [VENDOR, ASUS], [TYPE, TABLET]], [
                / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
                ], [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]], [

                // HTC
                /(nexus 9)/i                                                        // HTC Nexus 9
                ], [MODEL, [VENDOR, 'HTC'], [TYPE, TABLET]], [
                /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,                         // HTC

                // ZTE
                /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
                /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i         // Alcatel/GeeksPhone/Nexian/Panasonic/Sony
                ], [VENDOR, [MODEL, /_/g, ' '], [TYPE, MOBILE]], [

                // Acer
                /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
                ], [MODEL, [VENDOR, 'Acer'], [TYPE, TABLET]], [

                // Meizu
                /droid.+; (m[1-5] note) bui/i,
                /\bmz-([-\w]{2,})/i
                ], [MODEL, [VENDOR, 'Meizu'], [TYPE, MOBILE]], [
                    
                // Ulefone
                /; ((?:power )?armor(?:[\w ]{0,8}))(?: bui|\))/i
                ], [MODEL, [VENDOR, 'Ulefone'], [TYPE, MOBILE]], [

                // MIXED
                /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron|infinix|tecno)[-_ ]?([-\w]*)/i,
                                                                                    // BlackBerry/BenQ/Palm/Sony-Ericsson/Acer/Asus/Dell/Meizu/Motorola/Polytron
                /(hp) ([\w ]+\w)/i,                                                 // HP iPAQ
                /(asus)-?(\w+)/i,                                                   // Asus
                /(microsoft); (lumia[\w ]+)/i,                                      // Microsoft Lumia
                /(lenovo)[-_ ]?([-\w]+)/i,                                          // Lenovo
                /(jolla)/i,                                                         // Jolla
                /(oppo) ?([\w ]+) bui/i                                             // OPPO
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [

                /(kobo)\s(ereader|touch)/i,                                         // Kobo
                /(archos) (gamepad2?)/i,                                            // Archos
                /(hp).+(touchpad(?!.+tablet)|tablet)/i,                             // HP TouchPad
                /(kindle)\/([\w\.]+)/i,                                             // Kindle
                /(nook)[\w ]+build\/(\w+)/i,                                        // Nook
                /(dell) (strea[kpr\d ]*[\dko])/i,                                   // Dell Streak
                /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,                                  // Le Pan Tablets
                /(trinity)[- ]*(t\d{3}) bui/i,                                      // Trinity Tablets
                /(gigaset)[- ]+(q\w{1,9}) bui/i,                                    // Gigaset Tablets
                /(vodafone) ([\w ]+)(?:\)| bui)/i                                   // Vodafone
                ], [VENDOR, MODEL, [TYPE, TABLET]], [

                /(surface duo)/i                                                    // Surface Duo
                ], [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]], [
                /droid [\d\.]+; (fp\du?)(?: b|\))/i                                 // Fairphone
                ], [MODEL, [VENDOR, 'Fairphone'], [TYPE, MOBILE]], [
                /(u304aa)/i                                                         // AT&T
                ], [MODEL, [VENDOR, 'AT&T'], [TYPE, MOBILE]], [
                /\bsie-(\w*)/i                                                      // Siemens
                ], [MODEL, [VENDOR, 'Siemens'], [TYPE, MOBILE]], [
                /\b(rct\w+) b/i                                                     // RCA Tablets
                ], [MODEL, [VENDOR, 'RCA'], [TYPE, TABLET]], [
                /\b(venue[\d ]{2,7}) b/i                                            // Dell Venue Tablets
                ], [MODEL, [VENDOR, 'Dell'], [TYPE, TABLET]], [
                /\b(q(?:mv|ta)\w+) b/i                                              // Verizon Tablet
                ], [MODEL, [VENDOR, 'Verizon'], [TYPE, TABLET]], [
                /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i                       // Barnes & Noble Tablet
                ], [MODEL, [VENDOR, 'Barnes & Noble'], [TYPE, TABLET]], [
                /\b(tm\d{3}\w+) b/i
                ], [MODEL, [VENDOR, 'NuVision'], [TYPE, TABLET]], [
                /\b(k88) b/i                                                        // ZTE K Series Tablet
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, TABLET]], [
                /\b(nx\d{3}j) b/i                                                   // ZTE Nubia
                ], [MODEL, [VENDOR, 'ZTE'], [TYPE, MOBILE]], [
                /\b(gen\d{3}) b.+49h/i                                              // Swiss GEN Mobile
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, MOBILE]], [
                /\b(zur\d{3}) b/i                                                   // Swiss ZUR Tablet
                ], [MODEL, [VENDOR, 'Swiss'], [TYPE, TABLET]], [
                /\b((zeki)?tb.*\b) b/i                                              // Zeki Tablets
                ], [MODEL, [VENDOR, 'Zeki'], [TYPE, TABLET]], [
                /\b([yr]\d{2}) b/i,
                /\b(dragon[- ]+touch |dt)(\w{5}) b/i                                // Dragon Touch Tablet
                ], [[VENDOR, 'Dragon Touch'], MODEL, [TYPE, TABLET]], [
                /\b(ns-?\w{0,9}) b/i                                                // Insignia Tablets
                ], [MODEL, [VENDOR, 'Insignia'], [TYPE, TABLET]], [
                /\b((nxa|next)-?\w{0,9}) b/i                                        // NextBook Tablets
                ], [MODEL, [VENDOR, 'NextBook'], [TYPE, TABLET]], [
                /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i                  // Voice Xtreme Phones
                ], [[VENDOR, 'Voice'], MODEL, [TYPE, MOBILE]], [
                /\b(lvtel\-)?(v1[12]) b/i                                           // LvTel Phones
                ], [[VENDOR, 'LvTel'], MODEL, [TYPE, MOBILE]], [
                /\b(ph-1) /i                                                        // Essential PH-1
                ], [MODEL, [VENDOR, 'Essential'], [TYPE, MOBILE]], [
                /\b(v(100md|700na|7011|917g).*\b) b/i                               // Envizen Tablets
                ], [MODEL, [VENDOR, 'Envizen'], [TYPE, TABLET]], [
                /\b(trio[-\w\. ]+) b/i                                              // MachSpeed Tablets
                ], [MODEL, [VENDOR, 'MachSpeed'], [TYPE, TABLET]], [
                /\btu_(1491) b/i                                                    // Rotor Tablets
                ], [MODEL, [VENDOR, 'Rotor'], [TYPE, TABLET]], [
                /(shield[\w ]+) b/i                                                 // Nvidia Shield Tablets
                ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, TABLET]], [
                /(sprint) (\w+)/i                                                   // Sprint Phones
                ], [VENDOR, MODEL, [TYPE, MOBILE]], [
                /(kin\.[onetw]{3})/i                                                // Microsoft Kin
                ], [[MODEL, /\./g, ' '], [VENDOR, MICROSOFT], [TYPE, MOBILE]], [
                /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i             // Zebra
                ], [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]], [
                /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
                ], [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]], [

                ///////////////////
                // SMARTTVS
                ///////////////////

                /smart-tv.+(samsung)/i                                              // Samsung
                ], [VENDOR, [TYPE, SMARTTV]], [
                /hbbtv.+maple;(\d+)/i
                ], [[MODEL, /^/, 'SmartTV'], [VENDOR, SAMSUNG], [TYPE, SMARTTV]], [
                /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i        // LG SmartTV
                ], [[VENDOR, LG], [TYPE, SMARTTV]], [
                /(apple) ?tv/i                                                      // Apple TV
                ], [VENDOR, [MODEL, APPLE+' TV'], [TYPE, SMARTTV]], [
                /crkey/i                                                            // Google Chromecast
                ], [[MODEL, CHROME+'cast'], [VENDOR, GOOGLE], [TYPE, SMARTTV]], [
                /droid.+aft(\w+)( bui|\))/i                                         // Fire TV
                ], [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]], [
                /\(dtv[\);].+(aquos)/i,
                /(aquos-tv[\w ]+)\)/i                                               // Sharp
                ], [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],[
                /(bravia[\w ]+)( bui|\))/i                                              // Sony
                ], [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]], [
                /(mitv-\w{5}) bui/i                                                 // Xiaomi
                ], [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]], [
                /Hbbtv.*(technisat) (.*);/i                                         // TechniSAT
                ], [VENDOR, MODEL, [TYPE, SMARTTV]], [
                /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,                          // Roku
                /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i         // HbbTV devices
                ], [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]], [
                /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i                   // SmartTV from Unidentified Vendors
                ], [[TYPE, SMARTTV]], [

                ///////////////////
                // CONSOLES
                ///////////////////

                /(ouya)/i,                                                          // Ouya
                /(nintendo) ([wids3utch]+)/i                                        // Nintendo
                ], [VENDOR, MODEL, [TYPE, CONSOLE]], [
                /droid.+; (shield) bui/i                                            // Nvidia
                ], [MODEL, [VENDOR, 'Nvidia'], [TYPE, CONSOLE]], [
                /(playstation [345portablevi]+)/i                                   // Playstation
                ], [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]], [
                /\b(xbox(?: one)?(?!; xbox))[\); ]/i                                // Microsoft Xbox
                ], [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]], [

                ///////////////////
                // WEARABLES
                ///////////////////

                /((pebble))app/i                                                    // Pebble
                ], [VENDOR, MODEL, [TYPE, WEARABLE]], [
                /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i                              // Apple Watch
                ], [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]], [
                /droid.+; (glass) \d/i                                              // Google Glass
                ], [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]], [
                /droid.+; (wt63?0{2,3})\)/i
                ], [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]], [
                /(quest( 2| pro)?)/i                                                // Oculus Quest
                ], [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]], [

                ///////////////////
                // EMBEDDED
                ///////////////////

                /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i                              // Tesla
                ], [VENDOR, [TYPE, EMBEDDED]], [
                /(aeobc)\b/i                                                        // Echo Dot
                ], [MODEL, [VENDOR, AMAZON], [TYPE, EMBEDDED]], [

                ////////////////////
                // MIXED (GENERIC)
                ///////////////////

                /droid .+?; ([^;]+?)(?: bui|; wv\)|\) applew).+? mobile safari/i    // Android Phones from Unidentified Vendors
                ], [MODEL, [TYPE, MOBILE]], [
                /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i       // Android Tablets from Unidentified Vendors
                ], [MODEL, [TYPE, TABLET]], [
                /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i                      // Unidentifiable Tablet
                ], [[TYPE, TABLET]], [
                /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i    // Unidentifiable Mobile
                ], [[TYPE, MOBILE]], [
                /(android[-\w\. ]{0,9});.+buil/i                                    // Generic Android Device
                ], [MODEL, [VENDOR, 'Generic']]
            ],

            engine : [[

                /windows.+ edge\/([\w\.]+)/i                                       // EdgeHTML
                ], [VERSION, [NAME, EDGE+'HTML']], [

                /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i                         // Blink
                ], [VERSION, [NAME, 'Blink']], [

                /(presto)\/([\w\.]+)/i,                                             // Presto
                /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i, // WebKit/Trident/NetFront/NetSurf/Amaya/Lynx/w3m/Goanna
                /ekioh(flow)\/([\w\.]+)/i,                                          // Flow
                /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,                           // KHTML/Tasman/Links
                /(icab)[\/ ]([23]\.[\d\.]+)/i,                                      // iCab
                /\b(libweb)/i
                ], [NAME, VERSION], [

                /rv\:([\w\.]{1,9})\b.+(gecko)/i                                     // Gecko
                ], [VERSION, NAME]
            ],

            os : [[

                // Windows
                /microsoft (windows) (vista|xp)/i                                   // Windows (iTunes)
                ], [NAME, VERSION], [
                /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i             // Windows Phone
                ], [NAME, [VERSION, strMapper, windowsVersionMap]], [
                /windows nt 6\.2; (arm)/i,                                        // Windows RT
                /windows[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i,
                /(?:win(?=3|9|n)|win 9x )([nt\d\.]+)/i
                ], [[VERSION, strMapper, windowsVersionMap], [NAME, 'Windows']], [

                // iOS/macOS
                /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,              // iOS
                /(?:ios;fbsv\/|iphone.+ios[\/ ])([\d\.]+)/i,
                /cfnetwork\/.+darwin/i
                ], [[VERSION, /_/g, '.'], [NAME, 'iOS']], [
                /(mac os x) ?([\w\. ]*)/i,
                /(macintosh|mac_powerpc\b)(?!.+haiku)/i                             // Mac OS
                ], [[NAME, MAC_OS], [VERSION, /_/g, '.']], [

                // Mobile OSes
                /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i                    // Android-x86/HarmonyOS
                ], [VERSION, NAME], [                                               // Android/WebOS/QNX/Bada/RIM/Maemo/MeeGo/Sailfish OS
                /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
                /(blackberry)\w*\/([\w\.]*)/i,                                      // Blackberry
                /(tizen|kaios)[\/ ]([\w\.]+)/i,                                     // Tizen/KaiOS
                /\((series40);/i                                                    // Series 40
                ], [NAME, VERSION], [
                /\(bb(10);/i                                                        // BlackBerry 10
                ], [VERSION, [NAME, BLACKBERRY]], [
                /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i         // Symbian
                ], [VERSION, [NAME, 'Symbian']], [
                /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i // Firefox OS
                ], [VERSION, [NAME, FIREFOX+' OS']], [
                /web0s;.+rt(tv)/i,
                /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i                              // WebOS
                ], [VERSION, [NAME, 'webOS']], [
                /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i                              // watchOS
                ], [VERSION, [NAME, 'watchOS']], [

                // Google Chromecast
                /crkey\/([\d\.]+)/i                                                 // Google Chromecast
                ], [VERSION, [NAME, CHROME+'cast']], [
                /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i                                  // Chromium OS
                ], [[NAME, CHROMIUM_OS], VERSION],[

                // Smart TVs
                /panasonic;(viera)/i,                                               // Panasonic Viera
                /(netrange)mmh/i,                                                   // Netrange
                /(nettv)\/(\d+\.[\w\.]+)/i,                                         // NetTV

                // Console
                /(nintendo|playstation) ([wids345portablevuch]+)/i,                 // Nintendo/Playstation
                /(xbox); +xbox ([^\);]+)/i,                                         // Microsoft Xbox (360, One, X, S, Series X, Series S)

                // Other
                /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,                            // Joli/Palm
                /(mint)[\/\(\) ]?(\w*)/i,                                           // Mint
                /(mageia|vectorlinux)[; ]/i,                                        // Mageia/VectorLinux
                /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
                                                                                    // Ubuntu/Debian/SUSE/Gentoo/Arch/Slackware/Fedora/Mandriva/CentOS/PCLinuxOS/RedHat/Zenwalk/Linpus/Raspbian/Plan9/Minix/RISCOS/Contiki/Deepin/Manjaro/elementary/Sabayon/Linspire
                /(hurd|linux) ?([\w\.]*)/i,                                         // Hurd/Linux
                /(gnu) ?([\w\.]*)/i,                                                // GNU
                /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i, // FreeBSD/NetBSD/OpenBSD/PC-BSD/GhostBSD/DragonFly
                /(haiku) (\w+)/i                                                    // Haiku
                ], [NAME, VERSION], [
                /(sunos) ?([\w\.\d]*)/i                                             // Solaris
                ], [[NAME, 'Solaris'], VERSION], [
                /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,                              // Solaris
                /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,                                  // AIX
                /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux|serenityos)/i, // BeOS/OS2/AmigaOS/MorphOS/OpenVMS/Fuchsia/HP-UX/SerenityOS
                /(unix) ?([\w\.]*)/i                                                // UNIX
                ], [NAME, VERSION]
            ]
        };

        /////////////////
        // Constructor
        ////////////////

        var UAParser = function (ua, extensions) {

            if (typeof ua === OBJ_TYPE) {
                extensions = ua;
                ua = undefined$1;
            }

            if (!(this instanceof UAParser)) {
                return new UAParser(ua, extensions).getResult();
            }

            var _navigator = (typeof window !== UNDEF_TYPE && window.navigator) ? window.navigator : undefined$1;
            var _ua = ua || ((_navigator && _navigator.userAgent) ? _navigator.userAgent : EMPTY);
            var _uach = (_navigator && _navigator.userAgentData) ? _navigator.userAgentData : undefined$1;
            var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
            var _isSelfNav = _navigator && _navigator.userAgent == _ua;

            this.getBrowser = function () {
                var _browser = {};
                _browser[NAME] = undefined$1;
                _browser[VERSION] = undefined$1;
                rgxMapper.call(_browser, _ua, _rgxmap.browser);
                _browser[MAJOR] = majorize(_browser[VERSION]);
                // Brave-specific detection
                if (_isSelfNav && _navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
                    _browser[NAME] = 'Brave';
                }
                return _browser;
            };
            this.getCPU = function () {
                var _cpu = {};
                _cpu[ARCHITECTURE] = undefined$1;
                rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
                return _cpu;
            };
            this.getDevice = function () {
                var _device = {};
                _device[VENDOR] = undefined$1;
                _device[MODEL] = undefined$1;
                _device[TYPE] = undefined$1;
                rgxMapper.call(_device, _ua, _rgxmap.device);
                if (_isSelfNav && !_device[TYPE] && _uach && _uach.mobile) {
                    _device[TYPE] = MOBILE;
                }
                // iPadOS-specific detection: identified as Mac, but has some iOS-only properties
                if (_isSelfNav && _device[MODEL] == 'Macintosh' && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
                    _device[MODEL] = 'iPad';
                    _device[TYPE] = TABLET;
                }
                return _device;
            };
            this.getEngine = function () {
                var _engine = {};
                _engine[NAME] = undefined$1;
                _engine[VERSION] = undefined$1;
                rgxMapper.call(_engine, _ua, _rgxmap.engine);
                return _engine;
            };
            this.getOS = function () {
                var _os = {};
                _os[NAME] = undefined$1;
                _os[VERSION] = undefined$1;
                rgxMapper.call(_os, _ua, _rgxmap.os);
                if (_isSelfNav && !_os[NAME] && _uach && _uach.platform != 'Unknown') {
                    _os[NAME] = _uach.platform  
                                        .replace(/chrome os/i, CHROMIUM_OS)
                                        .replace(/macos/i, MAC_OS);           // backward compatibility
                }
                return _os;
            };
            this.getResult = function () {
                return {
                    ua      : this.getUA(),
                    browser : this.getBrowser(),
                    engine  : this.getEngine(),
                    os      : this.getOS(),
                    device  : this.getDevice(),
                    cpu     : this.getCPU()
                };
            };
            this.getUA = function () {
                return _ua;
            };
            this.setUA = function (ua) {
                _ua = (typeof ua === STR_TYPE && ua.length > UA_MAX_LENGTH) ? trim(ua, UA_MAX_LENGTH) : ua;
                return this;
            };
            this.setUA(_ua);
            return this;
        };

        UAParser.VERSION = LIBVERSION;
        UAParser.BROWSER =  enumerize([NAME, VERSION, MAJOR]);
        UAParser.CPU = enumerize([ARCHITECTURE]);
        UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
        UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);

        ///////////
        // Export
        //////////

        // check js environment
        {
            // nodejs env
            if ( module.exports) {
                exports = module.exports = UAParser;
            }
            exports.UAParser = UAParser;
        }

        // jQuery/Zepto specific (optional)
        // Note:
        //   In AMD env the global scope should be kept clean, but jQuery is an exception.
        //   jQuery always exports to global scope, unless jQuery.noConflict(true) is used,
        //   and we should catch that.
        var $ = typeof window !== UNDEF_TYPE && (window.jQuery || window.Zepto);
        if ($ && !$.ua) {
            var parser = new UAParser();
            $.ua = parser.getResult();
            $.ua.get = function () {
                return parser.getUA();
            };
            $.ua.set = function (ua) {
                parser.setUA(ua);
                var result = parser.getResult();
                for (var prop in result) {
                    $.ua[prop] = result[prop];
                }
            };
        }

    })(typeof window === 'object' ? window : commonjsGlobal);
    });
    var uaParser_1 = uaParser.UAParser;

    /**
     * Copyright 2023, Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var userAgentParser = {
        parseUserAgentInfo: function () {
            var parser = new uaParser_1();
            var agentInfo = parser.getResult();
            var os = agentInfo.os, device = agentInfo.device;
            return { os: os, device: device };
        }
    };
    function getUserAgentParser() {
        return userAgentParser;
    }

    /**
     * Copyright 2023 Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */

    var commonExports = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get LogLevel () { return exports.LogLevel; },
        getLogger: getLogger,
        setLogHandler: setLogHandler,
        LOG_LEVEL: LOG_LEVEL,
        createLogger: createLogger
    });

    /**
     * Copyright 2016-2017, 2019-2024 Optimizely
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     * https://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    var logger$d = getLogger();
    logHelper.setLogHandler(createLogger());
    logHelper.setLogLevel(exports.LogLevel.INFO);
    var MODULE_NAME$g = 'INDEX_BROWSER';
    var DEFAULT_EVENT_BATCH_SIZE = 10;
    var DEFAULT_EVENT_FLUSH_INTERVAL = 1000; // Unit is ms, default is 1s
    var DEFAULT_EVENT_MAX_QUEUE_SIZE = 10000;
    var hasRetriedEvents = false;
    /**
     * Creates an instance of the Optimizely class
     * @param  {Config} config
     * @return {Client|null} the Optimizely client object
     *                           null on error
     */
    var createInstance = function (config) {
        var _a;
        try {
            // TODO warn about setting per instance errorHandler / logger / logLevel
            var isValidInstance = false;
            if (config.errorHandler) {
                setErrorHandler(config.errorHandler);
            }
            if (config.logger) {
                logHelper.setLogHandler(config.logger);
                // respect the logger's shouldLog functionality
                logHelper.setLogLevel(exports.LogLevel.NOTSET);
            }
            if (config.logLevel !== undefined) {
                logHelper.setLogLevel(config.logLevel);
            }
            try {
                configValidator.validate(config);
                isValidInstance = true;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            catch (ex) {
                logger$d.error(ex);
            }
            var eventDispatcher$1 = void 0;
            // prettier-ignore
            if (config.eventDispatcher == null) { // eslint-disable-line eqeqeq
                // only wrap the event dispatcher with pending events retry if the user didnt override
                eventDispatcher$1 = new LocalStoragePendingEventsDispatcher({
                    eventDispatcher: defaultEventDispatcher,
                });
                if (!hasRetriedEvents) {
                    eventDispatcher$1.sendPendingEvents();
                    hasRetriedEvents = true;
                }
            }
            else {
                eventDispatcher$1 = config.eventDispatcher;
            }
            var closingDispatcher = config.closingEventDispatcher;
            if (!config.eventDispatcher && !closingDispatcher && window.navigator && 'sendBeacon' in window.navigator) {
                closingDispatcher = eventDispatcher;
            }
            var eventBatchSize = config.eventBatchSize;
            var eventFlushInterval = config.eventFlushInterval;
            if (!eventProcessorConfigValidator.validateEventBatchSize(config.eventBatchSize)) {
                logger$d.warn('Invalid eventBatchSize %s, defaulting to %s', config.eventBatchSize, DEFAULT_EVENT_BATCH_SIZE);
                eventBatchSize = DEFAULT_EVENT_BATCH_SIZE;
            }
            if (!eventProcessorConfigValidator.validateEventFlushInterval(config.eventFlushInterval)) {
                logger$d.warn('Invalid eventFlushInterval %s, defaulting to %s', config.eventFlushInterval, DEFAULT_EVENT_FLUSH_INTERVAL);
                eventFlushInterval = DEFAULT_EVENT_FLUSH_INTERVAL;
            }
            var errorHandler = getErrorHandler();
            var notificationCenter = createNotificationCenter({ logger: logger$d, errorHandler: errorHandler });
            var eventProcessorConfig = {
                dispatcher: eventDispatcher$1,
                closingDispatcher: closingDispatcher,
                flushInterval: eventFlushInterval,
                batchSize: eventBatchSize,
                maxQueueSize: config.eventMaxQueueSize || DEFAULT_EVENT_MAX_QUEUE_SIZE,
                notificationCenter: notificationCenter,
            };
            var odpExplicitlyOff = ((_a = config.odpOptions) === null || _a === void 0 ? void 0 : _a.disabled) === true;
            if (odpExplicitlyOff) {
                logger$d.info(LOG_MESSAGES.ODP_DISABLED);
            }
            var clientEngine = config.clientEngine, clientVersion = config.clientVersion;
            var optimizelyOptions = __assign(__assign({ clientEngine: JAVASCRIPT_CLIENT_ENGINE }, config), { eventProcessor: eventProcessor.createEventProcessor(eventProcessorConfig), logger: logger$d, errorHandler: errorHandler, datafileManager: config.sdkKey
                    ? createHttpPollingDatafileManager(config.sdkKey, logger$d, config.datafile, config.datafileOptions)
                    : undefined, notificationCenter: notificationCenter, isValidInstance: isValidInstance, odpManager: odpExplicitlyOff ? undefined
                    : BrowserOdpManager.createInstance({ logger: logger$d, odpOptions: config.odpOptions, clientEngine: clientEngine, clientVersion: clientVersion }) });
            var optimizely_1 = new Optimizely(optimizelyOptions);
            try {
                if (typeof window.addEventListener === 'function') {
                    var unloadEvent = 'onpagehide' in window ? 'pagehide' : 'unload';
                    window.addEventListener(unloadEvent, function () {
                        optimizely_1.close();
                    }, false);
                }
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
            }
            catch (e) {
                logger$d.error(LOG_MESSAGES.UNABLE_TO_ATTACH_UNLOAD, MODULE_NAME$g, e.message);
            }
            return optimizely_1;
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
        }
        catch (e) {
            logger$d.error(e);
            return null;
        }
    };
    var __internalResetRetryState = function () {
        hasRetriedEvents = false;
    };
    /**
     * Entry point into the Optimizely Browser SDK
     */
    var setLogHandler$1 = logHelper.setLogHandler;
    var setLogLevel$1 = logHelper.setLogLevel;
    var index_browser = __assign(__assign({}, commonExports), { logging: loggerPlugin, errorHandler: defaultErrorHandler, eventDispatcher: defaultEventDispatcher, sendBeaconEventDispatcher: eventDispatcher, enums: enums, setLogger: setLogHandler$1, setLogLevel: setLogLevel$1, createInstance: createInstance, __internalResetRetryState: __internalResetRetryState, OptimizelyDecideOption: exports.OptimizelyDecideOption, getUserAgentParser: getUserAgentParser });

    exports.LOG_LEVEL = LOG_LEVEL;
    exports.__internalResetRetryState = __internalResetRetryState;
    exports.createInstance = createInstance;
    exports.createLogger = createLogger;
    exports.default = index_browser;
    exports.enums = enums;
    exports.errorHandler = defaultErrorHandler;
    exports.eventDispatcher = defaultEventDispatcher;
    exports.getLogger = getLogger;
    exports.getUserAgentParser = getUserAgentParser;
    exports.logging = loggerPlugin;
    exports.sendBeaconEventDispatcher = eventDispatcher;
    exports.setLogHandler = setLogHandler;
    exports.setLogLevel = setLogLevel$1;
    exports.setLogger = setLogHandler$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
