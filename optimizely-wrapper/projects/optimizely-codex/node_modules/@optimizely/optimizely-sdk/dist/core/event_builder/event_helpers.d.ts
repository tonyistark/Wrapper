import { EventTags, UserAttributes } from '../../shared_types';
import { DecisionObj } from '../decision_service';
import { ProjectConfig } from '../project_config';
interface ImpressionConfig {
    decisionObj: DecisionObj;
    userId: string;
    flagKey: string;
    enabled: boolean;
    userAttributes?: UserAttributes;
    clientEngine: string;
    clientVersion: string;
    configObj: ProjectConfig;
}
type VisitorAttribute = {
    entityId: string;
    key: string;
    value: string | number | boolean;
};
interface ImpressionEvent {
    type: 'impression';
    timestamp: number;
    uuid: string;
    user: {
        id: string;
        attributes: VisitorAttribute[];
    };
    context: EventContext;
    layer: {
        id: string | null;
    };
    experiment: {
        id: string | null;
        key: string;
    } | null;
    variation: {
        id: string | null;
        key: string;
    } | null;
    ruleKey: string;
    flagKey: string;
    ruleType: string;
    enabled: boolean;
}
type EventContext = {
    accountId: string;
    projectId: string;
    revision: string;
    clientName: string;
    clientVersion: string;
    anonymizeIP: boolean;
    botFiltering: boolean | undefined;
};
interface ConversionConfig {
    eventKey: string;
    eventTags?: EventTags;
    userId: string;
    userAttributes?: UserAttributes;
    clientEngine: string;
    clientVersion: string;
    configObj: ProjectConfig;
}
interface ConversionEvent {
    type: 'conversion';
    timestamp: number;
    uuid: string;
    user: {
        id: string;
        attributes: VisitorAttribute[];
    };
    context: EventContext;
    event: {
        id: string | null;
        key: string;
    };
    revenue: number | null;
    value: number | null;
    tags: EventTags | undefined;
}
/**
 * Creates an ImpressionEvent object from decision data
 * @param  {ImpressionConfig}  config
 * @return {ImpressionEvent}   an ImpressionEvent object
 */
export declare const buildImpressionEvent: ({ configObj, decisionObj, userId, flagKey, enabled, userAttributes, clientEngine, clientVersion, }: ImpressionConfig) => ImpressionEvent;
/**
 * Creates a ConversionEvent object from track
 * @param  {ConversionConfig} config
 * @return {ConversionEvent}  a ConversionEvent object
 */
export declare const buildConversionEvent: ({ configObj, userId, userAttributes, clientEngine, clientVersion, eventKey, eventTags, }: ConversionConfig) => ConversionEvent;
export {};
