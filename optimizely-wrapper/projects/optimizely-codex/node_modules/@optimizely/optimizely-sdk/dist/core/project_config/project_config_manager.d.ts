import { OnReadyResult, OptimizelyConfig, DatafileManager } from '../../shared_types';
import { ProjectConfig } from '../project_config';
interface ProjectConfigManagerConfig {
    datafile?: string | object;
    jsonSchemaValidator?: {
        validate(jsonObject: unknown): boolean;
    };
    sdkKey?: string;
    datafileManager?: DatafileManager;
}
/**
 * ProjectConfigManager provides project config objects via its methods
 * getConfig and onUpdate. It uses a DatafileManager to fetch datafiles. It is
 * responsible for parsing and validating datafiles, and converting datafile
 * string into project config objects.
 * @param {ProjectConfigManagerConfig}    config
 */
export declare class ProjectConfigManager {
    private updateListeners;
    private configObj;
    private optimizelyConfigObj;
    private readyPromise;
    jsonSchemaValidator: {
        validate(jsonObject: unknown): boolean;
    } | undefined;
    datafileManager: DatafileManager | null;
    constructor(config: ProjectConfigManagerConfig);
    /**
     * Respond to datafile manager's onReady promise becoming fulfilled.
     * If there are validation or parse failures using the datafile provided by
     * DatafileManager, ProjectConfigManager's ready promise is resolved with an
     * unsuccessful result. Otherwise, ProjectConfigManager updates its own project
     * config object from the new datafile, and its ready promise is resolved with a
     * successful result.
     */
    private onDatafileManagerReadyFulfill;
    /**
     * Respond to datafile manager's onReady promise becoming rejected.
     * When DatafileManager's onReady promise is rejected, there is no possibility
     * of obtaining a datafile. In this case, ProjectConfigManager's ready promise
     * is fulfilled with an unsuccessful result.
     * @param   {Error}   err
     * @returns {Object}
     */
    private onDatafileManagerReadyReject;
    /**
     * Respond to datafile manager's update event. Attempt to update own config
     * object using latest datafile from datafile manager. Call own registered
     * update listeners if successful
     */
    private onDatafileManagerUpdate;
    /**
     * Handle new datafile by attemping to create a new Project Config object. If successful and
     * the new config object's revision is newer than the current one, sets/updates the project config
     * and optimizely config object instance variables and returns null for the error. If unsuccessful,
     * the project config and optimizely config objects will not be updated, and the error is returned.
     * @param   {string | object}        newDatafile
     * @returns {Error|null}    error or null
     */
    private handleNewDatafile;
    /**
     * Returns the current project config object, or null if no project config object
     * is available
     * @return {ProjectConfig|null}
     */
    getConfig(): ProjectConfig | null;
    /**
     * Returns the optimizely config object or null
     * @return {OptimizelyConfig|null}
     */
    getOptimizelyConfig(): OptimizelyConfig | null;
    /**
     * Returns a Promise that fulfills when this ProjectConfigManager is ready to
     * use (meaning it has a valid project config object), or has failed to become
     * ready.
     *
     * Failure can be caused by the following:
     * - At least one of sdkKey or datafile is not provided in the constructor argument
     * - The provided datafile was invalid
     * - The datafile provided by the datafile manager was invalid
     * - The datafile manager failed to fetch a datafile
     *
     * The returned Promise is fulfilled with a result object containing these
     * properties:
     *    - success (boolean): True if this instance is ready to use with a valid
     *                         project config object, or false if it failed to
     *                         become ready
     *    - reason (string=):  If success is false, this is a string property with
     *                         an explanatory message.
     * @return {Promise}
     */
    onReady(): Promise<OnReadyResult>;
    /**
     * Add a listener for project config updates. The listener will be called
     * whenever this instance has a new project config object available.
     * Returns a dispose function that removes the subscription
     * @param  {Function} listener
     * @return {Function}
     */
    onUpdate(listener: (config: ProjectConfig) => void): () => void;
    /**
     * Stop the internal datafile manager and remove all update listeners
     */
    stop(): void;
}
export declare function createProjectConfigManager(config: ProjectConfigManagerConfig): ProjectConfigManager;
export {};
