/**
 * Copyright 2022, Optimizely
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { EventTags, ConversionEvent, ImpressionEvent } from '../events';
import { ProcessableEvent } from '../eventProcessor';
import { EventV1Request } from '../eventDispatcher';
export type EventV1 = {
    account_id: string;
    project_id: string;
    revision: string;
    client_name: string;
    client_version: string;
    anonymize_ip: boolean;
    enrich_decisions: boolean;
    visitors: Visitor[];
};
type Visitor = {
    snapshots: Visitor.Snapshot[];
    visitor_id: string;
    attributes: Visitor.Attribute[];
};
declare namespace Visitor {
    type AttributeType = 'custom';
    export type Attribute = {
        entity_id: string;
        key: string;
        type: AttributeType;
        value: string | number | boolean;
    };
    export type Snapshot = {
        decisions?: Decision[];
        events: SnapshotEvent[];
    };
    type Decision = {
        campaign_id: string | null;
        experiment_id: string | null;
        variation_id: string | null;
        metadata: Metadata;
    };
    type Metadata = {
        flag_key: string;
        rule_key: string;
        rule_type: string;
        variation_key: string;
        enabled: boolean;
    };
    export type SnapshotEvent = {
        entity_id: string | null;
        timestamp: number;
        uuid: string;
        key: string;
        revenue?: number;
        value?: number;
        tags?: EventTags;
    };
    export {};
}
/**
 * Given an array of batchable Decision or ConversionEvent events it returns
 * a single EventV1 with proper batching
 *
 * @param {ProcessableEvent[]} events
 * @returns {EventV1}
 */
export declare function makeBatchedEventV1(events: ProcessableEvent[]): EventV1;
/**
 * Event for usage with v1 logtier
 *
 * @export
 * @interface EventBuilderV1
 */
export declare function buildImpressionEventV1(data: ImpressionEvent): EventV1;
export declare function buildConversionEventV1(data: ConversionEvent): EventV1;
export declare function formatEvents(events: ProcessableEvent[]): EventV1Request;
export {};
